if (!this.JSON) { this.JSON = {}; } (function () { function f(n) { return n < 10 ? '0' + n : n; } if (typeof Date.prototype.toJSON !== 'function') { Date.prototype.toJSON = function (key) { return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null; }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf(); }; } var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); }) + '"' : '"' + string + '"'; } function str(key, holder) { var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key); } if (typeof rep === 'function') { value = rep.call(holder, key, value); } switch (typeof value) { case 'string': return quote(value); case 'number': return isFinite(value) ? String(value) : 'null'; case 'boolean': case 'null': return String(value); case 'object': if (!value) { return 'null'; } gap += indent; partial = []; if (Object.prototype.toString.apply(value) === '[object Array]') { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null'; } v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v; } if (rep && typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { k = rep[i]; if (typeof k === 'string') { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } else { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v; } } if (typeof JSON.stringify !== 'function') { JSON.stringify = function (value, replacer, space) { var i; gap = ''; indent = ''; if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' '; } } else if (typeof space === 'string') { indent = space; } rep = replacer; if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) { throw new Error('JSON.stringify'); } return str('', { '': value }); }; } if (typeof JSON.parse !== 'function') { JSON.parse = function (text, reviver) { var j; function walk(holder, key) { var k, v, value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v; } else { delete value[k]; } } } } return reviver.call(holder, key, value); } text = String(text); cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); }); } if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j; } throw new SyntaxError('JSON.parse'); }; } }());
/*globales Xrm, $ */

///
/// AlfaPeople CRM 2011 CrmRestKit
///
/// Based on 'MSCRM4 Web Service Toolkit for JavaScript v2.1' (http://crmtoolkit.codeplex.com/releases/view/48329)
/// and XrmSvcTookit 'http://xrmsvctoolkit.codeplex.com/
///

/// Credits:
///     Daniel Cai (getClientUrl, associate, disassociate)
///     Matt (https://www.codeplex.com/site/users/view/MattMatt)
///
/// @author:
///     Daniel Rene Thul, drt@alfapeople.com
///
/// @version:
///     2.6.1
///
/// requires (jquery.1.7.2.js, JSON2.js)
///
var CrmRestKit = (function (window, document, undefined) {
    'use strict';

    ///
    /// Private members
    ///
    var ODATA_ENDPOINT = "/XRMServices/2011/OrganizationData.svc",
        version = '2.6.0';

    ///
    /// Private function to the context object.
    ///
    function getContext() {

        if (typeof GetGlobalContext !== "undefined") {
            /*ignore jslint start*/
            return GetGlobalContext();
            /*ignore jslint end*/

        }
        else {

            if (typeof Xrm !== "undefined") {
                return Xrm.Page.context;
            }
            else {

                throw new Error("Context is not available.");
            }
        }
    }

    ///
    /// Private function to return the server URL from the context
    ///
    function getClientUrl() {

        var url = null,
            localServerUrl = window.location.protocol + "//" + window.location.host,
            context = getContext();


        if (Xrm.Page.context.getClientUrl !== undefined) {
            // since version SDK 5.0.13 
            // http://www.magnetismsolutions.com/blog/gayan-pereras-blog/2013/01/07/crm-2011-polaris-new-xrm.page-method

            url = Xrm.Page.context.getClientUrl();
        }
        else if (context.isOutlookClient() && !context.isOutlookOnline()) {
            url = localServerUrl;
        }
        else {
            url = context.getClientUrl();
            url = url.replace(/^(http|https):\/\/([_a-zA-Z0-9\-\.]+)(:([0-9]{1,5}))?/, localServerUrl);
            url = url.replace(/\/$/, "");
        }
        return url;
    }

    ///
    /// Private function to return the path to the REST endpoint.
    ///
    function getODataPath() {

        return getClientUrl() + ODATA_ENDPOINT;
    }

    ///
    /// Returns an object that reprensts a entity-reference 
    ///
    function entityReferenceFactory(id, opt_logicalName) {

        var reference = null;

        if (id !== undefined && id !== null) {

            reference = {
                __metadata: { type: "Microsoft.Crm.Sdk.Data.Services.EntityReference" },
                Id: id
            };

            if (opt_logicalName !== undefined && opt_logicalName !== null) {

                reference.LogicalName = opt_logicalName;
            }
        }

        return reference;
    }

    ///
    /// Returns an object that reprensts a option-set-value 
    ///
    function optionSetValueFactory(option_value) {

        return {
            __metadata: { type: 'Microsoft.Crm.Sdk.Data.Services.OptionSetValue' },
            Value: option_value
        };
    }

    ///
    /// Returns an object that represents an money value
    ///
    function moneyValueFactory(value) {

        return {
            __metadata: { type: 'Microsoft.Crm.Sdk.Data.Services.Money' },
            Value: value
        };
    }

    ///
    /// Parses the ODATA date-string into a date-object
    /// All queries return a date in the format "/Date(1368688809000)/"
    /// 
    function parseODataDate(value) {

        return new Date(parseInt(value.replace('/Date(', '').replace(')/', ''), 10));
    }

    ///
    /// Generics ajax-call funciton. Returns a promise object
    ///
    function doRequest(options, asyn) {

        // default values for the ajax queries
        var ajaxDefaults = {
            type: "GET",
            async: true,
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            beforeSend: function (request) {

                request.setRequestHeader("Accept", "application/json");
            }
        };

        // merge the default-settings with the options-object
        options = $.extend(ajaxDefaults, options);

        // request could be executed in sync or asyn mode
        options.async = (asyn === undefined) ? true : asyn;

        return $.ajax(options);
    }

    ///
    /// Creates a link between records 
    ///
    function associate(entity1Id, entity1Name, entity2Id, entity2Name, relationshipName, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
            odatapath = getODataPath(),
            request = {
                url: odatapath + "/" + entity1Name + "Set(guid'" + entity1Id + "')/$links/" + relationshipName,
                type: "POST",
                data: window.JSON.stringify({
                    uri: odatapath + "/" + entity2Name + "Set(guid'" + entity2Id + "')"
                })
            };

        return doRequest(request, asyn);
    }

    ///
    /// Removes a link between records 
    ///
    function disassociate(entity1Id, entity1Name, entity2Id, relationshipName, opt_asyn) {

        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
            odatapath = getODataPath(),
            request = {
                url: odatapath + "/" + entity1Name + "Set(guid'" + entity1Id + "')/$links/" + relationshipName + "(guid'" + entity2Id + "')",
                type: "POST",
                // method: "DELETE",
                beforeSend: function (request) {
                    request.setRequestHeader('Accept', 'application/json');
                    request.setRequestHeader('X-HTTP-Method', 'DELETE');
                }
            };

        return doRequest(request, asyn);
    }

    ///
    /// Retrieves a single record 
    ///
    function retrieve(entityName, id, columns, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
            setName = entityName + 'Set',
            query = getODataPath() + "/" + setName + "(guid'" + id + "')" + "?$select=" + columns.join(',');

        // returns a promise instance
        return doRequest({ url: query }, asyn);
    }

    ///
    /// Used in the context of lazy-loading (more than 50 records found in the retrieveMultiple request)
    /// Query (url) needs to define the entity, columns and filter
    ///
    function byQueryUrl(queryUrl, opt_asyn) {

        return doRequest({ url: queryUrl }, opt_asyn);
    }

    ///
    /// Used for joins
    ///
    function byExpandQuery(entityName, columns, expand, filter, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn;

        // in case filter is empty 
        filter = (filter) ? "&$filter=" + encodeURIComponent(filter) : '';

        // create defered object
        var setName = entityName + 'Set',
            query = getODataPath() + "/" + setName + "?$select=" + columns.join(',') + '&$expand=' + expand + filter;

        return doRequest({ url: query }, asyn);
    }

    ///
    /// Retrievs multiuple records based on filter
    /// The max number of records returned by Odata is limited to 50, the result object contains the property 
    /// 'next' and the fn loadNext that could be used to load the addional records 
    ///
    function byQuery(entityName, columns, filter, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn;

        // in case filter is empty 
        filter = (filter) ? "&$filter=" + encodeURIComponent(filter) : '';

        // create defered object
        var setName = entityName + 'Set',
            query = getODataPath() + "/" + setName + "?$select=" + columns.join(',') + filter;

        return doRequest({ url: query }, asyn);
    }

    ///
    /// Per default a REST query returns only 50 record. This function will load all records
    ///
    function byQueryAll(entityName, columns, filter, opt_asyn) {

        var dfdAll = new $.Deferred(),
            allRecords = [];

        byQuery(entityName, columns, filter, opt_asyn).then(function byQueryAllSuccess(result) {

            // add the elements to the collection
            allRecords = allRecords.concat(result.d.results);

            if (result.d.__next) {

                // the success-handler will be this function
                byQueryUrl(result.d.__next, opt_asyn).then(byQueryAllSuccess, dfdAll.reject);

                // call the progressCallbacks of the promise
                dfdAll.notify(result);
            }
            else {
                dfdAll.resolve(allRecords);
            }

        }, dfdAll.reject);

        return dfdAll.promise();
    }

    ///
    /// Create a single reocrd
    ///
    function created(entityName, entityObject, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
            setName = entityName + 'Set',
            json = window.JSON.stringify(entityObject),
            query = getODataPath() + "/" + setName;

        // returns a promise object
        return doRequest({ type: "POST", url: query, data: json }, asyn);
    }

    ///
    /// Updates the record with the stated intance.
    /// MERGE methode does not return data
    ///
    /// Sample:
    ///     CrmRestKit.Update('Account', id, { 'Address1_City': 'sample', 'Name': 'sample' }).done(...).fail(..)
    ///
    function update(entityName, id, entityObject, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
            setName = entityName + 'Set',
            json = window.JSON.stringify(entityObject),
            query = getODataPath() + "/" + setName + "(guid'" + id + "')",
            // ajax-call-options
            options = {
                type: "POST",
                url: query,
                data: json,
                beforeSend: function (request) {
                    request.setRequestHeader("Accept", "application/json");
                    request.setRequestHeader("X-HTTP-Method", "MERGE");
                }
            };

        // MERGE methode does not return data
        return doRequest(options, asyn);
    }

    ///
    /// Deletes as single record identified by the id
    /// Sample:
    ///         CrmRestKit.Delete('Account', id).done(...).fail(..);
    ///
    function deleteRecord(entityName, id, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
            setName = entityName + 'Set',
            query = getODataPath() + '/' + setName + "(guid'" + id + "')",
            options = {
                type: "POST",
                url: query,
                beforeSend: function (request) {
                    request.setRequestHeader('Accept', 'application/json');
                    request.setRequestHeader('X-HTTP-Method', 'DELETE');
                }
            };

        return doRequest(options, asyn);
    }

    ///
    /// Public API
    ///
    return {
        Version: version,
        /* Read /retrieve methods*/
        Retrieve: retrieve,
        ByQuery: byQuery,
        ByQueryUrl: byQueryUrl,
        ByExpandQuery: byExpandQuery,
        ByQueryAll: byQueryAll,
        /* C U D */
        Create: created,
        Update: update,
        Delete: deleteRecord,
        /* N:M relationship operations */
        Associate: associate,
        Disassociate: disassociate,
        /* Factory methods */
        EntityReferenceFactory: entityReferenceFactory,
        OptionSetValueFactory: optionSetValueFactory,
        MoneyValueFactory: moneyValueFactory,
        /* util methods */
        ParseODataDate: parseODataDate
    };
}(window, document));
//Library Name: cvt_CommonFunctions.js
//If the SDK namespace object is not defined, create it.
if (typeof MCS == "undefined") { MCS = {}; }
// Create Namespace container for functions in this library;
if (typeof MCS.cvt_Common == "undefined") { MCS.cvt_Common = {}; }

//Form Types
MCS.cvt_Common.FORM_TYPE_CREATE = 1;
MCS.cvt_Common.FORM_TYPE_UPDATE = 2;
MCS.cvt_Common.FORM_TYPE_READ_ONLY = 3;
MCS.cvt_Common.FORM_TYPE_DISABLED = 4;
MCS.cvt_Common.FORM_TYPE_QUICKCREATE = 5;
MCS.cvt_Common.FORM_TYPE_BULKEDIT = 6;

MCS.cvt_Common.BlankGUID = "00000000-0000-0000-0000-000000000000";

MCS.cvt_Common.AppointmentOccursInPast = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() == MCS.cvt_Common.FORM_TYPE_CREATE)
        return false;
    var startTimeObj = formContext.getAttribute("scheduledstart");
    if (startTimeObj == null)
        return false;
    var startTime = startTimeObj.getValue();
    if (startTime == null)
        return false;
    var now = new Date();
    if (now > startTime)
        return true;
    else
        return false;
};

//Get Server URL
MCS.cvt_Common.BuildRelationshipServerUrl = function () {
    var globalContext = Xrm.Utility.getGlobalContext();
    var server = globalContext.getClientUrl();
    // var server = Xrm.Page.context.getClientUrl();
    if (server.match(/\/$/)) {
        server = server.substring(0, server.length - 1);
    }
    return server;
};

//Check if Obj is null else get Value
MCS.cvt_Common.checkNull = function (executionContext, fieldname) {
    var formContext = executionContext.getFormContext();
    var fieldObj = formContext.getAttribute(fieldname);

    if (fieldObj != null)
        return fieldObj.getValue();

    return null;
};

//Close window
MCS.cvt_Common.closeWindow = function (executionContext, msg) {
    var formContext = executionContext.getFormContext();
    if (msg != null)
        alert(msg);
    //Clear all fields so there are no dirty fields
    var attributes = formContext.data.entity.attributes.get();
    for (var i in attributes) {
        attributes[i].setSubmitMode("never");
    }
    //Close record         
    formContext.ui.close();
};

MCS.cvt_Common.fireChange = function (executionContext, field) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
    USAGE:  Causes 'onChange' event to fire on a related field.  Typically
    would be called to initiate onChange event for a field changed 
    programmatically (and which would not have a "real" onChange fired)
    *********************************************************************/
    var ctlControl = formContext.getControl(field);

    formContext.getAttribute(ctlControl).fireOnChange();

}

//collapse a tab
MCS.cvt_Common.collapseTab = function (executionContext, tab, field) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
    USAGE: collapses/expands a tab based upon whether a control is empty.
    Pass in the schema name of the tab and the name of the field to check

    Example:
    //tab name: "tab_9"  <--schema name is what we want passed in
    //mcs_relatedtsa  <--pass in the field name to check

    **********************************************************************/

    var ctlControl = formContext.getControl(field);
    var atrControl = ctlControl.getAttribute();
    var valControl = atrControl.getValue();

    var tabObj = formContext.ui.tabs.get(tab);

    if (valControl != "" && valControl != null) {
        tabObj.setDisplayState("expanded");
    }
    else {
        tabObj.setDisplayState("collapsed");
    }
};

MCS.cvt_Common.collapse2Tab = function (executionContext, tab1, tab2) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
    USAGE: collapses/expands a tab based upon whether a control is empty.
    Pass in the schema name of the tab and the name of the field to check

    Example:
    //tab name: "tab_9"  <--schema name is what we want passed in
    //mcs_relatedtsa  <--pass in the field name to check

    **********************************************************************/
    var field = "serviceid";
    var ctlControl = formContext.getControl(field);
    var atrControl = ctlControl.getAttribute();
    var valControl = atrControl.getValue();

    var tabObj1 = formContext.ui.tabs.get(tab1);
    var tabObj2 = formContext.ui.tabs.get(tab2);


    if (valControl != "" && valControl != null) {
        tabObj1.setDisplayState("expanded");
        tabObj2.setVisible(false);
    }
    else {
        tabObj1.setDisplayState("collapsed");
        tabObj2.setVisible(true);
    }
};


//Check if GUIDS are the same
MCS.cvt_Common.compareGUIDS = function (guid1, guid2) {
    if (guid1 == null && guid2 == null)
        return true;

    if (guid1 == null || guid2 == null)
        return false;

    var guid1Cleaned = guid1.replace(/\W/g, '');
    guid1Cleaned = guid1Cleaned.toString().toUpperCase();

    var guid2Cleaned = guid2.replace(/\W/g, '');
    guid2Cleaned = guid2Cleaned.toString().toUpperCase();

    if (guid1Cleaned == guid2Cleaned)
        return true;
    else
        return false;
};

//Change a Record's Status
MCS.cvt_Common.changeRecordStatus = function (executionContext, RECORD_ID, Entity_Name, stateCode, statusCode) {
    var formContext = executionContext.getFormContext();
    var globalContext = Xrm.Utility.getGlobalContext();
    var url = globalContext.getClientUrl();
    //var url = Xrm.Page.context.getClientUrl();

    // create the SetState request
    var request = "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">";
    request += "<s:Body>";
    request += "<Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
    request += "<request i:type=\"b:SetStateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">";
    request += "<a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>EntityMoniker</c:key>";
    request += "<c:value i:type=\"a:EntityReference\">";
    request += "<a:Id>" + RECORD_ID + "</a:Id>";
    request += "<a:LogicalName>" + Entity_Name + "</a:LogicalName>";
    request += "<a:Name i:nil=\"true\" />";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>State</c:key>";
    request += "<c:value i:type=\"a:OptionSetValue\">";
    request += "<a:Value>" + stateCode + "</a:Value>";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>Status</c:key>";
    request += "<c:value i:type=\"a:OptionSetValue\">";
    request += "<a:Value>" + statusCode + "</a:Value>";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "</a:Parameters>";
    request += "<a:RequestId i:nil=\"true\" />";
    request += "<a:RequestName>SetState</a:RequestName>";
    request += "</request>";
    request += "</Execute>";
    request += "</s:Body>";
    request += "</s:Envelope>";
    //send set state request
    $.ajax({
        type: "POST",
        contentType: "text/xml; charset=utf-8",
        datatype: "xml",
        url: url + "/XRMServices/2011/Organization.svc/web",
        data: request,
        beforeSend: function (XMLHttpRequest) {
            XMLHttpRequest.setRequestHeader("Accept", "application/xml, text/xml, */*");
            XMLHttpRequest.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute");
        },
        success: function (data, textStatus, XmlHttpRequest) {
            formContext.data.refresh();
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {
            alert(errorThrown);
        }
    });
};

//Create Fetch
MCS.cvt_Common.CreateFetch = function (entityName, columns, conditions, order) {
    var formattedColumns = '';
    var formattedConditions = '';
    var formattedOrder = '';

    //columns is an array, so that we can build that string with the xml tags
    if (columns != null && columns.length > 0) {
        for (column in columns) {
            formattedColumns += '<attribute name="' + columns[column] + '" />';
        }
    }
    //prefix filter type and add conditions
    if (conditions != null && conditions.length > 0) {
        formattedConditions = "<filter type='and'>";
        for (condition in conditions) {
            formattedConditions += conditions[condition];
        }
    }
    //format order
    if (order != null && order.length == 2)
        formattedOrder = '<order attribute="' + order[0] + '" descending="' + order[1] + '" />';

    var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' aggregate='false'>";
    fetchXml += "<entity name='" + entityName + "'>";
    fetchXml += formattedColumns;
    fetchXml += formattedOrder;
    fetchXml += formattedConditions;
    fetchXml += "</filter>";
    fetchXml += "</entity>";
    fetchXml += "</fetch>";

    return fetchXml;
};

MCS.cvt_Common.DateTime = function (executionContext, attributeName, hour, minute) {
    var formContext = executionContext.getFormContext();
    var attribute = formContext.getAttribute(attributeName);
    if (attribute.getValue() == null) {
        attribute.setValue(new Date());
    }
    attribute.setValue(attribute.getValue().setHours(hour, minute, 0));
};

//Used for Specialty Subtype based off of Subtype
MCS.cvt_Common.EnableDependentLookup = function (executionContext, primaryLU, secondaryLU) {
    var formContext = executionContext.getFormContext();
    var primaryLUattribute = formContext.getAttribute(primaryLU);
    var primaryLUvalue = primaryLUattribute != null ? primaryLUattribute.getValue() : null;
    var primaryLUvalueproperty = primaryLUvalue != null ? primaryLUvalue[0].name : null;

    if (primaryLUvalueproperty != null) {
        formContext.getControl(secondaryLU).setVisible(true);
        formContext.getControl(secondaryLU).setFocus();
    }
    else {
        formContext.getControl(secondaryLU).setVisible(false);
        formContext.getAttribute(secondaryLU).setValue(null);
    }
};

MCS.cvt_Common.EnableOtherDetails = function (executionContext, source, target, value) {
    var formContext = executionContext.getFormContext();
    var targetFieldControl = formContext.ui.controls.get(target);
    var targetFieldObject = formContext.getAttribute(target);
    var sourceValue = formContext.getAttribute(source).getValue();
    if (sourceValue != null && sourceValue.toString() == value) {
        targetFieldControl.setDisabled(false);
        targetFieldControl.setVisible(true);
        targetFieldObject.setRequiredLevel("required");
        targetFieldObject.setSubmitMode("dirty");
    }
    else {
        if (targetFieldObject.getValue() != "") {
            targetFieldObject.setValue("");
            targetFieldObject.setSubmitMode("always");
        }
        targetFieldControl.setDisabled(true);
        targetFieldControl.setVisible(false);
        targetFieldObject.setRequiredLevel("none");
    }
};

//XML Fix - replace & with &amp;
MCS.cvt_Common.formatXML = function (str) {
    if (str) {
        str = str.replace(/&/g, "&amp;");
        return str;
    }
};

//Gets the EntityTypeCode / ObjectTypeCode of a entity
MCS.cvt_Common.getObjectTypeCode = function (entityName) {
    var lookupService = new parent.RemoteCommand("LookupService", "RetrieveTypeCode");
    lookupService.SetParameter("entityName", entityName);
    var result = lookupService.Execute();
    if (result.Success && typeof result.ReturnValue == "number") {
        return result.ReturnValue;
    } else {
        return null;
    }
};

//MCS.cvt_Common.JSDebugAlert = function (msg) {
//    Set showAlerts to false to stop showing Alerts
//    var showAlerts = false;

//    if (showAlerts == true) {
//        if (msg != null) {
//            alert("JS Debug Message: \n\n" + msg);
//        }
//    }
//};

MCS.cvt_Common.MVIConfig = function () {
    var deferred = $.Deferred();
    var returnData = {
        success: false,
        data: {}
    };
    var roles = "";
    var MVIConfig = false;
    var filter = "mcs_name eq 'Active Settings'";
    Xrm.WebApi.retrieveMultipleRecords("mcs_setting", "?$select=cvt_usemvi,cvt_mviroles&$filter=" + filter).then(
        function success(result) {
            if (result != null && result.entities.length != 0) {
                MVIConfig = result.entities[0].cvt_usemvi != null ? result.entities[0].cvt_usemvi : false;
                roles = result.entities[0].cvt_mviroles;
            }
            // var roleCheck = MCS.cvt_Common.userHasRoleInList(roles);
            var roleCheckretrieveTokenDeferred = MCS.cvt_Common.userHasRoleInList(roles);
            $.when(roleCheckretrieveTokenDeferred).done(function (returnData) {
                //return MVIConfig && roleCheck;
                var roleCheck = returnData.data.result;
                returnData.success = true;
                returnData.data.result = MVIConfig && roleCheck;
                deferred.resolve(returnData);
            },
                function (error) {
                    //return MVIConfig;
                    returnData.success = false;
                    deferred.resolve(returnData);

                }
            );

        }
    );
    return deferred.promise();
};


//UNSUPPORTED: Add Message to Notifications area
MCS.cvt_Common.Notifications = function (action, icon, message) {
    var notificationsList = Sys.Application.findComponent('crmNotifications');

    switch (action) {
        case "Add":
            if (notificationsList && icon && message)
                notificationsList.AddNotification('noteId1', icon, 'namespace', message);
            break;
        case "Hide":
            notificationsList.SetVisible(false);
            break;
    }
};

MCS.cvt_Common.openDialogOnCurrentRecord = function (primaryControl, dialogId) {
    var formContext = primaryControl.getFormContext();
    EntityName = formContext.data.entity.getEntityName();
    objectId = formContext.data.entity.getId();
    return MCS.cvt_Common.openDialogProcess(primaryControl, dialogId, EntityName, objectId);
};

MCS.cvt_Common.openDialogProcess = function (primaryControl, dialogId, EntityName, objectId) {
    var formContext = primaryControl.getFormContext();
    if (EntityName == null || EntityName == "")
        EntityName = formContext.data.entity.getEntityName();
    if (objectId == null || objectId == "")
        objectId = formContext.data.entity.getId();
    var globalContext = Xrm.Utility.getGlobalContext();
    var url = globalContext.getClientUrl() +
        //var url = Xrm.Page.context.getClientUrl() +
        "/cs/dialog/rundialog.aspx?DialogId=" +
        dialogId + "&EntityName=" +
        EntityName + "&ObjectId=" +
        objectId;
    var width = 400;
    var height = 400;
    var left = (screen.width - width) / 2;
    var top = (screen.height - height) / 2;
    return window.open(url, '', 'location=0,menubar=1,resizable=1,width=' + width + ',height=' + height + ',top=' + top + ',left=' + left + '');
};

MCS.cvt_Common.RestError = function (err) {
    return JSON.parse(err.responseText).error.message.value;
};

//From the Site, Set Facility
MCS.cvt_Common.SetFacilityFromSite = function (executionContext, siteFieldName, facilityFieldName) {
    var formContext = executionContext.getFormContext();
    var siteField = formContext.getAttribute(siteFieldName);
    var facilityField = formContext.getAttribute(facilityFieldName);
    var priorFacilityValue = facilityField.getValue() != null ? facilityField.getValue()[0].id : null;
    var siteValue = siteField.getValue() != null ? siteField.getValue()[0].id : null;

    if (siteValue != null) {
        //Get Parent Facility of Site

        Xrm.WebApi.retrieveRecord("mcs_site", siteValue, "?$select=mcs_FacilityId").then(
            function success(result) {
                if (result && result.mcs_FacilityId) {
                    //Check and Set Facility
                    var value = new Array();
                    value[0] = new Object();
                    value[0].id = '{' + result.mcs_FacilityId.Id + '}';
                    value[0].name = result.mcs_FacilityId.Name;
                    value[0].entityType = "mcs_facility";

                    //Set Facility field
                    facilityField.setValue(value);
                }
            },
            function (error) {
            }
        );

        //var calls = CrmRestKit.Retrieve("mcs_site", siteValue, ['mcs_FacilityId'], false);
        //calls.fail(
        //        function (error) {
        //        }).done(function (data) {
        //            if (data && data.d && data.d.mcs_FacilityId) {
        //                //Check and Set Facility
        //                var value = new Array();
        //                value[0] = new Object();
        //                value[0].id = '{' + data.d.mcs_FacilityId.Id + '}';
        //                value[0].name = data.d.mcs_FacilityId.Name;
        //                value[0].entityType = "mcs_facility";

        //                //Set Facility field
        //                facilityField.setValue(value);
        //            }
        //        });
    }
    else {
        //Clear Facility field
        facilityField.setValue(null);
    }
    if (MCS.cvt_Common.compareGUIDS(priorFacilityValue, ((facilityField.getValue() != null) ? facilityField.getValue()[0].id : null)) != true)
        facilityField.setSubmitMode("always");
};

MCS.cvt_Common.TrimBookendBrackets = function (stringVar) {
    if (stringVar != null && stringVar.length > 0)
        return stringVar.charAt(0) == '{' ? stringVar.slice(1, stringVar.length - 1) : stringVar;
    else
        return "";
};


if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
    if (jQuery.when.all === undefined) {
        jQuery.when.all = function (deferreds) {
            var deferred = new jQuery.Deferred();
            $.when.apply(jQuery, deferreds).then(
                function () {
                    deferred.resolve(Array.prototype.slice.call(arguments));
                },
                function () {
                    deferred.fail(Array.prototype.slice.call(arguments));
                });

            return deferred;
        }
    }
}

//Check if the passed in User has a particular role
MCS.cvt_Common.userHasRoleInList = function (roles) {
    var deferred = $.Deferred();
    var returnData = {
        success: false,
        data: {}
    };
    var userRoles = Xrm.Utility.getGlobalContext().userSettings.securityRoles;
    //var userRoles = Xrm.Page.context.getUserRoles();
    var hasRole = false;
    var deferreds = [];
    for (var i = 0; i < userRoles.length; i++) {
        if (hasRole) {
            return true;
        }
        var currentUserRole = userRoles[i];
        var localDeferred1 = getCurrentUserRole(roles, currentUserRole);

        deferreds.push(localDeferred1);

        //CrmRestKit.Retrieve('Role', userRoles[i], ['Name'], false).fail(
        //    function (err) {
        //        return;
        //    }).done(
        //    function (data) {
        //        if (data != null && data.d != null) {
        //            var roleName = data.d.Name.trim().toLowerCase();
        //            if (roles.toLowerCase().indexOf(roleName) != -1) {
        //                hasRole = true;
        //                return;
        //            }
        //        }
        //    });

    }
    if (typeof $.when.all === 'undefined')
        loadWhenAllDefinition()

    $.when.all(deferreds).then(function (objects) {
        console.log("Resolved objects:", objects);
        returnData.data.result = false;
        for (var i = 0; i < objects.length; i++) {
            if (objects[i].data.result)
                returnData.data.result = true
        }
        returnData.success = true;
        deferred.resolve(returnData)
    });

    //return hasRole;
    return deferred.promise();
};



getCurrentUserRole = function (roles, currentUserRole) {
    var localDeferred = $.Deferred();
    var returnData = {
        success: true,
        data: {}
    };
    Xrm.WebApi.retrieveRecord("Role", currentUserRole, "?$select=name").then(
        function success(result) {
            if (result != null) {
                var roleName = result.name.trim().toLowerCase();
                if (roles.toLowerCase().indexOf(roleName) != -1) {
                    hasRole = true;
                    //return;
                    // return hasRole;

                    returnData.success = true;
                    returnData.data.result = hasRole;

                }
                localDeferred.resolve(returnData);
            }
        },
        function (error) {
            returnData.success = false;
            localDeferred.resolve(returnData);

        }
    );
    return localDeferred.promise();
}


loadWhenAllDefinition = function () {
    if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
        if (jQuery.when.all === undefined) {
            jQuery.when.all = function (deferreds) {
                var deferred = new jQuery.Deferred();
                $.when.apply(jQuery, deferreds).then(
                    function () {
                        deferred.resolve(Array.prototype.slice.call(arguments));
                    },
                    function () {
                        deferred.fail(Array.prototype.slice.call(arguments));
                    });

                return deferred;
            }
        }
    }
}

/***********************************************************************
/** 
/** MCSGlbal Functions.js
/** Description: Global rules called by form level jscripts 
/** 
***********************************************************************/
//If the MCS namespace object is not defined, create it.
if (typeof (MCS) == "undefined") { MCS = { __namespace: true }; }
MCS.GlobalFunctions = {
    GetRequestObject: function () {
        if (window.XMLHttpRequest) {
            return new window.XMLHttpRequest;
        }
        else {
            try {
                return new ActiveXObject("MSXML2.XMLHTTP.3.0");
            }
            catch (ex) {
                return null;
            }
        }
    },
    GuidsAreEqual: function (guid1, guid2) {
        var isEqual = false;

        if (guid1 == null || guid2 == null) {
            isEqual = false;
        }
        else {
            isEqual = guid1.replace(/[{}]/g, "").toLowerCase() == guid2.replace(/[{}]/g, "").toLowerCase();
        }

        return isEqual;
    },

    getODataUTCDateFilter: function (date) {

        var monthString;
        var rawMonth = (date.getUTCMonth() + 1).toString();
        if (rawMonth.length == 1) {
            monthString = "0" + rawMonth;
        }
        else { monthString = rawMonth; }

        var dateString;
        var rawDate = date.getUTCDate().toString();
        if (rawDate.length == 1) {
            dateString = "0" + rawDate;
        }
        else { dateString = rawDate; }


        var DateFilter = "datetime\'";
        DateFilter += date.getUTCFullYear() + "-";
        DateFilter += monthString + "-";
        //DateFilter += "07-";
        DateFilter += dateString;
        DateFilter += "T";
        var temp = date.getUTCHours();
        if (temp.toString().length == 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + ":";

        temp = date.getUTCMinutes();
        if (temp.toString().length == 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + ":";

        temp = date.getUTCSeconds();
        if (temp.toString().length == 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + "\'";

        //
        //         DateFilter += date.getUTCSeconds() + ":";
        //         DateFilter += date.getUTCMilliseconds();
        //         DateFilter += "Z\'";
        return DateFilter;
    },
    getAuthenticationHeader: function () {
        var authenticationHeader = Xrm.Page.context.getAuthenticationHeader();

    },
    _getClientUrl: function (urlType) {

        var orgServicePath = "/xrmservices/2011/organization.svc/web";

        if (urlType == "ODATA") {
            orgServicePath = "/xrmservices/2011/organizationdata.svc";
        }
        var serverUrl = "";
        if (typeof GetGlobalContext == "function") {
            var context = GetGlobalContext();
            serverUrl = context.getClientUrl();
        }
        else {
            if (typeof Xrm.Page.context == "object") {
                serverUrl = Xrm.Page.context.getClientUrl();
            }
            else { throw new Error("Unable to access the server URL"); }
        }
        if (serverUrl.match(/\/$/)) {
            serverUrl = serverUrl.substring(0, serverUrl.length - 1);
        }
        return serverUrl + orgServicePath;
    },

    runWorkflow: function (objectId, workflowId, runResponse) {
        var request = "<Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        request += "<request i:type=\"b:ExecuteWorkflowRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">";
        request += "<a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";
        request += "<a:KeyValuePairOfstringanyType>";
        request += "<c:key>EntityId</c:key>";
        request += "<c:value i:type=\"d:guid\" xmlns:d=\"http://schemas.microsoft.com/2003/10/Serialization/\">" + objectId + "</c:value>";
        request += "</a:KeyValuePairOfstringanyType>";
        request += "<a:KeyValuePairOfstringanyType>";
        request += "<c:key>WorkflowId</c:key>";
        request += "<c:value i:type=\"d:guid\" xmlns:d=\"http://schemas.microsoft.com/2003/10/Serialization/\">" + workflowId + "</c:value>";
        request += "</a:KeyValuePairOfstringanyType>";
        request += "</a:Parameters>";
        request += "<a:RequestId i:nil=\"true\" />";
        request += "<a:RequestName>ExecuteWorkflow</a:RequestName>";
        request += "</request>";
        request += "</Execute>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP"), true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.RunWorkflow);
        req.onreadystatechange = function () { runResponse(req); };
        req.send(request);

    },
    runWorkflowResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            return "OK";
        });
    },
    createSOAPRequest: function (type, attributes, createResponse) {
        var request = "<Create xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">";
        request += "<entity xmlns:b=\"http://schemas.microsoft.com/xrm/2011/Contracts\"";
        request += " xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        request += this._getAttributeWrapper(attributes);
        request += "<b:EntityState i:nil=\"true\"/>";
        request += "<b:FormattedValues xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"/>";
        request += "<b:Id>00000000-0000-0000-0000-000000000000</b:Id>";
        request += "<b:LogicalName>" + type + "</b:LogicalName>";
        request += "<b:RelatedEntities xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"/>";
        request += "</entity>";
        request += "</Create>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP"), true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.Create);
        req.onreadystatechange = function () { createResponse.parseResponse(req); };
        req.send(request);

    }, createResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            return responseXML.selectSingleNode("//CreateResult").text;
        });
    },
    retrieveRequest: function (type, id, columnSet, retrieveResponse) {

        var request = "<Retrieve xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">";
        request += "<entityName>" + type + "</entityName>";
        request += "<id>" + id + "</id>";
        request += MCS.GlobalFunctions._getColumnSet(columnSet);
        request += "</Retrieve>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP") + "/web", true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.Retrieve);
        req.onreadystatechange = function () { retrieveResponse._parseResponse(req); };
        req.send(request);

    },
    retrieveResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            var attributesData = responseXML.selectNodes("//a:KeyValuePairOfstringanyType")
            var entityInstance = {};
            for (var i = 0; i < attributesData.length; i++) {

                var attributeName = attributesData[i].selectSingleNode("b:key").text;
                var attributeType = attributesData[i].selectSingleNode("b:value").attributes.getNamedItem("i:type").text;
                var attributeValue = attributesData[i].selectSingleNode("b:value");
                switch (attributeType) {
                    case "c:guid":
                    case "c:string":
                        entityInstance[attributeName] = attributeValue.text;
                        break;
                    case "a:EntityReference":
                        var value = {};
                        value.Id = attributeValue.selectSingleNode("a:Id").text;
                        value.LogicalName = attributeValue.selectSingleNode("a:LogicalName").text;
                        value.Name = attributeValue.selectSingleNode("a:Name").text;
                        entityInstance[attributeName] = value;
                        break;
                    default:
                        throw new Error("Parsing " + attributeType + " attributes not Implemented.");
                        break;
                }

            }

            return entityInstance;


        });
    },
    updateRequest: function () { },
    updateResponse: function () { },
    deleteRequest: function () { },
    deleteResponse: function () { },
    _getSOAPWrapper: function (request) {
        var SOAP = "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>";
        SOAP += request;
        SOAP += "</s:Body></s:Envelope>";
        return SOAP;
    },
    _getAttributeWrapper: function (attributes) {
        var attributesString = "<b:Attributes xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";

        for (var i = 0; i < attributes.length; i++) {

            var attribute = "<b:KeyValuePairOfstringanyType>";
            attribute += "<c:key>" + attributes[i].name + "</c:key>";

            switch (attributes[i].type) {

                case "string":
                    attribute += "<c:value i:type=\"d:" + attributes[i].type + "\" ";
                    attribute += " xmlns:d=\"http://www.w3.org/2001/XMLSchema\">" + attributes[i].value + "</c:value>";
                    break;
                case "EntityReference":
                    attribute += "<c:value i:type=\"b:EntityReference\">";
                    attribute += "<b:Id>" + attributes[i].value.Id + "</b:Id>";
                    attribute += "<b:LogicalName>" + attributes[i].value.LogicalName + "</b:LogicalName>";
                    if (attributes[i].value.Name == null) { attribute += "<b:Name i:nil=\"true\"/>"; }
                    else { attribute += "<b:Name>" + attributes[i].value.Name + "</b:Name>"; }
                    attribute += "</c:value>";
                    break;
            }




            attribute += "</b:KeyValuePairOfstringanyType>"
            attributesString += attribute;

        }
        attributesString += "</b:Attributes>";

        return attributesString;

    },
    columnSet: function (columns) {
        if (columns == null) {
            return { allColumns: false, columns: [] };
        }
        else {
            var errorMessage = "The columns parameter must be a comma separated list of strings or an array of strings.";
            var arrColumns = [];
            switch (typeof columns) {
                case "string":
                    arrColumns = columns.split(",");
                    break;
                case "object":
                    if (columns instanceof Array) {
                        var stringArray = true;
                        for (var i = 0; i < columns.length; i++) {
                            if (typeof columns[i] != "string") {
                                stringArray = false;
                                break;
                            }
                        }
                        if (stringArray) { arrColumns = columns; }
                        else { throw new Error(errorMessage); }
                    }
                    else { throw new Error(errorMessage); }
                    break;
                default:
                    throw new Error(errorMessage);
                    break;
            }
            return { allColumns: false, columns: arrColumns };
        }
    },
    _getColumnSet: function (columnSet) {

        var col = "<columnSet xmlns:b=\"http://schemas.microsoft.com/xrm/2011/Contracts\"";
        col += " xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        if (columnSet.allColumns == true) { col += "<b:AllColumns>true</b:AllColumns>"; }
        else {
            col += "<b:AllColumns>false</b:AllColumns>";
            col += "<b:Columns xmlns:c=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">";
            for (var i = 0; i < columnSet.columns.length; i++) {
                col += "<c:string>" + columnSet.columns[i] + "</c:string>";
            }
            col += "</b:Columns>";
        }

        col += "</columnSet>";

        return col;

    },
    _Action: {
        Execute: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute",
        Create: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Create",
        Retrieve: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Retrieve",
        Update: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Update",
        Delete: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Delete",
        RunWorkflow: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute"
    },
    _getError: function (faultXml) {
        var errorMessage = "Unknown Error (Unable to parse the fault)";
        if (typeof faultXml == "object") {
            try {
                var bodyNode = faultXml.firstChild.firstChild;
                //Retrieve the fault node
                for (var i = 0; i < bodyNode.childNodes.length; i++) {
                    var node = bodyNode.childNodes[i];

                    //NOTE: This comparison does not handle the case where the XML namespace changes
                    if ("s:Fault" == node.nodeName) {
                        for (var j = 0; j < node.childNodes.length; j++) {
                            var faultStringNode = node.childNodes[j];
                            if ("faultstring" == faultStringNode.nodeName) {
                                errorMessage = faultStringNode.text;
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            catch (e) { };
        }

        return new Error(errorMessage);

    },
    _response: function (successStatus, parseData) {
        return {
            _state: "sent",
            _data: null,
            _error: null,
            _parseData: parseData,
            onComplete: null,
            _parseResponse: function (req) {

                if (req.readyState == 4) {
                    this._state = "recieved";
                    if (req.status == successStatus) {
                        this._data = parseData(req.responseXML);
                        this._state = "complete";
                        if (this.onComplete != null) {
                            this.onComplete();
                        }
                    }
                    else {
                        this._state = "error";
                        this._error = new MCS.GlobalFunctions._getError(req.responseXML);
                        if (this.onComplete != null) {
                            this.onComplete();
                        }
                    }
                }

            },
            getError: function () {
                if (this._error != null) { return this._error; }
                else { throw new Error("No error exists."); }
            },
            getState: function () { return this._state; },
            getData: function () {
                if (this._state == "complete") {
                    return this._data;
                }
                else { throw new Error("Data is not ready yet."); }
            }
        };
    },

    createRestRecord: function (recordToCreate, callback, recordType) {
        var jsonRecord = window.JSON.stringify(recordToCreate);

        var createReq = new XMLHttpRequest();
        createReq.open("POST", this._getClientUrl("ODATA") + "/" + recordType, true);
        createReq.setRequestHeader("Accept", "application/json");
        createReq.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        createReq.onreadystatechange = function () {
            MCS.GlobalFunctions.createRestReqCallBack(this, callback);
        };
        createReq.send(jsonRecord);

    },
    createRestReqCallBack: function (createReq, callback) {
        if (createReq.readyState == 4 /* complete */) {
            if (createReq.status == 201) {
                //Success
                var newRecord = JSON.parse(createReq.responseText).d;
                callback(newRecord);
            }
            else {
                //Failure
                MCS.GlobalFunctions.errorHandler(createReq);
            }
        }
    },


    RetrieveRecords: function (filter, callback) {
        /// <summary>
        /// Initiates an asynchronous request to retrieve records.
        /// If there are additional pages of records the SDK.RestEndpointPaging.RetrieveRecordsCallBack function will
        /// call this function.
        /// </summary>
        var retrieveRecordsReq = new XMLHttpRequest();
        retrieveRecordsReq.open("GET", this._getClientUrl("ODATA") + filter, true);
        retrieveRecordsReq.setRequestHeader("Accept", "application/json");
        retrieveRecordsReq.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        retrieveRecordsReq.onreadystatechange = function () {
            /// <summary>
            /// This event handler passes the callback through
            /// </summary>
            MCS.GlobalFunctions.RetrieveRecordsCallBack(this, callback);
        };
        retrieveRecordsReq.send();

    },
    dateReviver: function (key, value) {
        var a;
        if (typeof value === 'string') {
            a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
            if (a) {
                return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));
            }
        }
        return value;
    },
    RetrieveRecordsCallBack: function (retrieveRecordsReq, callback) {
        /// <summary>
        /// Handles the onreadystatechange event to process the records returned.
        /// If more pages are available this function will call the SDK.RestEndpointPaging.RetrieveRecords 
        /// function to get the rest.
        /// </summary>
        if (retrieveRecordsReq.readyState == 4 /* complete */) {
            if (retrieveRecordsReq.status == 200) {
                //Success
                var retrievedRecords = JSON.parse(retrieveRecordsReq.responseText, MCS.GlobalFunctions.dateReviver).d;
                /// The callback is called with the results.
                callback(retrievedRecords.results);

                if (null != retrievedRecords.__next) {
                    // The existance of the '__next' property indicates that more records are available
                    // So the originating function is called again using the filter value returned
                    var filter = retrievedRecords.__next.replace(MCS.GlobalFunctions.GetODataPath(), "");
                    MCS.GlobalFunctions.RetrieveRecords(filter, callback);
                }


            }
            else {
                //Failure
                MCS.GlobalFunctions.errorHandler(retrieveRecordsReq);

            }
        }
    },
    //Function to handle any http errors
    errorHandler: function (XmlHttpRequest) {
        /// <summary>
        /// Simply displays an alert message with details about any errors.
        /// </summary>
        if (XmlHttpRequest) {
            if (XmlHttpRequest.status != null) {
                if (XMLHttpRequest.statusText != null) {
                    alert("Error : " +
                        XmlHttpRequest.status + ": " +
                        XmlHttpRequest.statusText + ": " +
                        JSON.parse(XmlHttpRequest.responseText).error.message.value);
                }
                else {
                    alert(XMLHttpRequest);
                }
            }
            else {
                alert(XMLHttpRequest);
            }
        }
        else {
            alert("Unknown error occurred");
        }
    },

    __namespace: true
};
//If the SDK namespace object is not defined, create it.
if (typeof (MCS) == "undefined") { MCS = {}; }
// Create Namespace container for functions in this library;
MCS.mcs_Provider_Resource = {};

//Namespace Variables
MCS.mcs_Provider_Resource.relatedProviderSiteId;
MCS.mcs_Provider_Resource.relatedProviderSiteName;
MCS.mcs_Provider_Resource.EntityId;
MCS.mcs_Provider_Resource.EntityName;
MCS.mcs_Provider_Resource.TSAName;
MCS.mcs_Provider_Resource.MTSAName;

//Opens a window for a new Resource Group record using the Information form.
//Example: openNewmcs_resourcegroup("{undefined}","",true,true,"");
MCS.mcs_Provider_Resource.openNewmcs_resourcegroup = function (mcs_relatedsiteid, mcs_relatedsiteidname, mcs_createproviderrg, mcs_createpatientrg) { //, mcs_tsaguid, cvt_mastertsaguid) {
    if ((typeof Xrm != "undefined") && (typeof Xrm.Utility != "undefined")) {
        var p = {};
        p.mcs_relatedsiteid = mcs_relatedsiteid;
        p.mcs_relatedsiteidname = mcs_relatedsiteidname;
        p.mcs_createproviderrg = mcs_createproviderrg;
        p.mcs_createpatientrg = mcs_createpatientrg;
        // p.mcs_tsaguid = mcs_tsaguid;
        // p.cvt_mastertsaguid = cvt_mastertsaguid;

        Xrm.Navigation.openForm("mcs_resourcegroup", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["mcs_relatedsiteid=" + mcs_relatedsiteid,
        "mcs_relatedsiteidname=" + mcs_relatedsiteidname,
        "mcs_createproviderrg=" + mcs_createproviderrg,
        "mcs_createpatientrg=" + mcs_createpatientrg]
        //"mcs_tsaguid=" + mcs_tsaguid,
        //"cvt_mastertsaguid=" + cvt_mastertsaguid]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();

        window.open(url + "/main.aspx?etn=mcs_resourcegroup&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Opens a window for a new Resource record using the Information form.
//Example: openNewmcs_resource("{undefined}","","",true,true);
MCS.mcs_Provider_Resource.openNewmcs_resource = function (mcs_relatedsiteid, mcs_relatedsiteidname, mcs_tsaguid, cvt_mastertsaguid, mcs_createpatientr, mcs_createproviderr) {
    if ((typeof Xrm != "undefined") && (typeof Xrm.Utility != "undefined")) {
        var p = {};
        p.mcs_relatedsiteid = mcs_relatedsiteid;
        p.mcs_relatedsiteidname = mcs_relatedsiteidname;
        p.mcs_createpatientr = mcs_createpatientr;
        p.mcs_createproviderr = mcs_createproviderr;
        //p.mcs_tsaguid = mcs_tsaguid;
        //p.cvt_mastertsaguid = cvt_mastertsaguid;
        Xrm.Navigation.openForm("mcs_resource", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["mcs_relatedsiteid=" + mcs_relatedsiteid,
        "mcs_relatedsiteidname=" + mcs_relatedsiteidname,
        "mcs_createpatientr=" + mcs_createpatientr,
        "mcs_createproviderr=" + mcs_createproviderr]
        //"mcs_tsaguid=" + mcs_tsaguid,
        //"cvt_mastertsaguid=" + cvt_mastertsaguid]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();

        window.open(url + "/main.aspx?etn=mcs_resource&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Opens a window for a new Provider Resource record using the Information form.
//Example: openNewcvt_providerresourcegroup("{undefined}","","{undefined}","","{undefined}","",0);
MCS.mcs_Provider_Resource.openNewcvt_providerresourcegroup = function (cvt_relatedsiteid, cvt_relatedsiteidname, cvt_relatedmastertsaid, cvt_relatedmastertsaidname, cvt_relatedtsaid, cvt_relatedtsaidname, cvt_capacityrequired) {
    if (typeof (MCS.mcs_TSA_OnLoad) != "undefined")
        EntityName = MCS.mcs_TSA_OnLoad.EntityName;
    else if (typeof (MCS.cvt_MTSA_OnLoad) != "undefined")
        EntityName = MCS.cvt_MTSA_OnLoad.EntityName;
    else if (typeof (window.parent.MCS) != "undefined") {
        if (typeof (window.parent.MCS.mcs_TSA_OnLoad) != "undefined")
            EntityName = window.parent.MCS.mcs_TSA_OnLoad.EntityName;
        else if (typeof (window.parent.MCS.cvt_MTSA_OnLoad) != "undefined")
            EntityName = window.parent.MCS.cvt_MTSA_OnLoad.EntityName;
    }
    if ((typeof Xrm != "undefined") && (typeof Xrm.Utility != "undefined")) {
        //Checking which entity this is running on to determine the parameters to pass through. 
        var p = {};
        p.cvt_relatedsiteid = cvt_relatedsiteid;
        p.cvt_relatedsiteidname = cvt_relatedsiteidname;
        /*  Master TSA deprecated
        if (EntityName == "cvt_mastertsa") {
            p.cvt_relatedmastertsaid = cvt_relatedmastertsaid;
            p.cvt_relatedmastertsaidname = cvt_relatedmastertsaidname;
        }*/
        /* TSA Deprecated
        if (EntityName == "mcs_services") {
            p.cvt_relatedtsaid = cvt_relatedtsaid;
            p.cvt_relatedtsaidname = cvt_relatedtsaidname;
        }
        */
        p.cvt_capacityrequired = cvt_capacityrequired;
        Xrm.Navigation.openForm("cvt_providerresourcegroup", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";

        var extraqs = [];
        /* MTSA & TSA Deprecated
        if (EntityName == "cvt_mastertsa") {
            extraqs = ["cvt_relatedsiteid=" + cvt_relatedsiteid,
            "cvt_relatedsiteidname=" + cvt_relatedsiteidname,
            "cvt_relatedmastertsaid=" + cvt_relatedmastertsaid,
            "cvt_relatedmastertsaidname=" + cvt_relatedmastertsaidname,
            "cvt_capacityrequired=" + cvt_capacityrequired];
        }
        if (EntityName == "mcs_services") {
            extraqs = ["cvt_relatedsiteid=" + cvt_relatedsiteid,
            "cvt_relatedsiteidname=" + cvt_relatedsiteidname,
            "cvt_relatedtsaid=" + cvt_relatedtsaid,
            "cvt_relatedtsaidname=" + cvt_relatedtsaidname,
            "cvt_capacityrequired=" + cvt_capacityrequired];
        }
        */
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();

        window.open(url + "/main.aspx?etn=cvt_providerresourcegroup&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Same button, 2 places.  Depending on the place we want to pass the ID differently
MCS.mcs_Provider_Resource.QuickCreateProviderResourceGroup = function () {
    MCS.mcs_Provider_Resource.gatherParameters();
    //TSA
    if (MCS.mcs_Provider_Resource.EntityName == "mcs_services")
        MCS.mcs_Provider_Resource.openNewmcs_resourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, true, false, MCS.mcs_Provider_Resource.EntityId, null);

    //MTSA
    else
        MCS.mcs_Provider_Resource.openNewmcs_resourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, true, false, null, MCS.mcs_Provider_Resource.EntityId);
};

//Same button, 2 places.  Depending on the place we want to pass the ID differently
MCS.mcs_Provider_Resource.QuickCreateProviderResource = function () {
    MCS.mcs_Provider_Resource.gatherParameters();
    //TSA
    if (MCS.mcs_Provider_Resource.EntityName == "mcs_services")
        MCS.mcs_Provider_Resource.openNewmcs_resource(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, MCS.mcs_Provider_Resource.EntityId, null, false, true);
    //MTSA
    else
        MCS.mcs_Provider_Resource.openNewmcs_resource(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, null, MCS.mcs_Provider_Resource.EntityId, false, true);
};

//Same button, 2 places.  Depending on the place we want to pass the ID differently
MCS.mcs_Provider_Resource.AddProviderResource = function () {
    MCS.mcs_Provider_Resource.gatherParameters();
    //TSA
    if (MCS.mcs_Provider_Resource.EntityName == "mcs_services")
        MCS.mcs_Provider_Resource.openNewcvt_providerresourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, null, null, MCS.mcs_Provider_Resource.EntityId, MCS.mcs_Provider_Resource.TSAName, 1);

    else
        MCS.mcs_Provider_Resource.openNewcvt_providerresourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, MCS.mcs_Provider_Resource.EntityId, MCS.mcs_Provider_Resource.MTSAName, null, null, 1);
};

MCS.mcs_Provider_Resource.gatherParameters = function () {
    //Set the right depth to get the variables
    if (typeof (MCS.cvt_Common) == "undefined")
        MCS = window.parent.MCS;
    //Determine if TSA/MTSA, variable names are different
    if (typeof (MCS.mcs_TSA_OnLoad) != "undefined") {
        //TSA
        MCS.mcs_Provider_Resource.relatedProviderSiteId = MCS.mcs_TSA_OnLoad.relatedProviderSiteId;
        MCS.mcs_Provider_Resource.relatedProviderSiteName = MCS.mcs_TSA_OnLoad.relatedProviderSiteName;
        MCS.mcs_Provider_Resource.EntityId = MCS.mcs_TSA_OnLoad.EntityId;
        MCS.mcs_Provider_Resource.EntityName = MCS.mcs_TSA_OnLoad.EntityName;
        MCS.mcs_Provider_Resource.TSAName = MCS.mcs_TSA_OnLoad.TSAName;
    }
    else { //MTSA
        MCS.mcs_Provider_Resource.relatedProviderSiteId = MCS.cvt_MTSA_OnLoad.relatedProviderSiteId;
        MCS.mcs_Provider_Resource.relatedProviderSiteName = MCS.cvt_MTSA_OnLoad.relatedProviderSiteName;
        MCS.mcs_Provider_Resource.EntityId = MCS.cvt_MTSA_OnLoad.EntityId;
        MCS.mcs_Provider_Resource.EntityName = MCS.cvt_MTSA_OnLoad.EntityName;
        MCS.mcs_Provider_Resource.MTSAName = MCS.cvt_MTSA_OnLoad.MTSAName;
    }
};
//If the SDK namespace object is not defined, create it.
if (typeof (MCS) == "undefined") { MCS = {}; }
// Create Namespace container for functions in this library;
MCS.cvt_MTSA_OnChange = {};

//VA Video Connect
MCS.cvt_MTSA_OnChange.Type = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var Type = (formContext.getAttribute("cvt_type").getValue()) ? formContext.getAttribute("cvt_type").getValue() : false;

    if (Type == false) { //Clinic Based
        if (formContext.ui.getFormType() == MCS.cvt_Common.FORM_TYPE_CREATE) {
            //formContext.getControl("cvt_capacity").setDisabled(false);
            formContext.getControl("cvt_availabletelehealthmodalities").setDisabled(false);
        }
    }
    else { //true //CVT to Home
        if (formContext.ui.getFormType() == MCS.cvt_Common.FORM_TYPE_CREATE) {
            formContext.getAttribute("cvt_availabletelehealthmodalities").setValue(917290000);
            formContext.getAttribute("cvt_availabletelehealthmodalities").setSubmitMode("always");
            formContext.getAttribute("cvt_availabletelehealthmodalities").fireOnChange(); //Make sure the form displays the correct fields
        }

        formContext.getControl("cvt_groupappointment").setVisible(true);
        formContext.getControl("cvt_groupappointment").setDisabled(false);
        formContext.getControl("cvt_availabletelehealthmodalities").setDisabled(true);
    }
};
//Store Forward
MCS.cvt_MTSA_OnChange.StoreForward = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Check if this TSA is store forward
    var SFT = formContext.getAttribute("cvt_availabletelehealthmodalities").getValue() == 917290001;
    formContext.getControl("cvt_groupappointment").setVisible(!SFT);
    if (SFT) {
        if (formContext.getAttribute("cvt_servicelevels").getValue() == null)
            formContext.getAttribute("cvt_servicelevels").setValue(917290000);
    }
};
//If the SDK namespace object is not defined, create it.
if (typeof (MCS) == "undefined") { MCS = {}; }
// Create Namespace container for functions in this library;
MCS.cvt_MTSA_OnLoad = {};

//Page space variables
MCS.cvt_MTSA_OnLoad.EntityId = null;
MCS.cvt_MTSA_OnLoad.EntityName = null;
MCS.cvt_MTSA_OnLoad.relatedProviderSiteName = null;
MCS.cvt_MTSA_OnLoad.relatedProviderSiteId = null;
MCS.cvt_MTSA_OnLoad.GroupAppt = false;

//OnLoad
MCS.cvt_MTSA_OnLoad.SetDefaults = function (executionContext) {
    var formContext = executionContext.getFormContext();
    formContext.getControl("cvt_type").setDisabled(false);

    if (formContext.ui.getFormType() == MCS.cvt_Common.FORM_TYPE_CREATE) {
        alert('The Master TSA functionality is obselete and the new record creation is not available.');
        formContext.ui.close();
    }
    else {
        formContext.ui.setFormNotification('Note: The Master TSA functionality is obselete. Please use Telehealth Administration >> Scheduling Package instead.', 'WARNING', '123');
        //If not Create
        //Read Only Fields
        formContext.getControl("cvt_relatedsiteid").setDisabled(true);
        formContext.getControl("cvt_servicetype").setDisabled(true);
        formContext.getControl("cvt_servicesubtype").setDisabled(true);
        formContext.getControl("cvt_groupappointment").setDisabled(true);
        formContext.getControl("cvt_availabletelehealthmodalities").setDisabled(true);
        formContext.getControl("cvt_type").setDisabled(true);
        //Conditional because of potentially missing data.
        if (formContext.getAttribute("cvt_providerlocationtype").getValue() != null) {
            formContext.getControl("cvt_providerlocationtype").setDisabled(true);
        }
        else {
            formContext.getControl("cvt_providerlocationtype").setDisabled(false);
        }

        MCS.cvt_MTSA_OnLoad.SOS(executionContext);

        //Load Operations Guide
        var filter = "mcs_name eq 'Active Settings'";
        calls = CrmRestKit.ByQuery("mcs_setting", ['cvt_telehealthoperationsmanual'], filter, false);
        calls.fail(function (err) {
        }).done(function (data) {
            if (data && data.d && data.d.results != null && data.d.results.length != 0) {
                var url = data.d.results[0].cvt_telehealthoperationsmanual != null ? data.d.results[0].cvt_telehealthoperationsmanual : null;
                if (url != null)
                    formContext.getAttribute("cvt_telehealthoperationsmanual").setValue(url);
            }
        });
    }
    //Field manipulation - These are all called by specific field OnChange
    if (formContext.getAttribute("cvt_servicesubtype").getValue() != null)
        MCS.cvt_Common.EnableDependentLookup("cvt_servicetype", "cvt_servicesubtype");

    MCS.cvt_MTSA_OnLoad.EntityId = formContext.data.entity.getId();
    MCS.cvt_MTSA_OnLoad.EntityName = formContext.data.entity.getEntityName();
    if (formContext.getAttribute("cvt_relatedsiteid").getValue() != null) {
        MCS.cvt_MTSA_OnLoad.relatedProviderSiteName = formContext.getAttribute("cvt_relatedsiteid").getValue()[0].name;
        MCS.cvt_MTSA_OnLoad.relatedProviderSiteId = formContext.getAttribute("cvt_relatedsiteid").getValue()[0].id;
    }
    MCS.cvt_MTSA_OnLoad.GroupAppt = formContext.getAttribute("cvt_groupappointment").getValue();
};

MCS.cvt_MTSA_OnLoad.SOS = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Make the SOS field visible and get the url
    if (formContext.getAttribute("cvt_servicetype").getValue() != null) {
        Xrm.WebApi.retrieveRecord("mcs_servicetype", formContext.getAttribute("cvt_servicetype").getValue()[0].id, "?$select=cvt_specialtyoperationssupplement").then(
            function success(result) {
                saRecord = result;
                if (result.cvt_specialtyoperationssupplement != null && result.cvt_specialtyoperationssupplement != undefined) {
                    formContext.getControl("cvt_specialtyoperationssupplement").setVisible(true);
                    formContext.getAttribute("cvt_specialtyoperationssupplement").setValue(result.cvt_specialtyoperationssupplement);
                }
            }
        );
    }
};
//If the SDK namespace object is not defined, create it.
if (typeof (MCS) == "undefined") { MCS = {}; }
// Create Namespace container for functions in this library;
MCS.cvt_MTSA_OnSave = {};

MCS.cvt_MTSA_OnSave.CreateName = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var cvt_servicetype = formContext.getAttribute("cvt_servicetype").getValue();
    var cvt_servicesubtype = formContext.getAttribute("cvt_servicesubtype").getValue();
    var cvt_relatedsiteid = formContext.getAttribute("cvt_relatedsiteid").getValue();
    var cvt_type = formContext.getAttribute("cvt_type").getValue();
    var cvt_groupappointment = formContext.getAttribute("cvt_groupappointment").getValue();;

    var derivedResultField = "";

    if (cvt_servicetype != null) {
        derivedResultField += cvt_servicetype[0].name;
    }

    if (cvt_servicesubtype != null) {
        derivedResultField += " : ";
        derivedResultField += cvt_servicesubtype[0].name;
    }

    derivedResultField += " @ ";

    if (cvt_relatedsiteid != null) {
        derivedResultField += cvt_relatedsiteid[0].name;
    }
    ////Group
    if (cvt_groupappointment == true) {
    } else {
        //CVT to home
        if (cvt_type == true) {
            derivedResultField += " to VA Video Connect";
        }
    }
    if (formContext.getAttribute("cvt_name").getValue() != derivedResultField) {
        formContext.getAttribute("cvt_name").setSubmitMode("always");
        formContext.getAttribute("cvt_name").setValue(derivedResultField);
    }
};