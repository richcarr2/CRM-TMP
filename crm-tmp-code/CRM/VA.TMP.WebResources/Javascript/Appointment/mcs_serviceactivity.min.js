// JavaScript source code
////if (!this.JSON) { this.JSON = {}; } (function () { function f(n) { return n < 10 ? '0' + n : n; } if (typeof Date.prototype.toJSON !== 'function') { Date.prototype.toJSON = function (key) { return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null; }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf(); }; } var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); }) + '"' : '"' + string + '"'; } function str(key, holder) { var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key); } if (typeof rep === 'function') { value = rep.call(holder, key, value); } switch (typeof value) { case 'string': return quote(value); case 'number': return isFinite(value) ? String(value) : 'null'; case 'boolean': case 'null': return String(value); case 'object': if (!value) { return 'null'; } gap += indent; partial = []; if (Object.prototype.toString.apply(value) === '[object Array]') { length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null'; } v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v; } if (rep && typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { k = rep[i]; if (typeof k === 'string') { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } else { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v); } } } } v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v; } } if (typeof JSON.stringify !== 'function') { JSON.stringify = function (value, replacer, space) { var i; gap = ''; indent = ''; if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' '; } } else if (typeof space === 'string') { indent = space; } rep = replacer; if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) { throw new Error('JSON.stringify'); } return str('', { '': value }); }; } if (typeof JSON.parse !== 'function') { JSON.parse = function (text, reviver) { var j; function walk(holder, key) { var k, v, value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v; } else { delete value[k]; } } } } return reviver.call(holder, key, value); } text = String(text); cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4); }); } if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j; } throw new SyntaxError('JSON.parse'); }; } }());
/////*globales Xrm, $ */

///////
/////// AlfaPeople CRM 2011 CrmRestKit
///////
/////// Based on 'MSCRM4 Web Service Toolkit for JavaScript v2.1' (http://crmtoolkit.codeplex.com/releases/view/48329)
/////// and XrmSvcTookit 'http://xrmsvctoolkit.codeplex.com/
///////

/////// Credits:
///////     Daniel Cai (getClientUrl, associate, disassociate)
///////     Matt (https://www.codeplex.com/site/users/view/MattMatt)
///////
/////// @author:
///////     Daniel Rene Thul, drt@alfapeople.com
///////
/////// @version:
///////     2.6.1
///////
/////// requires (jquery.1.7.2.js, JSON2.js)
///////
////var CrmRestKit = (function (window, document, undefined) {
////	//'use strict';

////	///
////	/// Private members
////	///
////	var ODATA_ENDPOINT = "/XRMServices/2011/OrganizationData.svc",
////		version = '2.6.0';

////	///
////	/// Private function to the context object.
////	///
////	function getContext() {

////		if (typeof GetGlobalContext !== "undefined") {
////			/*ignore jslint start*/
////			return GetGlobalContext();
////			/*ignore jslint end*/

////		}
////		else {

////			if (typeof Xrm !== "undefined") {
////				return Xrm.Page.context;
////			}
////			else {

////				throw new Error("Context is not available.");
////			}
////		}
////	}

////	///
////	/// Private function to return the server URL from the context
////	///
////	function getClientUrl() {

////		var url = null,
////			localServerUrl = window.location.protocol + "//" + window.location.host,
////			context = getContext();


////		if (Xrm.Page.context.getClientUrl !== undefined) {
////			// since version SDK 5.0.13 
////			// http://www.magnetismsolutions.com/blog/gayan-pereras-blog/2013/01/07/crm-2011-polaris-new-xrm.page-method

////			url = Xrm.Page.context.getClientUrl();
////		}
////		else if (context.isOutlookClient() && !context.isOutlookOnline()) {
////			url = localServerUrl;
////		}
////		else {
////			url = context.getClientUrl();
////			url = url.replace(/^(http|https):\/\/([_a-zA-Z0-9\-\.]+)(:([0-9]{1,5}))?/, localServerUrl);
////			url = url.replace(/\/$/, "");
////		}
////		return url;
////	}

////	///
////	/// Private function to return the path to the REST endpoint.
////	///
////	function getODataPath() {

////		return getClientUrl() + ODATA_ENDPOINT;
////	}

////	///
////	/// Returns an object that reprensts a entity-reference 
////	///
////	function entityReferenceFactory(id, opt_logicalName) {

////		var reference = null;

////		if (id !== undefined && id !== null) {

////			reference = {
////				__metadata: { type: "Microsoft.Crm.Sdk.Data.Services.EntityReference" },
////				Id: id
////			};

////			if (opt_logicalName !== undefined && opt_logicalName !== null) {

////				reference.LogicalName = opt_logicalName;
////			}
////		}

////		return reference;
////	}

////	///
////	/// Returns an object that reprensts a option-set-value 
////	///
////	function optionSetValueFactory(option_value) {

////		return {
////			__metadata: { type: 'Microsoft.Crm.Sdk.Data.Services.OptionSetValue' },
////			Value: option_value
////		};
////	}

////	///
////	/// Returns an object that represents an money value
////	///
////	function moneyValueFactory(value) {

////		return {
////			__metadata: { type: 'Microsoft.Crm.Sdk.Data.Services.Money' },
////			Value: value
////		};
////	}

////	///
////	/// Parses the ODATA date-string into a date-object
////	/// All queries return a date in the format "/Date(1368688809000)/"
////	/// 
////	function parseODataDate(value) {

////		return new Date(parseInt(value.replace('/Date(', '').replace(')/', ''), 10));
////	}

////	///
////	/// Generics ajax-call funciton. Returns a promise object
////	///
////	function doRequest(options, asyn) {

////		// default values for the ajax queries
////		var ajaxDefaults = {
////			type: "GET",
////			async: true,
////			contentType: "application/json; charset=utf-8",
////			datatype: "json",
////			beforeSend: function (request) {

////				request.setRequestHeader("Accept", "application/json");
////			}
////		};

////		// merge the default-settings with the options-object
////		options = $.extend(ajaxDefaults, options);

////		// request could be executed in sync or asyn mode
////		options.async = (asyn === undefined) ? true : asyn;

////		return $.ajax(options);
////	}

////	///
////	/// Creates a link between records 
////	///
////	function associate(entity1Id, entity1Name, entity2Id, entity2Name, relationshipName, opt_asyn) {

////		// default is 'true'
////		var asyn = (opt_asyn === undefined) ? true : opt_asyn,
////			odatapath = getODataPath(),
////			request = {
////				url: odatapath + "/" + entity1Name + "Set(guid'" + entity1Id + "')/$links/" + relationshipName,
////				type: "POST",
////				data: window.JSON.stringify({
////					uri: odatapath + "/" + entity2Name + "Set(guid'" + entity2Id + "')"
////				})
////			};

////		return doRequest(request, asyn);
////	}

////	///
////	/// Removes a link between records 
////	///
////	function disassociate(entity1Id, entity1Name, entity2Id, relationshipName, opt_asyn) {

////		var asyn = (opt_asyn === undefined) ? true : opt_asyn,
////			odatapath = getODataPath(),
////			request = {
////				url: odatapath + "/" + entity1Name + "Set(guid'" + entity1Id + "')/$links/" + relationshipName + "(guid'" + entity2Id + "')",
////				type: "POST",
////				// method: "DELETE",
////				beforeSend: function (request) {
////					request.setRequestHeader('Accept', 'application/json');
////					request.setRequestHeader('X-HTTP-Method', 'DELETE');
////				}
////			};

////		return doRequest(request, asyn);
////	}

////	///
////	/// Retrieves a single record 
////	///
////	function retrieve(entityName, id, columns, opt_asyn) {

////		// default is 'true'
////		var asyn = (opt_asyn === undefined) ? true : opt_asyn,
////			setName = entityName + 'Set',
////			query = getODataPath() + "/" + setName + "(guid'" + id + "')" + "?$select=" + columns.join(',');

////		// returns a promise instance
////		return doRequest({ url: query }, asyn);
////	}

////	///
////	/// Used in the context of lazy-loading (more than 50 records found in the retrieveMultiple request)
////	/// Query (url) needs to define the entity, columns and filter
////	///
////	function byQueryUrl(queryUrl, opt_asyn) {

////		return doRequest({ url: queryUrl }, opt_asyn);
////	}

////	///
////	/// Used for joins
////	///
////	function byExpandQuery(entityName, columns, expand, filter, opt_asyn) {

////		// default is 'true'
////		var asyn = (opt_asyn === undefined) ? true : opt_asyn;

////		// in case filter is empty 
////		filter = (filter) ? "&$filter=" + encodeURIComponent(filter) : '';

////		// create defered object
////		var setName = entityName + 'Set',
////			query = getODataPath() + "/" + setName + "?$select=" + columns.join(',') + '&$expand=' + expand + filter;

////		return doRequest({ url: query }, asyn);
////	}

////	///
////	/// Retrievs multiuple records based on filter
////	/// The max number of records returned by Odata is limited to 50, the result object contains the property 
////	/// 'next' and the fn loadNext that could be used to load the addional records 
////	///
////	function byQuery(entityName, columns, filter, opt_asyn) {

////		// default is 'true'
////		var asyn = (opt_asyn === undefined) ? true : opt_asyn;

////		// in case filter is empty 
////		filter = (filter) ? "&$filter=" + encodeURIComponent(filter) : '';

////		// create defered object
////		var setName = entityName + 'Set',
////			query = getODataPath() + "/" + setName + "?$select=" + columns.join(',') + filter;

////		return doRequest({ url: query }, asyn);
////	}

////	///
////	/// Per default a REST query returns only 50 record. This function will load all records
////	///
////	function byQueryAll(entityName, columns, filter, opt_asyn) {

////		var dfdAll = new $.Deferred(),
////			allRecords = [];

////		byQuery(entityName, columns, filter, opt_asyn).then(function byQueryAllSuccess(result) {

////			// add the elements to the collection
////			allRecords = allRecords.concat(result.d.results);

////			if (result.d.__next) {

////				// the success-handler will be this function
////				byQueryUrl(result.d.__next, opt_asyn).then(byQueryAllSuccess, dfdAll.reject);

////				// call the progressCallbacks of the promise
////				dfdAll.notify(result);
////			}
////			else {
////				dfdAll.resolve(allRecords);
////			}

////		}, dfdAll.reject);

////		return dfdAll.promise();
////	}

////	///
////	/// Create a single reocrd
////	///
////	function created(entityName, entityObject, opt_asyn) {

////		// default is 'true'
////		var asyn = (opt_asyn === undefined) ? true : opt_asyn,
////			setName = entityName + 'Set',
////			json = window.JSON.stringify(entityObject),
////			query = getODataPath() + "/" + setName;

////		// returns a promise object
////		return doRequest({ type: "POST", url: query, data: json }, asyn);
////	}

////	///
////	/// Updates the record with the stated intance.
////	/// MERGE methode does not return data
////	///
////	/// Sample:
////	///     CrmRestKit.Update('Account', id, { 'Address1_City': 'sample', 'Name': 'sample' }).done(...).fail(..)
////	///
////	function update(entityName, id, entityObject, opt_asyn) {

////		// default is 'true'
////		var asyn = (opt_asyn === undefined) ? true : opt_asyn,
////			setName = entityName + 'Set',
////			json = window.JSON.stringify(entityObject),
////			query = getODataPath() + "/" + setName + "(guid'" + id + "')",
////			// ajax-call-options
////			options = {
////				type: "POST",
////				url: query,
////				data: json,
////				beforeSend: function (request) {
////					request.setRequestHeader("Accept", "application/json");
////					request.setRequestHeader("X-HTTP-Method", "MERGE");
////				}
////			};

////		// MERGE methode does not return data
////		return doRequest(options, asyn);
////	}

////	///
////	/// Deletes as single record identified by the id
////	/// Sample:
////	///         CrmRestKit.Delete('Account', id).done(...).fail(..);
////	///
////	function deleteRecord(entityName, id, opt_asyn) {

////		// default is 'true'
////		var asyn = (opt_asyn === undefined) ? true : opt_asyn,
////			setName = entityName + 'Set',
////			query = getODataPath() + '/' + setName + "(guid'" + id + "')",
////			options = {
////				type: "POST",
////				url: query,
////				beforeSend: function (request) {
////					request.setRequestHeader('Accept', 'application/json');
////					request.setRequestHeader('X-HTTP-Method', 'DELETE');
////				}
////			};

////		return doRequest(options, asyn);
////	}

////	///
////	/// Public API
////	///
////	return {
////		Version: version,
////		/* Read /retrieve methods*/
////		Retrieve: retrieve,
////		ByQuery: byQuery,
////		ByQueryUrl: byQueryUrl,
////		ByExpandQuery: byExpandQuery,
////		ByQueryAll: byQueryAll,
////		/* C U D */
////		Create: created,
////		Update: update,
////		Delete: deleteRecord,
////		/* N:M relationship operations */
////		Associate: associate,
////		Disassociate: disassociate,
////		/* Factory methods */
////		EntityReferenceFactory: entityReferenceFactory,
////		OptionSetValueFactory: optionSetValueFactory,
////		MoneyValueFactory: moneyValueFactory,
////		/* util methods */
////		ParseODataDate: parseODataDate
////	};
////}(window, document));
//Library Name: cvt_CommonFunctions.js
//If the SDK namespace object is not defined, create it.
if (typeof MCS == "undefined") { MCS = {}; }
// Create Namespace container for functions in this library;
if (typeof MCS.cvt_Common == "undefined") { MCS.cvt_Common = {}; }

//Form Types
MCS.cvt_Common.FORM_TYPE_CREATE = 1;
MCS.cvt_Common.FORM_TYPE_UPDATE = 2;
MCS.cvt_Common.FORM_TYPE_READ_ONLY = 3;
MCS.cvt_Common.FORM_TYPE_DISABLED = 4;
MCS.cvt_Common.FORM_TYPE_QUICKCREATE = 5;
MCS.cvt_Common.FORM_TYPE_BULKEDIT = 6;

MCS.cvt_Common.BlankGUID = "00000000-0000-0000-0000-000000000000";

MCS.cvt_Common.AppointmentOccursInPast = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() == MCS.cvt_Common.FORM_TYPE_CREATE)
        return false;
    var startTimeObj = formContext.getAttribute("scheduledstart");
    if (startTimeObj == null)
        return false;
    var startTime = startTimeObj.getValue();
    if (startTime == null)
        return false;
    var now = new Date();
    if (now > startTime)
        return true;
    else
        return false;
};

//Get Server URL
MCS.cvt_Common.BuildRelationshipServerUrl = function () {
    var globalContext = Xrm.Utility.getGlobalContext();
    var server = globalContext.getClientUrl();
    // var server = Xrm.Page.context.getClientUrl();
    if (server.match(/\/$/)) {
        server = server.substring(0, server.length - 1);
    }
    return server;
};

//Check if Obj is null else get Value
MCS.cvt_Common.checkNull = function (executionContext, fieldname) {
    var formContext = executionContext.getFormContext();
    var fieldObj = formContext.getAttribute(fieldname);

    if (fieldObj != null)
        return fieldObj.getValue();

    return null;
};

//Close window
MCS.cvt_Common.closeWindow = function (executionContext, msg) {
    var formContext = executionContext.getFormContext();
    if (msg != null)
        alert(msg);
    //Clear all fields so there are no dirty fields
    var attributes = formContext.data.entity.attributes.get();
    for (var i in attributes) {
        attributes[i].setSubmitMode("never");
    }
    //Close record         
    formContext.ui.close();
};

MCS.cvt_Common.fireChange = function (executionContext, field) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
    USAGE:  Causes 'onChange' event to fire on a related field.  Typically
    would be called to initiate onChange event for a field changed 
    programmatically (and which would not have a "real" onChange fired)
    *********************************************************************/
    var ctlControl = formContext.getControl(field);

    formContext.getAttribute(ctlControl).fireOnChange();

}

//collapse a tab
MCS.cvt_Common.collapseTab = function (executionContext, tab, field) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
    USAGE: collapses/expands a tab based upon whether a control is empty.
    Pass in the schema name of the tab and the name of the field to check

    Example:
    //tab name: "tab_9"  <--schema name is what we want passed in
    //mcs_relatedtsa  <--pass in the field name to check

    **********************************************************************/

    var ctlControl = formContext.getControl(field);
    var atrControl = ctlControl.getAttribute();
    var valControl = atrControl.getValue();

    var tabObj = formContext.ui.tabs.get(tab);

    if (valControl != "" && valControl != null) {
        tabObj.setDisplayState("expanded");
    }
    else {
        tabObj.setDisplayState("collapsed");
    }
};

MCS.cvt_Common.collapse2Tab = function (executionContext, tab1, tab2) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
    USAGE: collapses/expands a tab based upon whether a control is empty.
    Pass in the schema name of the tab and the name of the field to check

    Example:
    //tab name: "tab_9"  <--schema name is what we want passed in
    //mcs_relatedtsa  <--pass in the field name to check

    **********************************************************************/
    var field = "serviceid";
    var ctlControl = formContext.getControl(field);
    var atrControl = ctlControl.getAttribute();
    var valControl = atrControl.getValue();

    var tabObj1 = formContext.ui.tabs.get(tab1);
    var tabObj2 = formContext.ui.tabs.get(tab2);


    if (valControl != "" && valControl != null) {
        tabObj1.setDisplayState("expanded");
        tabObj2.setVisible(false);
    }
    else {
        tabObj1.setDisplayState("collapsed");
        tabObj2.setVisible(true);
    }
};


//Check if GUIDS are the same
MCS.cvt_Common.compareGUIDS = function (guid1, guid2) {
    if (guid1 == null && guid2 == null)
        return true;

    if (guid1 == null || guid2 == null)
        return false;

    var guid1Cleaned = guid1.replace(/\W/g, '');
    guid1Cleaned = guid1Cleaned.toString().toUpperCase();

    var guid2Cleaned = guid2.replace(/\W/g, '');
    guid2Cleaned = guid2Cleaned.toString().toUpperCase();

    if (guid1Cleaned == guid2Cleaned)
        return true;
    else
        return false;
};

//Change a Record's Status
MCS.cvt_Common.changeRecordStatus = function (executionContext, RECORD_ID, Entity_Name, stateCode, statusCode) {
    var formContext = executionContext.getFormContext();
    var globalContext = Xrm.Utility.getGlobalContext();
    var url = globalContext.getClientUrl();
    //var url = Xrm.Page.context.getClientUrl();

    // create the SetState request
    var request = "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">";
    request += "<s:Body>";
    request += "<Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
    request += "<request i:type=\"b:SetStateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">";
    request += "<a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>EntityMoniker</c:key>";
    request += "<c:value i:type=\"a:EntityReference\">";
    request += "<a:Id>" + RECORD_ID + "</a:Id>";
    request += "<a:LogicalName>" + Entity_Name + "</a:LogicalName>";
    request += "<a:Name i:nil=\"true\" />";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>State</c:key>";
    request += "<c:value i:type=\"a:OptionSetValue\">";
    request += "<a:Value>" + stateCode + "</a:Value>";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>Status</c:key>";
    request += "<c:value i:type=\"a:OptionSetValue\">";
    request += "<a:Value>" + statusCode + "</a:Value>";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "</a:Parameters>";
    request += "<a:RequestId i:nil=\"true\" />";
    request += "<a:RequestName>SetState</a:RequestName>";
    request += "</request>";
    request += "</Execute>";
    request += "</s:Body>";
    request += "</s:Envelope>";
    //send set state request
    $.ajax({
        type: "POST",
        contentType: "text/xml; charset=utf-8",
        datatype: "xml",
        url: url + "/XRMServices/2011/Organization.svc/web",
        data: request,
        beforeSend: function (XMLHttpRequest) {
            XMLHttpRequest.setRequestHeader("Accept", "application/xml, text/xml, */*");
            XMLHttpRequest.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute");
        },
        success: function (data, textStatus, XmlHttpRequest) {
            formContext.data.refresh();
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {
            alert(errorThrown);
        }
    });
};

//Create Fetch
MCS.cvt_Common.CreateFetch = function (entityName, columns, conditions, order) {
    var formattedColumns = '';
    var formattedConditions = '';
    var formattedOrder = '';

    //columns is an array, so that we can build that string with the xml tags
    if (columns != null && columns.length > 0) {
        for (column in columns) {
            formattedColumns += '<attribute name="' + columns[column] + '" />';
        }
    }
    //prefix filter type and add conditions
    if (conditions != null && conditions.length > 0) {
        formattedConditions = "<filter type='and'>";
        for (condition in conditions) {
            formattedConditions += conditions[condition];
        }
    }
    //format order
    if (order != null && order.length == 2)
        formattedOrder = '<order attribute="' + order[0] + '" descending="' + order[1] + '" />';

    var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' aggregate='false'>";
    fetchXml += "<entity name='" + entityName + "'>";
    fetchXml += formattedColumns;
    fetchXml += formattedOrder;
    fetchXml += formattedConditions;
    fetchXml += "</filter>";
    fetchXml += "</entity>";
    fetchXml += "</fetch>";

    return fetchXml;
};

MCS.cvt_Common.DateTime = function (executionContext, attributeName, hour, minute) {
    var formContext = executionContext.getFormContext();
    var defaultDate = new Date();
    var attribute = formContext.getAttribute(attributeName);
    if (attribute.getValue() === null) {
        attribute.setValue(new Date());
    }

    var temp = attribute.getValue();
    //var temp = attribute.getValue().setHours(hour, minute, 0);
    defaultDate = temp.setHours(hour, minute, 0);
    attribute.setValue(temp);

    //attribute.setValue(attribute.getValue().setHours(hour, minute, 0));
};

//Used for Specialty Subtype based off of Subtype
MCS.cvt_Common.EnableDependentLookup = function (executionContext, primaryLU, secondaryLU) {
    var formContext = executionContext.getFormContext();
    var primaryLUattribute = formContext.getAttribute(primaryLU);
    var primaryLUvalue = primaryLUattribute != null ? primaryLUattribute.getValue() : null;
    var primaryLUvalueproperty = primaryLUvalue != null ? primaryLUvalue[0].name : null;

    if (primaryLUvalueproperty != null) {
        formContext.getControl(secondaryLU).setVisible(true);
        formContext.getControl(secondaryLU).setFocus();
    }
    else {
        formContext.getControl(secondaryLU).setVisible(false);
        formContext.getAttribute(secondaryLU).setValue(null);
    }
};

MCS.cvt_Common.EnableOtherDetails = function (executionContext, source, target, value) {
    var formContext = executionContext.getFormContext();
    var targetFieldControl = formContext.ui.controls.get(target);
    var targetFieldObject = formContext.getAttribute(target);
    var sourceValue = formContext.getAttribute(source).getValue();
    if (sourceValue != null && sourceValue.toString() == value) {
        targetFieldControl.setDisabled(false);
        targetFieldControl.setVisible(true);
        targetFieldObject.setRequiredLevel("required");
        targetFieldObject.setSubmitMode("dirty");
    }
    else {
        if (targetFieldObject.getValue() != "") {
            targetFieldObject.setValue("");
            targetFieldObject.setSubmitMode("always");
        }
        targetFieldControl.setDisabled(true);
        targetFieldControl.setVisible(false);
        targetFieldObject.setRequiredLevel("none");
    }
};

//XML Fix - replace & with &amp;
MCS.cvt_Common.formatXML = function (str) {
    if (str) {
        str = str.replace(/&/g, "&amp;");
        return str;
    }
};

//Gets the EntityTypeCode / ObjectTypeCode of a entity
MCS.cvt_Common.getObjectTypeCode = function (entityName) {
    var lookupService = new parent.RemoteCommand("LookupService", "RetrieveTypeCode");
    lookupService.SetParameter("entityName", entityName);
    var result = lookupService.Execute();
    if (result.Success && typeof result.ReturnValue == "number") {
        return result.ReturnValue;
    } else {
        return null;
    }
};

//MCS.cvt_Common.JSDebugAlert = function (msg) {
//    Set showAlerts to false to stop showing Alerts
//    var showAlerts = false;

//    if (showAlerts == true) {
//        if (msg != null) {
//            alert("JS Debug Message: \n\n" + msg);
//        }
//    }
//};

MCS.cvt_Common.MVIConfig = function () {
    var deferred = $.Deferred();
    var returnData = {
        success: false,
        data: {}
    };
    var roles = "";
    var MVIConfig = false;
    var filter = "mcs_name eq 'Active Settings'";
    Xrm.WebApi.retrieveMultipleRecords("mcs_setting", "?$select=cvt_usemvi,cvt_mviroles&$filter=" + filter).then(
        function success(result) {
            if (result != null && result.entities.length != 0) {
                MVIConfig = result.entities[0].cvt_usemvi != null ? result.entities[0].cvt_usemvi : false;
                roles = result.entities[0].cvt_mviroles;
            }
            // var roleCheck = MCS.cvt_Common.userHasRoleInList(roles);
            var roleCheckretrieveTokenDeferred = MCS.cvt_Common.userHasRoleInList(roles);
            $.when(roleCheckretrieveTokenDeferred).done(function (returnData) {
                //return MVIConfig && roleCheck;
                var roleCheck = returnData.data.result;
                returnData.success = true;
                returnData.data.result = MVIConfig && roleCheck;
                deferred.resolve(returnData);
            },
                function (error) {
                    //return MVIConfig;
                    returnData.success = false;
                    deferred.resolve(returnData);

                }
            );

        }
    );
    return deferred.promise();
};


//UNSUPPORTED: Add Message to Notifications area
MCS.cvt_Common.Notifications = function (action, icon, message) {
    var notificationsList = Sys.Application.findComponent('crmNotifications');

    switch (action) {
        case "Add":
            if (notificationsList && icon && message)
                notificationsList.AddNotification('noteId1', icon, 'namespace', message);
            break;
        case "Hide":
            notificationsList.SetVisible(false);
            break;
    }
};

MCS.cvt_Common.openDialogOnCurrentRecord = function (formContext, dialogId) {
    // var formContext = primaryControl.getFormContext();
    EntityName = formContext.data.entity.getEntityName();
    objectId = formContext.data.entity.getId();
    return MCS.cvt_Common.openDialogProcess(formContext, dialogId, EntityName, objectId);
};

MCS.cvt_Common.openDialogProcess = function (formContext, dialogId, EntityName, objectId) {


    // var formContext = primaryControl.getFormContext();

    if (formContext != null) {
        if (EntityName == null || EntityName == "")
            EntityName = formContext.data.entity.getEntityName();
        if (objectId == null || objectId == "")
            objectId = formContext.data.entity.getId();
    }

    var globalContext = Xrm.Utility.getGlobalContext();
    var url = globalContext.getClientUrl() +
        //var url = Xrm.Page.context.getClientUrl() +
        "/cs/dialog/rundialog.aspx?DialogId=" +
        dialogId + "&EntityName=" +
        EntityName + "&ObjectId=" +
        objectId;
    var width = 400;
    var height = 400;
    var left = (screen.width - width) / 2;
    var top = (screen.height - height) / 2;
    return window.open(url, '', 'location=0,menubar=1,resizable=1,width=' + width + ',height=' + height + ',top=' + top + ',left=' + left + '');
};

MCS.cvt_Common.RestError = function (err) {
    return JSON.parse(err.responseText).error.message.value;
};

//From the Site, Set Facility
MCS.cvt_Common.SetFacilityFromSite = function (executionContext, siteFieldName, facilityFieldName) {
    var formContext = executionContext.getFormContext();
    var siteField = formContext.getAttribute(siteFieldName);
    var facilityField = formContext.getAttribute(facilityFieldName);
    var priorFacilityValue = facilityField.getValue() != null ? facilityField.getValue()[0].id : null;
    var siteValue = siteField.getValue() != null ? siteField.getValue()[0].id : null;

    if (siteValue != null) {
        //Get Parent Facility of Site

        Xrm.WebApi.retrieveRecord("mcs_site", siteValue, "?$select=mcs_FacilityId").then(
            function success(result) {
                if (result && result.mcs_FacilityId) {
                    //Check and Set Facility
                    var value = new Array();
                    value[0] = new Object();
                    value[0].id = '{' + result.mcs_FacilityId.Id + '}';
                    value[0].name = result.mcs_FacilityId.Name;
                    value[0].entityType = "mcs_facility";

                    //Set Facility field
                    facilityField.setValue(value);
                }
            },
            function (error) {
            }
        );

        //var calls = CrmRestKit.Retrieve("mcs_site", siteValue, ['mcs_FacilityId'], false);
        //calls.fail(
        //        function (error) {
        //        }).done(function (data) {
        //            if (data && data.d && data.d.mcs_FacilityId) {
        //                //Check and Set Facility
        //                var value = new Array();
        //                value[0] = new Object();
        //                value[0].id = '{' + data.d.mcs_FacilityId.Id + '}';
        //                value[0].name = data.d.mcs_FacilityId.Name;
        //                value[0].entityType = "mcs_facility";

        //                //Set Facility field
        //                facilityField.setValue(value);
        //            }
        //        });
    }
    else {
        //Clear Facility field
        facilityField.setValue(null);
    }
    if (MCS.cvt_Common.compareGUIDS(priorFacilityValue, ((facilityField.getValue() != null) ? facilityField.getValue()[0].id : null)) != true)
        facilityField.setSubmitMode("always");
};

MCS.cvt_Common.TrimBookendBrackets = function (stringVar) {
    if (stringVar != null && stringVar.length > 0)
        return stringVar.charAt(0) == '{' ? stringVar.slice(1, stringVar.length - 1) : stringVar;
    else
        return "";
};


if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
    if (jQuery.when.all === undefined) {
        jQuery.when.all = function (deferreds) {
            var deferred = new jQuery.Deferred();
            $.when.apply(jQuery, deferreds).then(
                function () {
                    deferred.resolve(Array.prototype.slice.call(arguments));
                },
                function () {
                    deferred.fail(Array.prototype.slice.call(arguments));
                });

            return deferred;
        }
    }
}

//Check if the passed in User has a particular role
MCS.cvt_Common.userHasRoleInList = function (roles) {
    var deferred = $.Deferred();
    var returnData = {
        success: false,
        data: {}
    };
    var userRoles = Xrm.Utility.getGlobalContext().userSettings.securityRoles;
    //var userRoles = Xrm.Page.context.getUserRoles();
    var hasRole = false;
    var deferreds = [];
    for (var i = 0; i < userRoles.length; i++) {
        if (hasRole) {
            return true;
        }
        var currentUserRole = userRoles[i];
        var localDeferred1 = getCurrentUserRole(roles, currentUserRole);

        deferreds.push(localDeferred1);

        //CrmRestKit.Retrieve('Role', userRoles[i], ['Name'], false).fail(
        //    function (err) {
        //        return;
        //    }).done(
        //    function (data) {
        //        if (data != null && data.d != null) {
        //            var roleName = data.d.Name.trim().toLowerCase();
        //            if (roles.toLowerCase().indexOf(roleName) != -1) {
        //                hasRole = true;
        //                return;
        //            }
        //        }
        //    });

    }
    if (typeof $.when.all === 'undefined')
        loadWhenAllDefinition()

    $.when.all(deferreds).then(function (objects) {
        console.log("Resolved objects:", objects);
        returnData.data.result = false;
        for (var i = 0; i < objects.length; i++) {
            if (objects[i].data.result)
                returnData.data.result = true
        }
        returnData.success = true;
        deferred.resolve(returnData)
    });

    //return hasRole;
    return deferred.promise();
};



getCurrentUserRole = function (roles, currentUserRole) {
    var localDeferred = $.Deferred();
    var returnData = {
        success: false,
        data: {}
    };

    var userRoles = Xrm.Utility.getGlobalContext().userSettings.roles.getAll();
    for (var i = 0; i < userRoles.length; i++) {
        if (roles.toLowerCase().indexOf(userRoles[i].name.toLowerCase()) != -1) {
            hasRole = true;
            returnData.success = true;
            returnData.data.result = hasRole;
            break;
        }
    }

    localDeferred.resolve(returnData);

    /*Xrm.WebApi.retrieveRecord("Roles", currentUserRole, "?$select=name").then(
        function success(result) {
            if (result != null) {
                var roleName = result.name.trim().toLowerCase();
                if (roles.toLowerCase().indexOf(roleName) != -1) {
                    hasRole = true;
                    //return;
                    // return hasRole;

                    returnData.success = true;
                    returnData.data.result = hasRole;

                }
                localDeferred.resolve(returnData);
            }
        },
        function (error) {
            returnData.success = false;
            localDeferred.resolve(returnData);

        }
    );*/

    return localDeferred.promise();
}


loadWhenAllDefinition = function () {
    if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
        if (jQuery.when.all === undefined) {
            jQuery.when.all = function (deferreds) {
                var deferred = new jQuery.Deferred();
                $.when.apply(jQuery, deferreds).then(
                    function () {
                        deferred.resolve(Array.prototype.slice.call(arguments));
                    },
                    function () {
                        deferred.fail(Array.prototype.slice.call(arguments));
                    });

                return deferred;
            }
        }
    }
}

/***********************************************************************
/** 
/** MCSGlbal Functions.js
/** Description: Global rules called by form level jscripts 
/** 
***********************************************************************/
//If the MCS namespace object is not defined, create it.
if (typeof (MCS) == "undefined") { MCS = { __namespace: true }; }
MCS.GlobalFunctions = {
    GetRequestObject: function () {
        if (window.XMLHttpRequest) {
            return new window.XMLHttpRequest;
        }
        else {
            try {
                return new ActiveXObject("MSXML2.XMLHTTP.3.0");
            }
            catch (ex) {
                return null;
            }
        }
    },
    GuidsAreEqual: function (guid1, guid2) {
        var isEqual = false;

        if (guid1 == null || guid2 == null) {
            isEqual = false;
        }
        else {
            isEqual = guid1.replace(/[{}]/g, "").toLowerCase() == guid2.replace(/[{}]/g, "").toLowerCase();
        }

        return isEqual;
    },

    getODataUTCDateFilter: function (date) {

        var monthString;
        var rawMonth = (date.getUTCMonth() + 1).toString();
        if (rawMonth.length == 1) {
            monthString = "0" + rawMonth;
        }
        else { monthString = rawMonth; }

        var dateString;
        var rawDate = date.getUTCDate().toString();
        if (rawDate.length == 1) {
            dateString = "0" + rawDate;
        }
        else { dateString = rawDate; }


        var DateFilter = "datetime\'";
        DateFilter += date.getUTCFullYear() + "-";
        DateFilter += monthString + "-";
        //DateFilter += "07-";
        DateFilter += dateString;
        DateFilter += "T";
        var temp = date.getUTCHours();
        if (temp.toString().length == 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + ":";

        temp = date.getUTCMinutes();
        if (temp.toString().length == 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + ":";

        temp = date.getUTCSeconds();
        if (temp.toString().length == 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + "\'";

        //
        //         DateFilter += date.getUTCSeconds() + ":";
        //         DateFilter += date.getUTCMilliseconds();
        //         DateFilter += "Z\'";
        return DateFilter;
    },
    //getAuthenticationHeader: function () {
    //	var authenticationHeader = Xrm.Page.context.getAuthenticationHeader();

    //},
    _getClientUrl: function (urlType) {

        var orgServicePath = "/xrmservices/2011/organization.svc/web";

        if (urlType == "ODATA") {
            orgServicePath = "/xrmservices/2011/organizationdata.svc";
        }
        var serverUrl = "";
        if (typeof GetGlobalContext == "function") {
            var context = GetGlobalContext();
            serverUrl = context.getClientUrl();
        }
        else {
            if (typeof Xrm.Page.context == "object") {
                serverUrl = Xrm.Page.context.getClientUrl();
            }
            else { throw new Error("Unable to access the server URL"); }
        }
        if (serverUrl.match(/\/$/)) {
            serverUrl = serverUrl.substring(0, serverUrl.length - 1);
        }
        return serverUrl + orgServicePath;
    },

    runWorkflow: function (objectId, workflowId, runResponse) {
        var request = "<Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        request += "<request i:type=\"b:ExecuteWorkflowRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">";
        request += "<a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";
        request += "<a:KeyValuePairOfstringanyType>";
        request += "<c:key>EntityId</c:key>";
        request += "<c:value i:type=\"d:guid\" xmlns:d=\"http://schemas.microsoft.com/2003/10/Serialization/\">" + objectId + "</c:value>";
        request += "</a:KeyValuePairOfstringanyType>";
        request += "<a:KeyValuePairOfstringanyType>";
        request += "<c:key>WorkflowId</c:key>";
        request += "<c:value i:type=\"d:guid\" xmlns:d=\"http://schemas.microsoft.com/2003/10/Serialization/\">" + workflowId + "</c:value>";
        request += "</a:KeyValuePairOfstringanyType>";
        request += "</a:Parameters>";
        request += "<a:RequestId i:nil=\"true\" />";
        request += "<a:RequestName>ExecuteWorkflow</a:RequestName>";
        request += "</request>";
        request += "</Execute>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP"), true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.RunWorkflow);
        req.onreadystatechange = function () { runResponse(req); };
        req.send(request);

    },
    runWorkflowResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            return "OK";
        });
    },
    createSOAPRequest: function (type, attributes, createResponse) {
        var request = "<Create xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">";
        request += "<entity xmlns:b=\"http://schemas.microsoft.com/xrm/2011/Contracts\"";
        request += " xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        request += this._getAttributeWrapper(attributes);
        request += "<b:EntityState i:nil=\"true\"/>";
        request += "<b:FormattedValues xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"/>";
        request += "<b:Id>00000000-0000-0000-0000-000000000000</b:Id>";
        request += "<b:LogicalName>" + type + "</b:LogicalName>";
        request += "<b:RelatedEntities xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"/>";
        request += "</entity>";
        request += "</Create>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP"), true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.Create);
        req.onreadystatechange = function () { createResponse.parseResponse(req); };
        req.send(request);

    }, createResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            return responseXML.selectSingleNode("//CreateResult").text;
        });
    },
    retrieveRequest: function (type, id, columnSet, retrieveResponse) {

        var request = "<Retrieve xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">";
        request += "<entityName>" + type + "</entityName>";
        request += "<id>" + id + "</id>";
        request += MCS.GlobalFunctions._getColumnSet(columnSet);
        request += "</Retrieve>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP") + "/web", true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.Retrieve);
        req.onreadystatechange = function () { retrieveResponse._parseResponse(req); };
        req.send(request);

    },
    retrieveResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            var attributesData = responseXML.selectNodes("//a:KeyValuePairOfstringanyType")
            var entityInstance = {};
            for (var i = 0; i < attributesData.length; i++) {

                var attributeName = attributesData[i].selectSingleNode("b:key").text;
                var attributeType = attributesData[i].selectSingleNode("b:value").attributes.getNamedItem("i:type").text;
                var attributeValue = attributesData[i].selectSingleNode("b:value");
                switch (attributeType) {
                    case "c:guid":
                    case "c:string":
                        entityInstance[attributeName] = attributeValue.text;
                        break;
                    case "a:EntityReference":
                        var value = {};
                        value.Id = attributeValue.selectSingleNode("a:Id").text;
                        value.LogicalName = attributeValue.selectSingleNode("a:LogicalName").text;
                        value.Name = attributeValue.selectSingleNode("a:Name").text;
                        entityInstance[attributeName] = value;
                        break;
                    default:
                        throw new Error("Parsing " + attributeType + " attributes not Implemented.");
                        break;
                }

            }

            return entityInstance;


        });
    },
    updateRequest: function () { },
    updateResponse: function () { },
    deleteRequest: function () { },
    deleteResponse: function () { },
    _getSOAPWrapper: function (request) {
        var SOAP = "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>";
        SOAP += request;
        SOAP += "</s:Body></s:Envelope>";
        return SOAP;
    },
    _getAttributeWrapper: function (attributes) {
        var attributesString = "<b:Attributes xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";

        for (var i = 0; i < attributes.length; i++) {

            var attribute = "<b:KeyValuePairOfstringanyType>";
            attribute += "<c:key>" + attributes[i].name + "</c:key>";

            switch (attributes[i].type) {

                case "string":
                    attribute += "<c:value i:type=\"d:" + attributes[i].type + "\" ";
                    attribute += " xmlns:d=\"http://www.w3.org/2001/XMLSchema\">" + attributes[i].value + "</c:value>";
                    break;
                case "EntityReference":
                    attribute += "<c:value i:type=\"b:EntityReference\">";
                    attribute += "<b:Id>" + attributes[i].value.Id + "</b:Id>";
                    attribute += "<b:LogicalName>" + attributes[i].value.LogicalName + "</b:LogicalName>";
                    if (attributes[i].value.Name == null) { attribute += "<b:Name i:nil=\"true\"/>"; }
                    else { attribute += "<b:Name>" + attributes[i].value.Name + "</b:Name>"; }
                    attribute += "</c:value>";
                    break;
            }




            attribute += "</b:KeyValuePairOfstringanyType>"
            attributesString += attribute;

        }
        attributesString += "</b:Attributes>";

        return attributesString;

    },
    columnSet: function (columns) {
        if (columns == null) {
            return { allColumns: false, columns: [] };
        }
        else {
            var errorMessage = "The columns parameter must be a comma separated list of strings or an array of strings.";
            var arrColumns = [];
            switch (typeof columns) {
                case "string":
                    arrColumns = columns.split(",");
                    break;
                case "object":
                    if (columns instanceof Array) {
                        var stringArray = true;
                        for (var i = 0; i < columns.length; i++) {
                            if (typeof columns[i] != "string") {
                                stringArray = false;
                                break;
                            }
                        }
                        if (stringArray) { arrColumns = columns; }
                        else { throw new Error(errorMessage); }
                    }
                    else { throw new Error(errorMessage); }
                    break;
                default:
                    throw new Error(errorMessage);
                    break;
            }
            return { allColumns: false, columns: arrColumns };
        }
    },
    _getColumnSet: function (columnSet) {

        var col = "<columnSet xmlns:b=\"http://schemas.microsoft.com/xrm/2011/Contracts\"";
        col += " xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        if (columnSet.allColumns == true) { col += "<b:AllColumns>true</b:AllColumns>"; }
        else {
            col += "<b:AllColumns>false</b:AllColumns>";
            col += "<b:Columns xmlns:c=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">";
            for (var i = 0; i < columnSet.columns.length; i++) {
                col += "<c:string>" + columnSet.columns[i] + "</c:string>";
            }
            col += "</b:Columns>";
        }

        col += "</columnSet>";

        return col;

    },
    _Action: {
        Execute: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute",
        Create: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Create",
        Retrieve: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Retrieve",
        Update: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Update",
        Delete: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Delete",
        RunWorkflow: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute"
    },
    _getError: function (faultXml) {
        var errorMessage = "Unknown Error (Unable to parse the fault)";
        if (typeof faultXml == "object") {
            try {
                var bodyNode = faultXml.firstChild.firstChild;
                //Retrieve the fault node
                for (var i = 0; i < bodyNode.childNodes.length; i++) {
                    var node = bodyNode.childNodes[i];

                    //NOTE: This comparison does not handle the case where the XML namespace changes
                    if ("s:Fault" == node.nodeName) {
                        for (var j = 0; j < node.childNodes.length; j++) {
                            var faultStringNode = node.childNodes[j];
                            if ("faultstring" == faultStringNode.nodeName) {
                                errorMessage = faultStringNode.text;
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            catch (e) { };
        }

        return new Error(errorMessage);

    },
    _response: function (successStatus, parseData) {
        return {
            _state: "sent",
            _data: null,
            _error: null,
            _parseData: parseData,
            onComplete: null,
            _parseResponse: function (req) {

                if (req.readyState == 4) {
                    this._state = "recieved";
                    if (req.status == successStatus) {
                        this._data = parseData(req.responseXML);
                        this._state = "complete";
                        if (this.onComplete != null) {
                            this.onComplete();
                        }
                    }
                    else {
                        this._state = "error";
                        this._error = new MCS.GlobalFunctions._getError(req.responseXML);
                        if (this.onComplete != null) {
                            this.onComplete();
                        }
                    }
                }

            },
            getError: function () {
                if (this._error != null) { return this._error; }
                else { throw new Error("No error exists."); }
            },
            getState: function () { return this._state; },
            getData: function () {
                if (this._state == "complete") {
                    return this._data;
                }
                else { throw new Error("Data is not ready yet."); }
            }
        };
    },

    createRestRecord: function (recordToCreate, callback, recordType) {
        var jsonRecord = window.JSON.stringify(recordToCreate);

        var createReq = new XMLHttpRequest();
        createReq.open("POST", this._getClientUrl("ODATA") + "/" + recordType, true);
        createReq.setRequestHeader("Accept", "application/json");
        createReq.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        createReq.onreadystatechange = function () {
            MCS.GlobalFunctions.createRestReqCallBack(this, callback);
        };
        createReq.send(jsonRecord);

    },
    createRestReqCallBack: function (createReq, callback) {
        if (createReq.readyState == 4 /* complete */) {
            if (createReq.status == 201) {
                //Success
                var newRecord = JSON.parse(createReq.responseText).d;
                callback(newRecord);
            }
            else {
                //Failure
                MCS.GlobalFunctions.errorHandler(createReq);
            }
        }
    },


    RetrieveRecords: function (filter, callback) {
        /// <summary>
        /// Initiates an asynchronous request to retrieve records.
        /// If there are additional pages of records the SDK.RestEndpointPaging.RetrieveRecordsCallBack function will
        /// call this function.
        /// </summary>
        var retrieveRecordsReq = new XMLHttpRequest();
        retrieveRecordsReq.open("GET", this._getClientUrl("ODATA") + filter, true);
        retrieveRecordsReq.setRequestHeader("Accept", "application/json");
        retrieveRecordsReq.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        retrieveRecordsReq.onreadystatechange = function () {
            /// <summary>
            /// This event handler passes the callback through
            /// </summary>
            MCS.GlobalFunctions.RetrieveRecordsCallBack(this, callback);
        };
        retrieveRecordsReq.send();

    },
    dateReviver: function (key, value) {
        var a;
        if (typeof value === 'string') {
            a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
            if (a) {
                return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));
            }
        }
        return value;
    },
    RetrieveRecordsCallBack: function (retrieveRecordsReq, callback) {
        /// <summary>
        /// Handles the onreadystatechange event to process the records returned.
        /// If more pages are available this function will call the SDK.RestEndpointPaging.RetrieveRecords 
        /// function to get the rest.
        /// </summary>
        if (retrieveRecordsReq.readyState == 4 /* complete */) {
            if (retrieveRecordsReq.status == 200) {
                //Success
                var retrievedRecords = JSON.parse(retrieveRecordsReq.responseText, MCS.GlobalFunctions.dateReviver).d;
                /// The callback is called with the results.
                callback(retrievedRecords.results);

                if (null != retrievedRecords.__next) {
                    // The existance of the '__next' property indicates that more records are available
                    // So the originating function is called again using the filter value returned
                    var filter = retrievedRecords.__next.replace(MCS.GlobalFunctions.GetODataPath(), "");
                    MCS.GlobalFunctions.RetrieveRecords(filter, callback);
                }


            }
            else {
                //Failure
                MCS.GlobalFunctions.errorHandler(retrieveRecordsReq);

            }
        }
    },
    //Function to handle any http errors
    errorHandler: function (XmlHttpRequest) {
        /// <summary>
        /// Simply displays an alert message with details about any errors.
        /// </summary>
        if (XmlHttpRequest) {
            if (XmlHttpRequest.status != null) {
                if (XMLHttpRequest.statusText != null) {
                    alert("Error : " +
                        XmlHttpRequest.status + ": " +
                        XmlHttpRequest.statusText + ": " +
                        JSON.parse(XmlHttpRequest.responseText).error.message.value);
                }
                else {
                    alert(XMLHttpRequest);
                }
            }
            else {
                alert(XMLHttpRequest);
            }
        }
        else {
            alert("Unknown error occurred");
        }
    },

    __namespace: true
};
var XrmSvcToolkit = (function (window, undefined) {
    /**
    * XrmSvcToolkit v0.2, a small JavaScript library that helps access 
    * Microsoft Dynamics CRM 2011 web service interfaces (SOAP and REST)
    *
    * @copyright    Copyright (c) 2011 - 2013, KingswaySoft (http://www.kingswaysoft.com)
    * @license      Microsoft Public License (Ms-PL)
    * @developer    Daniel Cai (http://danielcai.blogspot.com)

    * @contributors George Doubinski, Mitch Milam, Carsten Groth
    *
    * THIS SOFTWARE IS PROVIDED BY KingswaySoft ''AS IS'' AND ANY
    * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    * DISCLAIMED. IN NO EVENT SHALL KingswaySoft BE LIABLE FOR ANY
    * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    *
    */

    var odataEndpoint = "/XRMServices/2011/OrganizationData.svc",
        soapEndpoint = "/XRMServices/2011/Organization.svc/web";

    // Type sniffering
    var toString = Object.prototype.toString,
        isFunction = function (o) {
            return toString.call(o) === "[object Function]";
        },
        isInteger = function (o) {
            return !isNaN(parseInt(o));
        },
        isString = function (o) {
            return toString.call(o) === "[object String]";
        },
        isArray = function (o) {
            return toString.call(o) === "[object Array]";
        },
        isNonEmptyString = function (o) {
            if (!isString(o) || o.length === 0) {
                return false;
            }

            // checks for a non-white space character 
            return /[^\s]+/.test(o);
        };

    var isoDateExpr = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})\.?(\d*)?(Z|[+-]\d{2}?(:\d{2})?)?$/,
        jsonDateExpr = /^\/Date\(([-+]?\d+)\)\/$/;

    var context = (function () {
        if (isFunction(window.GetGlobalContext)) {
            return GetGlobalContext();
        } else if (Xrm != undefined) {
            return Xrm.Page.context;
        } else {
            throw new Error("CRM context is not available.");
        }
    })();

    var clientUrl = (function () {
        if (context.getClientUrl !== undefined) {
            return context.getClientUrl();
        }

        var localServerUrl = window.location.protocol + "//" + window.location.host;
        if (context.isOutlookClient() && !context.isOutlookOnline()) {
            return localServerUrl;
        } else {
            var crmServerUrl = context.getClientUrl();
            crmServerUrl = crmServerUrl.replace(/^(http|https):\/\/([_a-zA-Z0-9\-\.]+)(:([0-9]{1,5}))?/, localServerUrl);
            crmServerUrl = crmServerUrl.replace(/\/$/, "");
        }

        return crmServerUrl;
    })();

    var restErrorHandler = function (req) {
        var errorMessage;

        try {
            errorMessage = JSON.parse(req.responseText).error.message.value;
        } catch (err) {
            // Ignore any error when parsing the error message. 
            errorMessage = req.responseText;
        }

        errorMessage = errorMessage.length > 0
            ? "Error: " + req.status + ": " + req.statusText + ": " + errorMessage
            : "Error: " + req.status + ": " + req.statusText;

        return new Error(errorMessage);
    };

    var soapErrorHandler = function (req) {
        var errorMessage = req.responseText.length > 0
            ? "Error: " + req.status + ": " + req.statusText + ": " + req.responseText
            : "Error: " + req.status + ": " + req.statusText;

        return new Error(errorMessage);
    };

    var dateReviver = function (key, value) {
        if (typeof value === 'string') {
            if (value.match(jsonDateExpr)) {
                var dateValue = value.replace(jsonDateExpr, "$1");
                return new Date(parseInt(dateValue, 10));
            }
        }
        return value;
    };

    var xmlEncode = function (input) {
        if (input == null) {
            return null;
        }

        if (input == '') {
            return '';
        }

        var c;
        var result = '';

        for (var pos = 0; pos < input.length; pos++) {
            c = input.charCodeAt(pos);

            if ((c > 96 && c < 123) ||
                (c > 64 && c < 91) ||
                (c > 47 && c < 58) ||
                (c == 32) ||
                (c == 44) ||
                (c == 46) ||
                (c == 45) ||
                (c == 95)) {
                result = result + String.fromCharCode(c);
            } else {
                result = result + '&#' + c + ';';
            }
        }

        return result;
    };

    var parseIsoDate = function (s) {
        if (s == null || !s.match(isoDateExpr))
            return null;

        var dateParts = isoDateExpr.exec(s);
        return new Date(Date.UTC(parseInt(dateParts[1], 10),
            parseInt(dateParts[2], 10) - 1,
            parseInt(dateParts[3], 10),
            parseInt(dateParts[4], 10) - (dateParts[8] == "" || dateParts[8] == "Z" ? 0 : parseInt(dateParts[8])),
            parseInt(dateParts[5], 10),
            parseInt(dateParts[6], 10)));
    };

    var getAttribute = function (xmlNode, attrName) {
        for (var i = 0; i < xmlNode.attributes.length; i++) {
            var attr = xmlNode.attributes[i];
            if (attr.name == attrName) {
                return attr.value;
            }
        }
    };

    var getNodeText = function (node) {
        return node.text !== undefined
            ? node.text
            : node.textContent;
    }

    var getTypedValue = function (fieldType, valueNode) {
        switch (fieldType) {
            case "c:string":
            case "c:guid":
                return getNodeText(valueNode);
            case "c:boolean":
                return getNodeText(valueNode) === "true";
            case "c:int":
                return parseInt(getNodeText(valueNode));
            case "c:decimal":
            case "c:double":
                return parseFloat(getNodeText(valueNode));
            case "c:dateTime":
                return parseIsoDate(getNodeText(valueNode));
            case "a:OptionSetValue":
                valueNode = getChildNode(valueNode, "a:Value");
                return {
                    Value: parseInt(getNodeText(valueNode))
                };
            case "a:Money":
                valueNode = getChildNode(valueNode, "a:Value");
                return {
                    Value: getNodeText(valueNode)
                };
            case "a:EntityReference":
                return getEntityReference(valueNode);
            case "a:EntityCollection":
                return getEntityCollection(valueNode);
            case "a:AliasedValue":
                valueNode = getChildNode(valueNode, "a:Value");
                fieldType = getAttribute(valueNode, "i:type");
                return getTypedValue(fieldType, valueNode);

            default:
                throw new Error("Unhandled field type: \"" + fieldType + "\", please report the problem to the developer. ");
        }
    };

    var concatOdataFields = function (fields, parameterName) {
        if (isArray(fields) && fields.length > 0) {
            return fields.join(',');
        } else if (isString(fields)) {
            return fields;
        }
        else if (parameterName != undefined) {
            throw new Error(parameterName + " parameter must be either a delimited string or an array. ");
        }
        else {
            return "";
        }
    };

    // Get a list of entities from an EntityCollection XML node.
    var getEntityCollection = function (entityCollectionNode) {
        var entityName, moreRecords, pagingCookie, totalRecordCount, entitiesNode;

        // Try to get all child nodes in one pass
        for (var m = 0; m < entityCollectionNode.childNodes.length; m++) {
            var collectionChildNode = entityCollectionNode.childNodes[m];
            switch (collectionChildNode.nodeName) {
                case "a:EntityName":
                    entityName = getNodeText(collectionChildNode);
                    break;
                case "a:MoreRecords":
                    moreRecords = getNodeText(collectionChildNode) === "true";
                    break;
                case "a:PagingCookie":
                    pagingCookie = getNodeText(collectionChildNode);
                    break;
                case "a:TotalRecordCount":
                    totalRecordCount = parseInt(getNodeText(collectionChildNode));
                    break;
                case "a:Entities":
                    entitiesNode = collectionChildNode;
                    break;
            }
        }

        var result = {
            entityName: entityName,
            moreRecords: moreRecords,
            pagingCookie: pagingCookie,
            totalRecordCount: totalRecordCount,
            entities: []
        };

        for (var i = 0; i < entitiesNode.childNodes.length; i++) {
            var entity = { formattedValues: [] };
            var entityNode = entitiesNode.childNodes[i];
            var attributes = getChildNode(entityNode, "a:Attributes");
            for (var j = 0; j < attributes.childNodes.length; j++) {
                var attr = attributes.childNodes[j];

                var fieldName = getNodeText(getChildNode(attr, "b:key"));
                var valueNode = getChildNode(attr, "b:value");
                var fieldType = getAttribute(valueNode, "i:type");

                entity[fieldName] = getTypedValue(fieldType, valueNode);
            }

            var formattedValues = getChildNode(entityNode, "a:FormattedValues");

            for (var k = 0; k < formattedValues.childNodes.length; k++) {
                var valuePair = formattedValues.childNodes[k];
                entity.formattedValues[getNodeText(getChildNode(valuePair, "b:key"))] = getNodeText(getChildNode(valuePair, "b:value"));
            }

            result.entities.push(entity);
        }

        return result;
    };

    // Get an EntityReference from an XML node. For performance reason, we try to
    // get the entity reference in one pass, instead of multiple.
    var getEntityReference = function (xmlNode) {
        var id, logicalName, name;
        for (var i = 0; i < xmlNode.childNodes.length; i++) {
            var childNode = xmlNode.childNodes[i];

            switch (childNode.nodeName) {
                case "a:Id":
                    id = getNodeText(childNode);
                    break;
                case "a:LogicalName":
                    logicalName = getNodeText(childNode);
                    break;
                case "a:Name":
                    name = getNodeText(childNode);
                    break;
            }
        }

        return {
            Id: id,
            LogicalName: logicalName,
            Name: name
        };
    }

    // Get a single child node that matches the specified name.
    var getChildNode = function (xmlNode, nodeName) {
        for (var i = 0; i < xmlNode.childNodes.length; i++) {
            var childNode = xmlNode.childNodes[i];

            if (childNode.nodeName == nodeName) {
                return childNode;
            }
        }
    }

    var getSoapError = function (soapXml) {
        try {
            var bodyNode = soapXml.firstChild.firstChild;
            var faultNode = getChildNode(bodyNode, "s:Fault");
            var faultStringNode = getChildNode(faultNode, "faultstring");
            return new Error(getNodeText(faultStringNode));
        }
        catch (e) {
            return new Error("An error occurred when parsing the error returned from CRM server: " + e.message);
        }
    }

    var processSoapResponse = function (responseXml, successCallback, errorCallback) {
        try {
            var executeResult = responseXml.firstChild.firstChild.firstChild.firstChild; // "s:Envelope/s:Body/ExecuteResponse/ExecuteResult"
        } catch (err) {
            errorCallback(err);
            return;
        }

        return successCallback(executeResult);
    };

    var getFetchResults = function (resultXml) {
        // For simplicity reason, we are assuming the returned SOAP message uses the following three namespace aliases
        //   xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts"
        //   xmlns:i="http://www.w3.org/2001/XMLSchema-instance"
        //   xmlns:b="http://schemas.datacontract.org/2004/07/System.Collections.Generic"
        // however it is possible that the namespace aliases returned from CRM server could be different, in which
        // case, the fetch function will not work properly
        // For future reference, XPath to the entity collection node:
        // a:Results/a:KeyValuePairOfstringanyType/b:value[@i:type='a:EntityCollection']
        var resultsNode = getChildNode(resultXml, "a:Results"); // a:Results
        var entityCollectionNode = getChildNode(resultsNode.firstChild, "b:value"); // b:value
        return getEntityCollection(entityCollectionNode);
    };

    var processRestResult = function (req, successCallback, errorCallback) {
        if ((req.status >= 200 && req.status < 300) || req.status === 304 || req.status === 1223) {
            try {
                var result = (!!req.responseText)
                    ? JSON.parse(req.responseText, dateReviver).d
                    : null;
            } catch (err) {
                errorCallback(err);
                return;
            }

            return successCallback(result);

        } else {
            errorCallback(restErrorHandler(req));
        }
    };

    var doRestRequest = function (restReq, successCallback, errorCallback) {
        var req = new XMLHttpRequest();
        req.open(restReq.type, restReq.url, restReq.async);
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        if (!!restReq.method) {
            req.setRequestHeader("X-HTTP-Method", restReq.method);
        }

        var erred = false;

        if (restReq.async) {
            req.onreadystatechange = function () {
                if (req.readyState == 4 /* complete */) {
                    processRestResult(req, successCallback, errorCallback);
                }
            };

            if (!!restReq.data) {
                req.send(restReq.data);
            } else {
                req.send();
            }
        } else {
            try {
                //synchronous: send request, then call the callback functions
                if (!!restReq.data) {
                    req.send(restReq.data);
                } else {
                    req.send();
                }

                return processRestResult(req, successCallback, errorCallback);

            } catch (err) {
                errorCallback(err);
            }
        }
    };

    var doSoapRequest = function (soapBody, async, successCallback, errorCallback) {
        var req = new XMLHttpRequest();

        req.open("POST", clientUrl + soapEndpoint, async);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute");

        var soapXml = [
            '<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Body>',
            soapBody,
            '</s:Body></s:Envelope>'].join('');

        if (async) {
            req.onreadystatechange = function () {
                if (req.readyState == 4) { // "complete"
                    if (req.status == 200) { // "OK"
                        processSoapResponse(req.responseXML, successCallback, errorCallback);
                    } else {
                        errorCallback(soapErrorHandler(req));
                    }
                }
            };

            req.send(soapXml);
        } else {
            var syncResult;
            try {
                //synchronous: send request, then call the callback function directly
                req.send(soapXml);
                if (req.status == 200) {
                    return processSoapResponse(req.responseXML, successCallback, errorCallback);
                }
                else {
                    var syncErr = getSoapError(req.responseXML);
                    errorCallback(syncErr);
                    return;
                }
            } catch (err) {
                errorCallback(err);
                return;
            }

            successCallback(syncResult);
        }
    };

    var execute = function (opts) {

        if (!isNonEmptyString(opts.executeXml)) {
            throw new Error("executeXml parameter was not provided. ");
        }

        var async = !!opts.async;

        return doSoapRequest(opts.executeXml, async, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var setState = function (opts) {

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isInteger(opts.stateCode)) {
            throw new Error("stateCode parameter must be an integer. ");
        }

        if (opts.statusCode == null) {
            opts.statusCode = -1;
        }

        var request = [
            '<Execute xmlns="http://schemas.microsoft.com/xrm/2011/Contracts/Services">',
            '<request i:type="b:SetStateRequest"',
            ' xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts" ',
            ' xmlns:b="http://schemas.microsoft.com/crm/2011/Contracts" ',
            ' xmlns:c="http://schemas.datacontract.org/2004/07/System.Collections.Generic" ',
            ' xmlns:i="http://www.w3.org/2001/XMLSchema-instance">',
            '<a:Parameters>',
            '<a:KeyValuePairOfstringanyType>',
            '<c:key>EntityMoniker</c:key>',
            '<c:value i:type="a:EntityReference">',
            '<a:Id>', opts.id, '</a:Id>',
            '<a:LogicalName>', opts.entityName, '</a:LogicalName>',
            '<a:Name i:nil="true" />',
            '</c:value>',
            '</a:KeyValuePairOfstringanyType>',
            '<a:KeyValuePairOfstringanyType>',
            '<c:key>State</c:key>',
            '<c:value i:type="a:OptionSetValue">',
            '<a:Value>', opts.stateCode, '</a:Value>',
            '</c:value>',
            '</a:KeyValuePairOfstringanyType>',
            '<a:KeyValuePairOfstringanyType>',
            '<c:key>Status</c:key>',
            '<c:value i:type="a:OptionSetValue">',
            '<a:Value>', opts.statusCode, '</a:Value>',
            '</c:value>',
            '</a:KeyValuePairOfstringanyType>',
            '</a:Parameters>',
            '<a:RequestId i:nil="true"/>',
            '<a:RequestName>SetState</a:RequestName>',
            '</request>',
            '</Execute>'].join("");

        var async = !!opts.async;

        return doSoapRequest(request, async, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var fetch = function (opts) {
        if (!isNonEmptyString(opts.fetchXml)) {
            throw new Error("fetchXml parameter was not provided. ");
        }

        var request = [
            '<Execute xmlns="http://schemas.microsoft.com/xrm/2011/Contracts/Services">',
            '<request i:type="a:RetrieveMultipleRequest"',
            ' xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts" ',
            ' xmlns:i="http://www.w3.org/2001/XMLSchema-instance">',
            '<a:Parameters xmlns:c="http://schemas.datacontract.org/2004/07/System.Collections.Generic">',
            '<a:KeyValuePairOfstringanyType>',
            '<c:key>Query</c:key>',
            '<c:value i:type="a:FetchExpression">',
            '<a:Query>', xmlEncode(opts.fetchXml), '</a:Query>',
            '</c:value>',
            '</a:KeyValuePairOfstringanyType>',
            '</a:Parameters>',
            '<a:RequestId i:nil="true"/>',
            '<a:RequestName>RetrieveMultiple</a:RequestName>',
            '</request>',
            '</Execute>'].join("");

        var async = !!opts.async;

        return doSoapRequest(request, async, function (result) {
            var fetchResults = getFetchResults(result);

            if (isFunction(opts.successCallback)) {
                opts.successCallback(fetchResults);
            }

            if (!async) {
                return fetchResults;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var retrieve = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        var select = opts.select == null
            ? ""
            : concatOdataFields(opts.select, "select");

        var expand = opts.expand == null
            ? ""
            : concatOdataFields(opts.expand, "expand");

        var odataQuery = "";

        if (select.length > 0 || expand.length > 0) {
            odataQuery = "?";
            if (select.length > 0) {
                odataQuery += "$select=" + select;

                if (expand.length > 0) {
                    odataQuery += "&";
                }
            }

            if (expand.length > 0) {
                odataQuery += "$expand=" + expand;
            }
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set(guid'" + opts.id + "')" + odataQuery,
            type: "GET",
            async: !!opts.async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var retrieveMultiple = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        var odataQuery = "";
        if (opts.odataQuery != null) {
            if (!isString(opts.odataQuery)) {
                throw new Error("odataQuery parameter must be a string. ");
            }

            if (opts.odataQuery.charAt(0) != "?") {
                odataQuery = "?" + opts.odataQuery;
            } else {
                odataQuery = opts.odataQuery;
            }
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set" + odataQuery,
            type: "GET",
            async: !!opts.async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result.results);
            }

            if (!opts.async) {
                return result.results;
            }

            if (result.__next != null) {
                opts.odataQuery = result.__next.substring((clientUrl + odataEndpoint + "/" + opts.entityName + "Set").length);
                retrieveMultiple(opts);
            } else {
                if (isFunction(opts.completionCallback)) {
                    opts.completionCallback();
                }
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var createRecord = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (opts.entity === null || opts.entity === undefined) {
            throw new Error("entity parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + 'Set',
            type: "POST",
            data: window.JSON.stringify(opts.entity),
            async: !!opts.async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var updateRecord = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        if (opts.entity === null || opts.entity === undefined) {
            throw new Error("entity parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set(guid'" + opts.id + "')",
            type: "POST",
            method: "MERGE",
            data: window.JSON.stringify(opts.entity),
            async: !!opts.async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var deleteRecord = function (opts) {

        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set(guid'" + opts.id + "')",
            type: "POST",
            method: "DELETE",
            async: !!opts.async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var associate = function (opts) {

        if (!isNonEmptyString(opts.entity1Id)) {
            throw new Error("entity1Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity1Name)) {
            throw new Error("entity1Name parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity2Id)) {
            throw new Error("entity2Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity2Name)) {
            throw new Error("entity2Name parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.relationshipName)) {
            throw new Error("relationshipName parameter was not provided. ");
        }

        var entity2Uri = {
            uri: clientUrl + odataEndpoint + "/" + opts.entity2Name + "Set(guid'" + opts.entity2Id + "')"
        };

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entity1Name + "Set(guid'" + opts.entity1Id + "')/$links/" + opts.relationshipName,
            type: "POST",
            data: window.JSON.stringify(entity2Uri),
            async: !!opts.async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var disassociate = function (opts) {

        if (!isNonEmptyString(opts.entity1Id)) {
            throw new Error("entity1Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity1Name)) {
            throw new Error("entity1Name parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity2Id)) {
            throw new Error("entity2Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.relationshipName)) {
            throw new Error("relationshipName parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entity1Name + "Set(guid'" + opts.entity1Id + "')/$links/" + opts.relationshipName + "(guid'" + opts.entity2Id + "')",
            type: "POST",
            method: "DELETE",
            async: !!opts.async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.async) {
                return result;
            }
        }, function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    // Toolkit's public members
    return {
        context: context,
        serverUrl: clientUrl,
        retrieve: retrieve,
        retrieveMultiple: retrieveMultiple,
        createRecord: createRecord,
        updateRecord: updateRecord,
        deleteRecord: deleteRecord,
        associate: associate,
        disassociate: disassociate,
        setState: setState,
        execute: execute,
        fetch: fetch
    };
})(window);

/************** udo_process.js ******************************************/
var MCS = MCS || {};
MCS.Scripts = MCS.Scripts || {};

MCS.Scripts.Process = function () {
    var serverUrl = null;

    var DataTypes = {
        Bool: "boolean",
        Int: "int",
        String: "string",
        DateTime: "dateTime",
        EntityReference: "EntityReference",
        OptionSet: "OptionSetValue",
        Money: "Money",
        Guid: "guid"
    };

    var soapParams = function (paramArray, genericNSPrefix, schemaNSPrefix) {

        var xmlEncode = function (input) {
            var between = function (i, a, b) { return (i > a && i < b); };
            if (typeof input === "undefined" || input === null || input == '') return '';

            var output = '';
            for (var i = 0; i < input.length; i++) {
                var c = input.charCodeAt(i);
                if (between(c, 96, 123) || between(c, 64, 91) || between(c, 47, 58) || between(c, 43, 47) || c == 95 || c == 32) {
                    output += String.fromCharCode(c);
                } else {
                    output += "&#" + c + ";";
                }
            }
            return output;
        };

        var params = "";
        var value = "";

        if (paramArray) {
            // Add each input param
            for (var i = 0; i < paramArray.length; i++) {
                var param = paramArray[i];
                var includeNS = false;
                var type = ":" + param.Type;
                var typeNS = "http://www.w3.org/2001/XMLSchema";

                switch (param.Type) {
                    case "dateTime":
                        value = param.Value.toISOString();
                        type = schemaNSPrefix + type;
                        includeNS = true;
                        break;
                    case "EntityReference":
                        type = "a" + type;
                        value = "<a:Id>" + param.Value.id + "</a:Id><a:LogicalName>" + param.Value.entityType + "</a:LogicalName><a:Name i:nil='true' />";
                        break;
                    case "OptionSetValue":
                    case "Money":
                        type = "a" + type;
                        value = "<a:Value>" + param.Value + "</a:Value>";
                        break;
                    case "guid":
                        type = schemaNSPrefix + type;
                        value = param.Value;
                        includNS = true;
                        typeNS = "http://schemas.microsoft.com/2003/10/Serialization/";
                        break;
                    case "string":
                        type = schemaNSPrefix + type;
                        value = xmlEncode(param.Value);
                        includeNS = true;
                        break;
                    default:
                        type = schemaNSPrefix + type;
                        value = param.Value;
                        includeNS = true;
                        break;
                }

                params += "<a:KeyValuePairOfstringanyType>" +
                    "<" + genericNSPrefix + ":key>" + param.Key + "</" + genericNSPrefix + ":key>" +
                    "<" + genericNSPrefix + ":value i:type='" + type + "'";
                if (includeNS) params += " xmlns:" + schemaNSPrefix + "='" + typeNS + "'";
                params += ">" + value + "</" + genericNSPrefix + ":value>" +
                    "</a:KeyValuePairOfstringanyType>";
            }
        }

        return "<a:Parameters xmlns:" + genericNSPrefix + "='http://schemas.datacontract.org/2004/07/System.Collections.Generic'>" +
            params + "</a:Parameters>";
    };

    var soapExecute = function (requestXml) {
        return "<Execute xmlns='http://schemas.microsoft.com/xrm/2011/Contracts/Services' xmlns:i='http://www.w3.org/2001/XMLSchema-instance'>" +
            requestXml + "</Execute>";
    };

    var soapEnvelope = function (message) {
        return "<s:Envelope xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'>" +
            "<s:Body>" + message + "</s:Body>" +
            "</s:Envelope>";
    };

    var soapActionRequest = function (action, inputParams) {
        return "<request xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts'>" +
            soapParams(inputParams, 'b', 'c') +
            "<a:RequestId i:nil='true' />" +
            "<a:RequestName>" + action + "</a:RequestName>" +
            "</request>";
    };

    var soapExecuteWorkflowRequest = function (workflowId, recordId) {
        return "<request i:type='b:ExecuteWorkflowRequest' xmlns:a='http://schemas.microsoft.com/xrm/2011/Contracts' xmlns:b='http://schemas.microsoft.com/crm/2011/Contracts'>" +
            soapParams([{ Key: "EntityId", Type: DataTypes.Guid, Value: recordId },
            { Key: "WorkflowId", Type: DataTypes.Guid, Value: workflowId }], 'c', 'd') +
            "<a:RequestId i:nil='true' />" +
            "<a:RequestName>ExecuteWorkflow</a:RequestName>" +
            "</request>";
    };

    var execCrmSoapRequest = function (soapMessage) {
        if (serverUrl == null) {
            serverUrl = Xrm.Page.context.getClientUrl();
            serverUrl += "/XRMServices/2011/Organization.svc/web";
            serverUrl = serverUrl.replace("//XRMServices", "/XRMServices");
        }

        var options = {
            url: serverUrl,
            type: "POST",
            dataType: "xml",
            data: soapMessage,
            processData: false,
            global: false,
            beforeSend: function (xhr) {
                xhr.setRequestHeader('SOAPAction', 'http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute');
                xhr.setRequestHeader("Accept", "application/xml, text/xml */*");
                xhr.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
            }
        };

        return $.ajax(options);
        return result;
    };

    var callAction = function (action, inputParams) {
        var dfd = $.Deferred();

        execCrmSoapRequest(soapEnvelope(soapExecute(soapActionRequest(action, inputParams))))
            .done(function (a, b, xhr) {
                var result = getValues(xhr.responseXML);
                dfd.resolve(result, b, xhr);
            })
            .fail(function (err) {
                dfd.reject(err);
            });

        return dfd.promise();
    };

    var getValues = function (xmlData) {
        var XmlToEntity = function (node) {
            try {
                //ToDo: This code needs to be validated
                var entity = {
                    logicalName: node.getElementsByTagName("a:LogicalName")[0].text(),
                    id: node.getElementsByTagName("a:Id")[0].text(),
                    attributes: getValues(node.getElementsByTagName("a:Attributes")[0])
                };
            } catch (err) {
                return null;
            }
            try {
                var formattedValuesNode = node.getElementsByTagName("a:FormattedValues");
                if (formattedValuesNode != null && formattedValuesNode.length > 0) {
                    entity.formattedValues = getValues(formattedValuesNode);
                }
            } catch (err) { }
            return entity;
        };

        var XmlToEntities = function (node) {
            var xmlEntities = node.getElementsByTagName("a:Entity");
            var entities = [];
            for (var i = 0; i < xmlEntities.length; i++) {
                entities[i] = XmlToEntity(xmlEntities[i]);
            }
            return entities;
        };

        var kvps = xmlData.getElementsByTagName("a:KeyValuePairOfstringanyType");
        if (typeof kvps === "undefined" || kvps === null || kvps.length == 0) {
            kvps = xmlData.getElementsByTagName("KeyValuePairOfstringanyType");
        }
        if (typeof kvps === "undefined" || kvps === null || kvps.length == 0) {
            kvps = [];
        } else {
            kvps = kvps[0].parentNode.childNodes;
        }

        var result = {};
        for (var i = 0; i < kvps.length; i++) {
            var key = $(kvps[i].childNodes[0]).text();
            var valueObj = $(kvps[i].childNodes[1]);
            var typeNode = valueObj.attr("i:type");
            // continue if no type (like null values)
            if (typeof typeNode == "undefined" || typeNode == null) continue;
            // get the type from the node
            var type = valueObj.attr("i:type").toLowerCase();
            type = type.substring(type.indexOf(":") + 1);

            // setup value variable.
            var value = "";
            if (type == "aliasedvalue") {
                for (var j = 0; j < valueObj[0].childNodes.length; j++) {
                    if (valueObj[0].childNodes[j].tagName == "a:Value") {
                        valueObj = $(valueObj.childNodes[j]);
                        break;
                    }
                }
                // reset type using the aliasedvalue result
                type = valueObj.attr("i:type").toLowerCase();
                type = type.substring(type.indexOf(":") + 1);
            }
            switch (type) {
                case "entity":
                    value = XmltoEntity(valueObj);
                    break;
                case "entitycollection":
                    value = XmlToEntities(valueObj[0]);
                    break;
                case "entityreference":
                    value = {
                        id: $(valueObj[0].childNodes[0]).text(),
                        entityType: $(valueObj[0].childNodes[1]).text()
                    };
                    if (valueObj[0].childNodes[2]) value.name = $(valueObj[0].childNodes[2]).text();
                    break;
                case "datetime":
                    value = new Date(valueObj.text());
                    break;
                case "decimal":
                case "double":
                case "int":
                case "money":
                case "optionsetvalue":
                    value = Number(valueObj.text());
                    break;
                case "boolean":
                    value = valueObj.text().toLowerCase() == "true";
                    break;
                default: //string
                    value = valueObj.text();
                    break;
            }

            result[key] = value;
        }
        return result;
    };

    var callWorkflow = function (workflowId, recordId) {
        return execCrmSoapRequest(soapEnvelope(soapExecute(soapExecuteWorkflowRequest(workflowId, recordId))));
    };

    return {
        DataType: DataTypes,
        ExecuteAction: callAction,
        ExecuteWorkflow: callWorkflow
    };
}();

/*
var Initialize = function () {

    var requestName = "Your_actionname",

    var requestParams =
        [{
            Key: "ParentEntityReference",
            Type: Va.Udo.Crm.Scripts.Process.DataType.EntityReference,
            Value: { id: entityId, entityType: entityName }
        }]

    MCS.Scripts.Process.ExecuteAction(requestName, requestParams)
        .done(function (response) { onResponse(response, requestName) })
        .fail(function (err) {
            $('#loadingGifDiv').hide();
            if (Debug == false)
                $('#notFoundDiv').text("An error occurred while attempting to process this request. Please refresh the page and try again. If this error persists, please contact the application support team.");
            else
                $('#notFoundDiv').text(err.responseText);

            $('#notFoundDiv').show();
        });
};

function onResponse(responseObject, requestName) {
    $('#loadingGifDiv').hide();
    if (responseObject.DataIssue != false || responseObject.Timeout != false || responseObject.Exception != false) {
        $('#notFoundDiv').text(responseObject.ResponseMessage);
        $('#notFoundDiv').show();
    } else {
        //Do whatever
    }
}
*/
//If the SDK namespace object is not defined, create it.
if (typeof (MCS) == "undefined")
    MCS = {};
// Create Namespace container for functions in this library;
if (typeof (MCS.mcs_Service_Activity_OnSave) == "undefined")
    MCS.mcs_Service_Activity_OnSave = {};

MCS.mcs_Service_Activity_OnSave.SetScheduled = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var resources = formContext.getAttribute("resources").getValue();
    if (resources != null)
        formContext.getAttribute("cvt_scheduled").setValue(true);
};

//If the SDK namespace object is not defined, create it.
if (typeof MCS == "undefined")
    MCS = {};
// Create Namespace container for functions in this library;
if (typeof MCS.mcs_Service_Activity_OnLoad == "undefined")
    MCS.mcs_Service_Activity_OnLoad = {};

MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_CREATE = 1;
MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_UPDATE = 2;
MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_READ_ONLY = 3;
MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_DISABLED = 4;

//Global Variables
var totalPatients = new Array();
var totalGroupPatients = new Array();
MCS.Patients = [];
var saveOption = "";
var Depth = 1;

//This onLoad function is the master function that coordinates the actual scripts that run
MCS.mcs_Service_Activity_OnLoad.OnLoad = function (executionContext) {
    debugger;
    var formContext = executionContext.getFormContext();
    //Add Scripting events to fields for when fields change
    formContext.getAttribute("cvt_type").addOnChange(MCS.mcs_Service_Activity.CVTtoHome);
    formContext.getAttribute("mcs_groupappointment").addOnChange(MCS.mcs_Service_Activity.GroupAppt);
    formContext.getAttribute("mcs_groupappointment").addOnChange(MCS.mcs_Service_Activity.EnableSchedulingPackage);
    formContext.getAttribute("mcs_groupappointment").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("mcs_groupappointment").addOnChange(MCS.mcs_Service_Activity.CreateName);
    formContext.getAttribute("cvt_telehealthmodality").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("mcs_relatedsite").addOnChange(MCS.mcs_Service_Activity.EnableSchedulingPackage);
    formContext.getAttribute("mcs_relatedsite").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("mcs_relatedprovidersite").addOnChange(MCS.mcs_Service_Activity.EnableSchedulingPackage);
    formContext.getAttribute("mcs_relatedprovidersite").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("mcs_servicetype").addOnChange(MCS.mcs_Service_Activity.EnableServiceSubType);
    formContext.getAttribute("mcs_servicetype").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("mcs_servicetype").addOnChange(MCS.mcs_Service_Activity.CreateName);
    formContext.getAttribute("mcs_servicesubtype").addOnChange(MCS.mcs_Service_Activity.EnableSchedulingPackage);
    formContext.getAttribute("mcs_servicesubtype").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("mcs_servicesubtype").addOnChange(MCS.mcs_Service_Activity.CreateName);
    formContext.getAttribute("cvt_relatedproviderid").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("cvt_relatedschedulingpackage").addOnChange(MCS.mcs_Service_Activity.GetSchedulingPackageData);
    formContext.getAttribute("cvt_relatedschedulingpackage").addOnChange(MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup);
    formContext.getAttribute("cvt_relatedschedulingpackage").addOnChange(MCS.mcs_Service_Activity.ClearResources);
    formContext.getAttribute("cvt_relatedschedulingpackage").addOnChange(MCS.mcs_Service_Activity.filterSubGrid);
    formContext.getAttribute("resources").addOnChange(MCS.mcs_Service_Activity.GetProviderSite);
    formContext.getAttribute("resources").addOnChange(MCS.mcs_Service_Activity.GetProviderFromResource);
    formContext.getAttribute("resources").addOnChange(MCS.mcs_Service_Activity.SetProviderSite);
    formContext.getAttribute("resources").addOnChange(MCS.mcs_Service_Activity.ParseResources);
    formContext.getAttribute("customers").addOnChange(MCS.mcs_Service_Activity.BlockAddPatient);
    formContext.getAttribute("cvt_patientsiteresourcesrequired").addOnChange(MCS.mcs_Service_Activity.HandlePatientSiteResourcesRequiredChange);
    formContext.getAttribute("cvt_telephonecall").addOnChange(MCS.mcs_Service_Activity_OnLoad.PhoneModalityDisplayCheck);
    formContext.getAttribute("mcs_groupappointment").addOnChange(MCS.mcs_Service_Activity_OnLoad.PhoneModalityDisplayCheck);
    formContext.getAttribute("cvt_type").addOnChange(MCS.mcs_Service_Activity_OnLoad.PhoneCallCheck);
    formContext.getAttribute("cvt_type").addOnChange(MCS.mcs_Service_Activity_OnLoad.PhoneModalityDisplayCheck);
    formContext.getAttribute("cvt_telephonecall").addOnChange(MCS.mcs_Service_Activity_OnLoad.ToggleGroupTelephone);
    formContext.getAttribute("cvt_telehealthmodality").addOnChange(MCS.mcs_Service_Activity_OnLoad.ToggleGroupTelephone);
    formContext.getAttribute("tmp_technologytype").addOnChange(MCS.mcs_Service_Activity_OnLoad.TechnologyTypeOnChange);
    formContext.getAttribute("cvt_donotallowemails").addOnChange(MCS.mcs_Service_Activity_OnLoad.TechnologyTypeOnChange);

    //Duane Muchenje 9/9/2020
    //formContext.getAttribute("cvt_telehealthmodality").addOnChange(MCS.mcs_Service_Activity.TelehealthCheck);

    //Run the following functions when the form loads
    MCS.mcs_Service_Activity.EnableServiceSubType(executionContext);
    MCS.mcs_Service_Activity.EnableSchedulingPackage(executionContext);
    MCS.mcs_Service_Activity.GroupAppt(executionContext);
    MCS.mcs_Service_Activity_OnLoad.SetDefaultDateTime(executionContext);
    MCS.mcs_Service_Activity.GetSchedulingPackageData(executionContext);
    MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup(executionContext);
    MCS.mcs_Service_Activity.CVTtoHome(executionContext);
    MCS.mcs_Service_Activity_OnLoad.ShowHideCancelRemarks(executionContext);
    MCS.mcs_Service_Activity_OnLoad.RemoveNotification(executionContext);
    MCS.mcs_Service_Activity_OnLoad.ShowMVI(executionContext);
    MCS.mcs_Service_Activity_OnLoad.LoadPatients(executionContext);
    MCS.mcs_Service_Activity_OnLoad.ResetPatients(executionContext);
    MCS.mcs_Service_Activity_OnLoad.ValidatePreselectedPatient(executionContext);
    MCS.mcs_Service_Activity.HandlePatientSiteResourcesRequiredChange(executionContext);
    MCS.mcs_Service_Activity_OnLoad.PhoneModality(executionContext);
    //MCS.mcs_Service_Activity_OnLoad.MCS.mcs_Service_Activity.TelehealthCheck(executionContext);


    formContext.getAttribute("cvt_patuserduz").setValue(null);
    formContext.getAttribute("cvt_prouserduz").setValue(null);
    formContext.getAttribute("cvt_samltoken").setValue(null);

    formContext.getAttribute("cvt_patuserduz").setSubmitMode("never");
    formContext.getAttribute("cvt_prouserduz").setSubmitMode("never");
    formContext.getAttribute("cvt_samltoken").setSubmitMode("never");

    var appointmentmodalityVisible = formContext.getControl("tmp_appointmentmodality");
    if (formContext.ui.getFormType() !== 1) {
        appointmentmodalityVisible.setDisabled(true);
    }
};


//If the Service is not loaded, default the start and end time to 8:30-9:30
MCS.mcs_Service_Activity_OnLoad.SetDefaultDateTime = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Set Default Datetime if the Scheduling Package Service has not been loaded yet. 
    if (formContext.getAttribute("serviceid").getValue() == null) {
        MCS.cvt_Common.DateTime(executionContext, 'scheduledstart', 8, 30);
        MCS.cvt_Common.DateTime(executionContext, 'scheduledend', 9, 30);
        formContext.getAttribute("scheduleddurationminutes").setValue(60);
    }
};

//unsupported modification to clear out the incorrect notification that the resources do not match the service rules listed (they are in the appointments per design)
MCS.mcs_Service_Activity_OnLoad.RemoveNotification = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Group and Update Form
    if (formContext.getAttribute("mcs_groupappointment").getValue() === true && formContext.ui.getFormType() !== 1) {
        var notificationsList = Sys.Application.findComponent('crmNotifications');
        if (notificationsList) {
            //Hide message
            notificationsList.SetVisible(false);
        }
    }
};
MCS.mcs_Service_Activity_OnLoad.PhoneModality = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() === 1) {
        //initially hide all the Telephone Modality Fields
        //.setRequiredLevel("required")
        formContext.getControl("cvt_telephonecall").setVisible(false);
        formContext.getControl("cvt_patientverifiedphone").setVisible(false);
        formContext.getAttribute("cvt_patientverifiedphone").setRequiredLevel("none");
        formContext.getControl("cvt_patientverifiedemail").setVisible(false);
        formContext.getControl("cvt_mobilephone").setVisible(false);
        formContext.getControl("cvt_businessphone").setVisible(false);
        formContext.getControl("cvt_homephone").setVisible(false);
        formContext.getControl("tmp_technologytype").setVisible(false);
        //formContext.getControl("cvt_technologytype").setVisible(false);
        formContext.getControl("cvt_donotallowemails").setVisible(false);
        formContext.getControl("cvt_email").setVisible(false);
    }
};

MCS.mcs_Service_Activity_OnLoad.ToggleGroupTelephone = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var phonecall = formContext.getAttribute("cvt_telephonecall").getValue();
    var group = formContext.getAttribute("mcs_groupappointment").getValue();
    var type = formContext.getAttribute("cvt_type").getValue();

    var patientResourcesRequiredControl = formContext.getControl("cvt_patientsiteresourcesrequired");

    //var isPatientResourcesRequired = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue();
    var isPatientResourcesRequired = formContext.getAttribute("cvt_patientsiteresourcesrequired");

    //clear and hide the 'group' control if 'Telephone Appointment' is selected
    //unhide if 'Telephone Appointment' is deselected
    if (phonecall === true) {
        formContext.getAttribute("mcs_groupappointment").setValue(false);
        formContext.getControl("mcs_groupappointment").setVisible(false);

        formContext.getAttribute("cvt_telehealthmodality").setValue(null);;
        formContext.getControl("cvt_telehealthmodality").setVisible(false);;
    }
    else {
        if (type === true) {
            formContext.getControl("mcs_groupappointment").setVisible(true);
            formContext.getControl("cvt_telehealthmodality").setVisible(true);
            formContext.getAttribute("cvt_telehealthmodality").setValue(false);
        }

    }

    //clear and hide the 'Telephone Appointment' control if 'Group'  or 'CVT' is selected
    //unhide if 'Group' is deselected
    if ((group === true) || (type === false)) {
        formContext.getAttribute("cvt_telephonecall").setValue(false);
        formContext.getAttribute("cvt_patientverifiedphone").setRequiredLevel("none");
        formContext.getControl("cvt_telephonecall").setVisible(false);
    }
    else {
        if (isPatientResourcesRequired != null) {
            var isPatientResourcesRequiredVal = isPatientResourcesRequired.getValue();

            if (isPatientResourcesRequiredVal != null) {
                if (isPatientResourcesRequiredVal === true) {
                    //formContext.getControl("mcs_groupappointment").setVisible(false);
                }
                else {
                    formContext.getControl("cvt_telephonecall").setVisible(true);
                }
            }
            else {
                formContext.getControl("cvt_telephonecall").setVisible(true);
            }

        }
        else {
            formContext.getControl("cvt_telephonecall").setVisible(true);
        }




        //if (isPatientResourcesRequired === true) {
        //	formContext.getControl("mcs_groupappointment").setVisible(false);
        //}
        //else {
        //	formContext.getControl("cvt_telephonecall").setVisible(true);
        //}


        formContext.getControl("cvt_telephonecall").setVisible(true);
    }
};

MCS.mcs_Service_Activity_OnLoad.PhoneCallCheck = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var phonecall = formContext.getAttribute("cvt_telephonecall").getValue();
    var type = formContext.getAttribute("cvt_type").getValue();
    if (type === false) {
        formContext.getAttribute("cvt_telephonecall").setValue(false);
        formContext.getControl("cvt_telephonecall").setVisible(false);
    }
    else {
        formContext.getControl("cvt_telephonecall").setVisible(true);
    }
};

MCS.mcs_Service_Activity_OnLoad.TechnologyTypeOnChange = function (formContext) {

    if (!formContext.getAttribute)
        formContext = formContext.getFormContext();

    var techType = formContext.getAttribute("tmp_technologytype");
    formContext.getAttribute("tmp_sipaddress").setRequiredLevel("none");
    formContext.getAttribute("tmp_staticvmrlink").setRequiredLevel("none");
    formContext.getAttribute("cvt_email").setRequiredLevel("none");
    formContext.getAttribute("cvt_donotallowemails").setRequiredLevel("required");

    if (techType != null) {
        var techTypeVal = techType.getValue();

        if (techTypeVal == 100000000) { //SIP ADDRESS
            formContext.getControl("tmp_sipaddress").setDisabled(false);
            formContext.getAttribute("tmp_sipaddress").setRequiredLevel("required");
            formContext.getAttribute("cvt_donotallowemails").setValue(false);
            formContext.getControl("cvt_donotallowemails").setDisabled(true);
            formContext.getControl("cvt_email").setDisabled(true);
            formContext.getControl("tmp_staticvmrlink").setDisabled(true);
        }
        else if (techTypeVal == 917290003) { //Personal Device
            formContext.getControl("cvt_donotallowemails").setDisabled(true);
            formContext.getAttribute("cvt_donotallowemails").setValue(true);
            formContext.getControl("tmp_staticvmrlink").setDisabled(true);
            formContext.getControl("tmp_sipaddress").setDisabled(true);
            //formContext.getAttribute("tmp_sipaddress").setRequiredLevel("none");
            formContext.getControl("cvt_email").setDisabled(false);
            formContext.getAttribute("cvt_email").setRequiredLevel("required");
        }
        else if (techTypeVal == 917290002) { //VA Issued Device
            formContext.getControl("tmp_sipaddress").setDisabled(true);
            //formContext.getAttribute("tmp_sipaddress").setRequiredLevel("none");
            formContext.getControl("cvt_donotallowemails").setDisabled(false);
            var doNotAllowEmail = formContext.getAttribute("cvt_donotallowemails");
            if (doNotAllowEmail != null) {
                var doNotAllowEmailVal = doNotAllowEmail.getValue();
                if (!doNotAllowEmailVal) {
                    formContext.getControl("cvt_email").setDisabled(true);
                    formContext.getControl("tmp_staticvmrlink").setDisabled(false);
                    formContext.getAttribute("tmp_staticvmrlink").setRequiredLevel("required");
                }
                else {
                    formContext.getControl("cvt_email").setDisabled(false);
                    formContext.getAttribute("cvt_email").setRequiredLevel("required");
                    //formContext.getAttribute("tmp_staticvmrlink").setValue(null);
                    formContext.getControl("tmp_staticvmrlink").setDisabled(true);
                }
            }
        }
    }
}

MCS.mcs_Service_Activity_OnLoad.PhoneModalityDisplayCheck = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var phonecall = formContext.getAttribute("cvt_telephonecall").getValue();
    var group = formContext.getAttribute("mcs_groupappointment").getValue();
    var type = formContext.getAttribute("cvt_type").getValue();

    if (group === false && type === true) //  must be a non-group VVC *phone call*
    {
        if (phonecall) {
            formContext.getAttribute("cvt_patientverifiedphone").setRequiredLevel("required");
            formContext.getAttribute("tmp_technologytype").setRequiredLevel("none");
            // Lock 
            formContext.getControl("cvt_businessphone").setDisabled(true);
            formContext.getControl("cvt_homephone").setDisabled(true);
        }
        else {
            formContext.getAttribute("tmp_technologytype").setRequiredLevel("required");
            formContext.getAttribute("cvt_patientverifiedphone").setRequiredLevel("none");
        }

        formContext.getControl("cvt_patientverifiedphone").setVisible(true);
        formContext.getControl("tmp_technologytype").setVisible(true);
        formContext.getControl("cvt_patientverifiedemail").setVisible(true);
        formContext.getControl("cvt_mobilephone").setVisible(true);
        formContext.getControl("cvt_businessphone").setVisible(true);
        formContext.getControl("cvt_homephone").setVisible(true);
        formContext.getControl("cvt_donotallowemails").setVisible(true);
        formContext.getControl("cvt_email").setVisible(true);

        formContext.getControl("tmp_staticvmrlink").setVisible(true);
        formContext.getControl("tmp_sipaddress").setVisible(true);
        formContext.getControl("tmp_timezone").setVisible(true);

        if (formContext.ui.getFormType() === MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_CREATE) {

            MCS.mcs_Service_Activity_OnLoad.PopulatePhoneModalityFields(executionContext);
        }
        else {
            MCS.mcs_Service_Activity_OnLoad.SetDisabledContactInfoFields(formContext);
        }

    }
    else {

        if (formContext.ui.getFormType() === MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_CREATE) {
            formContext.getAttribute("cvt_mobilephone").setValue(null);
            formContext.getAttribute("cvt_businessphone").setValue(null);
            formContext.getAttribute("cvt_homephone").setValue(null);
            formContext.getAttribute("tmp_technologytype").setValue(null);
            formContext.getAttribute("cvt_donotallowemails").setValue(false);
            formContext.getAttribute("cvt_email").setValue(null);
        }

        MCS.mcs_Service_Activity_OnLoad.SetInvisibleContactInfoFields(formContext);
    }
};

MCS.mcs_Service_Activity_OnSave.SetPIDandCID = function (formContext) {
    if (!formContext.getAttribute)
        formContext = formContext.getFormContext();

    var PID = formContext.getAttribute("tmp_patientindicateddate").getValue();
    var PIDObj = formContext.getAttribute("tmp_patientindicateddate");
    var CID = formContext.getAttribute("cvt_clinicallyindicateddate").getValue();
    var CIDObj = formContext.getAttribute("cvt_clinicallyindicateddate");
    var proIEN = formContext.getAttribute("cvt_proconsultien").getValue();
    var patIEN = formContext.getAttribute("cvt_patconsultien").getValue();
    var proRTCId = formContext.getAttribute("cvt_prortcid").getValue();
    var patRTCId = formContext.getAttribute("cvt_patrtcid").getValue();

    if (PID == null && proIEN == null && patIEN == null && proRTCId == null && patRTCId == null) {
        CIDObj.setValue(MCS.mcs_Service_Activity_OnSave.ConvertDateToCIDFormat(Date.now()));
    }
    //else if (PID == null && (proIEN != null || patIEN != null || proRTCId != null || patRTCId != null)) {
    //    var date = new Date(CID.substr(0, 10));
    //    var newDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60 * 1000));
    //    PIDObj.setValue(newDate);
    //    formContext.getControl("tmp_patientindicateddate").setDisabled(true);
    //}
    else if (PID != null) {
        CIDObj.setValue(MCS.mcs_Service_Activity_OnSave.ConvertDateToCIDFormat(PID));
    }
    //else if (PID != null && proIEN == null && patIEN == null && proRTCId == null && patRTCId == null) {
    //    CIDObj.setValue(MCS.mcs_Service_Activity_OnSave.ConvertDateToCIDFormat(PID));
    //}
    //else if (PID != null && (proIEN != null || patIEN != null || proRTCId != null || patRTCId != null)) {
    //    var date = new Date(CID.substr(0, 10));
    //    var newDate = new Date(date.getTime() + (date.getTimezoneOffset() * 60 * 1000));
    //    PIDObj.setValue(newDate);
    //}
}

MCS.mcs_Service_Activity_OnSave.ConvertDateToCIDFormat = function (date) {
    //2019-06-26
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2)
        month = '0' + month;

    if (day.length < 2)
        day = '0' + day;

    return year + '-' + month + '-' + day;// + 't04:00:00.000z';
}

MCS.mcs_Service_Activity_OnLoad.UpdatePatientContactInfo = function (formContext, patientId) {

    if (!formContext.getAttribute)
        formContext = formContext.getFormContext();

    var entity = {};
    entity.cvt_bltablet = (formContext.getAttribute("tmp_sipaddress") != null) ? formContext.getAttribute("tmp_sipaddress").getValue() : null;
    entity.cvt_staticvmrlink = (formContext.getAttribute("tmp_staticvmrlink") != null) ? formContext.getAttribute("tmp_staticvmrlink").getValue() : null;
    entity.cvt_timezone = (formContext.getAttribute("tmp_timezone") != null) ? formContext.getAttribute("tmp_timezone").getValue() : null;
    entity.mobilephone = (formContext.getAttribute("cvt_mobilephone") != null) ? formContext.getAttribute("cvt_mobilephone").getValue() : null;
    entity.telephone1 = (formContext.getAttribute("cvt_businessphone") != null) ? formContext.getAttribute("cvt_businessphone").getValue() : null;
    entity.telephone2 = (formContext.getAttribute("cvt_homephone") != null) ? formContext.getAttribute("cvt_homephone").getValue() : null;
    entity.cvt_tablettype = (formContext.getAttribute("tmp_technologytype") != null) ? formContext.getAttribute("tmp_technologytype").getValue() : null;
    entity.donotemail = (formContext.getAttribute("cvt_donotallowemails") != null) ? !formContext.getAttribute("cvt_donotallowemails").getValue() : null;
    if (!entity.donotemail && formContext.getAttribute("cvt_email") != null && formContext.getAttribute("cvt_email").getValue() != null)
        entity.emailaddress1 = formContext.getAttribute("cvt_email").getValue();

    Xrm.WebApi.online.updateRecord("contact", patientId, entity).then(
        function success(result) {
        },
        function (error) {
            Xrm.Utility.alertDialog(error.message);
        }
    );
}

MCS.mcs_Service_Activity_OnLoad.SetInvisibleContactInfoFields = function (formContext) {

    if (!formContext.getAttribute)
        formContext = formContext.getFormContext();

    //hide all the Telephone Modality Fields
    formContext.getAttribute("cvt_patientverifiedphone").setRequiredLevel("none");
    formContext.getControl("cvt_patientverifiedphone").setVisible(false);
    formContext.getControl("cvt_patientverifiedemail").setVisible(false);
    formContext.getControl("cvt_mobilephone").setVisible(false);
    formContext.getControl("cvt_businessphone").setVisible(false);
    formContext.getControl("cvt_homephone").setVisible(false);
    formContext.getControl("tmp_technologytype").setVisible(false);
    formContext.getAttribute("tmp_technologytype").setRequiredLevel("none");
    formContext.getControl("cvt_donotallowemails").setVisible(false);
    formContext.getControl("cvt_email").setVisible(false);

    formContext.getControl("tmp_staticvmrlink").setVisible(false);
    formContext.getControl("tmp_sipaddress").setVisible(false);
    formContext.getControl("tmp_timezone").setVisible(false);

}

MCS.mcs_Service_Activity_OnLoad.SetDisabledContactInfoFields = function (formContext) {

    if (!formContext.getAttribute)
        formContext = formContext.getFormContext();

    //now disable the fields
    formContext.getControl("cvt_mobilephone").setDisabled(true);
    formContext.getControl("cvt_businessphone").setDisabled(true);
    formContext.getControl("cvt_homephone").setDisabled(true);
    formContext.getControl("tmp_technologytype").setDisabled(true);
    formContext.getControl("cvt_donotallowemails").setDisabled(true);
    formContext.getControl("cvt_email").setDisabled(true);
    formContext.getControl("tmp_staticvmrlink").setDisabled(true);
    formContext.getControl("tmp_sipaddress").setDisabled(true);
    formContext.getControl("tmp_timezone").setDisabled(true);

}

MCS.mcs_Service_Activity_OnLoad.PopulatePhoneModalityFields = function (executionContext) {

    var formContext = executionContext.getFormContext();
    var _patient = formContext.getAttribute("customers").getValue();

    //(Array.isArray(emptyArray) && emptyArray.length)
    //if (_patient != null) {
    if (Array.isArray(_patient) && _patient.length) {
        var patient = _patient[0].id;

        //if we have a patient we can populate the corresponding contact fields
        Xrm.WebApi.retrieveRecord('contact', patient, "?$select=contactid,mobilephone,telephone1,telephone2,cvt_tablettype,donotemail,emailaddress1,cvt_bltablet,cvt_staticvmrlink,cvt_timezone").then(
            function success(result) {
                //console.log("successfully retrieved Patient");
                if (result.cvt_bltablet != null) {
                    formContext.getAttribute("tmp_sipaddress").setValue(result.cvt_bltablet);
                }
                if (result.cvt_staticvmrlink != null) {
                    formContext.getAttribute("tmp_staticvmrlink").setValue(result.cvt_staticvmrlink);
                }
                if (result.cvt_timezone != null) {
                    formContext.getAttribute("tmp_timezone").setValue(result.cvt_timezone);
                }
                if (result.mobilephone != null) {
                    formContext.getAttribute("cvt_mobilephone").setValue(result.mobilephone);
                }
                if (result.telephone1 != null) {
                    formContext.getAttribute("cvt_businessphone").setValue(result.telephone1);
                }
                if (result.telephone2 != null) {
                    formContext.getAttribute("cvt_homephone").setValue(result.telephone2);
                }
                if (result.cvt_tablettype != null) {
                    formContext.getAttribute("tmp_technologytype").setValue(result.cvt_tablettype);
                    // var tablettype = "";
                    // switch (result.cvt_tablettype) {
                    // case 917290002:
                    // tablettype = "VA Issued Device";
                    // break;
                    // case 917290003:
                    // tablettype = "Personal Device";
                    // break;
                    // default:
                    // tablettype = "";
                    // break;
                    // }
                    // formContext.getAttribute("cvt_technologytype").setValue(tablettype);
                }
                if (result.donotemail != null) {

                    formContext.getAttribute("cvt_donotallowemails").setValue(!result.donotemail);
                }
                if (result.emailaddress1 != null) {
                    formContext.getAttribute("cvt_email").setValue(result.emailaddress1);
                }

                MCS.mcs_Service_Activity_OnLoad.TechnologyTypeOnChange(formContext);
            },
            function (error) {
                //console.log("no Patient retrieved");
            }
        )
    }
};

//Read the configuration value from Active Settings to determine whether or not to display the Patient Search (MVI) iFrame as well as the patients field
MCS.mcs_Service_Activity_OnLoad.ShowMVI = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var patObj = formContext.getAttribute("customers");
    var patientExists = patObj.getValue() != null;
    var mviTab = formContext.ui.tabs.get("tab_7");
    //var showMVI = MCS.cvt_Common.MVIConfig();
    var showMVIretrieveTokenDeferred = MCS.cvt_Common.MVIConfig();
    $.when(showMVIretrieveTokenDeferred).done(function (returnData) {
        //debugger;
        if (returnData.success === true) {
            var showMVI = returnData.data.result;
            showMVI = showMVI && !MCS.cvt_Common.AppointmentOccursInPast(executionContext);
            mviTab.setVisible(showMVI);
            formContext.getControl("customers").setDisabled(!showMVI);
            if (showMVI && !patientExists)
                mviTab.setFocus();
            else
                formContext.getControl("cvt_type").setFocus();
        }
    });
    if (patientExists) {
        mviTab.setDisplayState("collapsed");
    }
};

MCS.mcs_Service_Activity_OnLoad.LoadPatients = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var patientObj = formContext.getAttribute("customers");
    var patients = patientObj != null ? patientObj.getValue() : [];
    MCS.Patients = patients;
};

//This function is required in order to ensure the "Patients" Activity Party List does not show empty/duplicate APs - existing CRM bug
MCS.mcs_Service_Activity_OnLoad.ResetPatients = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var cust = formContext.getAttribute("customers").getValue();
    formContext.getAttribute("customers").setValue(cust);
};

MCS.mcs_Service_Activity_OnLoad.ValidatePreselectedPatient = function (executionContext) {
    //debugger;
    //Perform the Patient Validation when the appointment is launched from the patient record/view
    //When the schedule appointment button is clicked from patient record/view, the patient field is populated in the new appointment screen/form, 
    //Hence the selected patient need to be validated on load if the patient is pre - selected[Form type Create only]
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() === MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_CREATE) {
        var veteranAttribute = formContext.getAttribute("customers");

        if (veteranAttribute != null) {
            var veterans = veteranAttribute.getValue();
            if (veterans != null && veterans.length > 0) {
                //Note: The user do not have the option to select more than one patient from the patient view to initiate schedule appointment. 
                //Hence we should have only one patient in this situation or none in case the appointment is created outside of patient view
                if (veterans[0].entityType === "contact")
                    Xrm.WebApi.retrieveRecord('contact', veterans[0].id, "?$select=*").then(
                        function success(data) {
                            var isValid = ValidateRequiredPatientDetails(data);

                            if (!isValid) { //If not valid, clear the Patient field value
                                veteranAttribute.setValue();
                            }
                        },
                        function (error) {
                            //alert(error.message);
                        }
                    );
            }
        }
    }
};

MCS.mcs_Service_Activity_OnLoad.ShowHideCancelRemarks = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var _state = formContext.getAttribute("statecode").getValue();
    var _cancelComments = formContext.getAttribute("cvt_cancelremarks").getValue();
    var _apptType = formContext.getAttribute("cvt_type").getValue();
    formContext.getControl("cvt_providerstationcode").setVisible(false);

    if (formContext.ui.getFormType() === MCS.mcs_Service_Activity_OnLoad.FORM_TYPE_CREATE) {
        formContext.getControl("cvt_cancelremarks").setVisible(false);
    }
    else {
        if ((_state === 2) && (_cancelComments != null)) {  //the appointment is canceled *AND* there are remarks, so show the field
            formContext.getControl("cvt_cancelremarks").setVisible(true);
        } else {  //either the state is not caneled or there are no comments;
            if (_apptType === true) {
                if (_cancelComments != null) {
                    formContext.getControl("cvt_cancelremarks").setVisible(true);
                }
            } else {
                formContext.getControl("cvt_cancelremarks").setVisible(false);
            }
        }
    }
};
///<summary>Helper function: Opens a window for a new Recurring Appointment record using the Information form.</summary>
///<param name="subject" optional="false" type="String">
///Subject associated with the recurring appointment series.
///</param>
///<param name="cvt_serviceactivityid" optional="false" type="String">
///Unique identifier for Service Activity associated with Recurring Appointment. Expected value is a String that matches the pattern for a GUID '/^{?[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}}?$/i'.
///</param>
///<param name="cvt_serviceactivityidname" optional="false" type="String">
///The text to display for the record represented by the cvt_serviceactivityid parameter.
///</param>
//MCS.VIALogin.GettingNewUserDuz = false;

function openNewRecurringAppointmentMaster(subject, serviceActivityID, serviceActivityName) {
    //debugger;
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {

        var entityFormOptions = {};
        entityFormOptions["entityName"] = "recurringappointmentmaster";
        entityFormOptions["formId"] = "4a8cda55-024e-419c-bbe1-9540e0b8e297";

        // Set default values for the Contact form
        var formParameters = {};
        formParameters["subject"] = subject;

        // Set lookup field
        formParameters["cvt_serviceactivityid"] = serviceActivityID; // ID of the user.
        formParameters["cvt_serviceactivityidname"] = serviceActivityName; // Name of the user.
        formParameters["cvt_serviceactivityidtype"] = "serviceappointment"; // Entity name.

        // Open the form.
        Xrm.Navigation.openForm(entityFormOptions, formParameters).then(
            function (success) {
                console.log(success);
            },
            function (error) {
                console.log(error);
            });

        // var p = {};
        // p.formid = "4a8cda55-024e-419c-bbe1-9540e0b8e297"
        // p.subject = subject;
        // p.cvt_serviceactivityid = serviceActivityID;
        // p.cvt_serviceactivityidname = serviceActivityName;
        // Xrm.Navigation.openForm("recurringappointmentmaster", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["formid=4a8cda55-024e-419c-bbe1-9540e0b8e297",
            "subject=" + subject,
            "cvt_serviceactivityid=" + serviceActivityID,
            "cvt_serviceactivityidname=" + serviceActivityName]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        window.open(url + "/main.aspx?etn=recurringappointmentmaster&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
}

//Functions Called by Ribbon Buttons
//Example:
//Calls openNewRecurringAppointmentMaster - called by Ribbon Button "Recurring Service Activity"
function CreateRecurringServiceActivity(formContext) {
    //debugger;
    //var formContext = primaryControl.getFormContext();
    var serviceActivityName = "Recurring " + formContext.getAttribute("subject").getValue();
    openNewRecurringAppointmentMaster(serviceActivityName, formContext.data.entity.getId(), serviceActivityName)
}

//Open Recurring Appointment Master Record - called by Ribbon Button "Edit Series"
EditServiceActivitySeries = function (primaryControl) {
    //debugger;
    var formContext = primaryControl.getFormContext();
    var relatedMaster = formContext.getAttribute("cvt_recurringappointmentsmaster").getValue();
    if (relatedMaster != null)
        Xrm.Navigation.openForm("recurringappointmentmaster", relatedMaster[0].id)
}

ReOpenServiceActivity = function (formContext) {
    //debugger;
    // var formContext = primaryControl.getFormContext();
    var isDataAdmin = MCS.cvt_Common.userHasRoleInList("TSS Data Administrator|System Administrator|TSS Application Administrator");
    var userSettings = Xrm.Utility.getGlobalContext().userSettings;
    if (isDataAdmin || formContext.getAttribute("ownerid").getValue()[0].id === userSettings.userId)
        XrmCore.Commands.Activate.activatePrimaryRecord(formContext.data.entity.getId(), formContext.data.entity.getEntityName());
    // Mscrm.CommandBarActions.activate(formContext.data.entity.getId(), formContext.data.entity.getEntityName());
    else
        MCS.cvt_Common.openDialogOnCurrentRecord(formContext, "00520409-98FB-4A1E-B67C-D3D6783ACB84");
}

CancelServiceActivity = function (formContext) {
    //debugger;
    //var formContext = primaryControl.getFormContext();

    if (MCS != undefined && MCS.VIALogin == undefined)
        MCS.VIALogin = formContext.getControl("WebResource_vialogin").getObject().contentWindow.MCS.VIALogin;

    var regardingField = formContext.getAttribute("mcs_relatedtsa");
    if (regardingField != null && regardingField.getValue() != null) {
        //("The older appointments scheduled with the Archived agreements (TSA) should be canceled directly in VistA system");

        var alertStrings = { confirmButtonLabel: "Yes", text: "The older appointments scheduled with the Archived agreements (TSA) should be canceled directly in VistA system", title: "Archived agreements (TSA)" };
        var alertOptions = { height: 120, width: 260 };
        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
            function success(result) {
                //console.log("Alert dialog closed");
            },
            function (error) {
                //console.log(error.message);
            }
        );

        return;
    }

    formContext.getAttribute("createdon").fireOnChange(); //This is to trigger the MCS.VIALogin.LoginOnCancelAppointment in cvt_viaLogin.js which is registered on change of created on field. calling this way instead of direct function call would attach/register to the vialogin web resource html and users can see the login updates on screen under Vista login section.
    var runVista = MCS.VIALogin.CheckVistaSwitches(formContext);
    var dialogId = "";
    if (!runVista) {
        dialogId = "789CD165-5CAD-49B3-ACF3-42C3D5B31584";
    }
    else {
        var validDuz = MCS.VIALogin.IsValidUserDuz(formContext);
        if (!validDuz) {
            var validToken = MCS.VIALogin.IsValidSamlToken(formContext);
            if (validToken) {
                MCS.VIALogin.Login(formContext);
                //alert("Unable to cancel appointment in Vista until you have logged into Vista.");

                var alertStrings = { confirmButtonLabel: "Yes", text: "Unable to cancel appointment in Vista until you have logged into Vista.", title: "Appointment Cancelation" };
                var alertOptions = { height: 120, width: 260 };
                Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                    function success(result) {
                        //console.log("Alert dialog closed");
                    },
                    function (error) {
                        //console.log(error.message);
                    }
                );
            }
            else {
                MCS.VIALogin.Saml(formContext);
                //alert("Unable to cancel appointment in Vista until you have logged into Vista.");
                var alertStrings = { confirmButtonLabel: "Yes", text: "Unable to cancel appointment in Vista until you have logged into Vista.", title: "Appointment Cancelation" };
                var alertOptions = { height: 120, width: 260 };
                Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                    function success(result) {
                        //console.log("Alert dialog closed");
                    },
                    function (error) {
                        //console.log(error.message);
                    }
                );
            }
        }
        else
            dialogId = "B8A805D8-01B1-4922-80CA-D4E46F2EC836";
    }

    if (dialogId !== "") {
        //Save the duz to the record
        var updateParam = {};
        var patDuz = formContext.getAttribute("cvt_patuserduz").getValue();
        var proDuz = formContext.getAttribute("cvt_prouserduz").getValue();

        if (patDuz != null || patDuz !== "")
            updateParam["cvt_PatUserDuz"] = patDuz;

        if (proDuz != null || proDuz !== "")
            updateParam["cvt_ProUserDuz"] = proDuz;

        //Wait for dialog window to close to refresh form data
        var dialogWindow = MCS.cvt_Common.openDialogOnCurrentRecord(formContext, dialogId);
        var dialogInterval = window.setInterval(function () {
            if (dialogWindow.closed) {
                window.clearInterval(dialogInterval);
                formContext.data.refresh();
            }
        }, 100);
    }
}


CompleteServiceActivity = function (formContext) {
    //debugger;
    //var formContext = primaryControl.getFormContext();

    // var requestName = "cvt_CompleteAppointment";
    // var requestParams =
    // [{
    // Key: "Target",
    // Type: MCS.Scripts.Process.DataType.EntityReference,
    // Value: { id: formContext.data.entity.getId(), entityType: 'serviceappointment' }
    // }];

    var parameters = {};
    var entity = {};
    entity.id = formContext.data.entity.getId();
    entity.entityType = "serviceappointment";
    parameters.entity = entity;

    var cvt_CompleteAppointmentRequest = {
        entity: parameters.entity,

        getMetadata: function () {
            return {
                boundParameter: "entity",
                parameterTypes: {
                    "entity": {
                        "typeName": "mscrm.serviceappointment",
                        "structuralProperty": 5
                    }
                },
                operationType: 0,
                operationName: "cvt_CompleteAppointment"
            };
        }
    };

    Xrm.WebApi.online.execute(cvt_CompleteAppointmentRequest).then(
        function success(result) {
            if (result.ok) {
                formContext.ui.close();
            }
        },
        function (error) {
            // Xrm.Utility.alertDialog(error.message);

            var alertStrings = { confirmButtonLabel: "Yes", text: "Failed to Complete this appointment.  Details: " + error.message, title: "Appointment" };
            var alertOptions = { height: 120, width: 260 };
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                function success(result) {
                    //console.log("Alert dialog closed");
                },
                function (error) {
                    //console.log(error.message);
                }
            );
        }
    );

    // MCS.Scripts.Process.ExecuteAction(requestName, requestParams)
    // .done(function (response) {
    // formContext.ui.close();
    // })
    // .fail(function (err) {
    // //alert("Failed to Complete this appointment.  Details: " + err.responseText);
    // var alertStrings = { confirmButtonLabel: "Yes", text: "Failed to Complete this appointment.  Details: " + err.responseText, title: "Appointment" };
    // var alertOptions = { height: 120, width: 260 };
    // Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
    // function success(result) {
    // //console.log("Alert dialog closed");
    // },
    // function (error) {
    // //console.log(error.message);
    // }
    // );
    // });

}

OnDialogClose = function (dialog, timer, primaryControl) {
    //debugger;
    var formContext = primaryControl.getFormContext();
    if (!dialog || dialog.closed) {
        clearInterval(timer); //stop the timer

        Xrm.WebApi.retrieveRecord("ServiceAppointment", formContext.data.entity.getId(), "?$select=StateCode").then(
            function success(result) {
                saRecord = result;
                //Refresh the form when the state code has changed from Active to Closed/Cancelled from the dialog
                if (saRecord.StateCode != null && (saRecord.StateCode.Value === 1 || saRecord.StateCode.Value === 2)) {
                    window.location.reload(true);
                }
            },
            function (error) {
                window.location.reload(true);
            }
        );

        //CrmRestKit.Retrieve('ServiceAppointment', Xrm.Page.data.entity.getId(), ['StateCode'], false)
        //    .fail(function(err) {
        //        window.location.reload(true);
        //    }).done(function(serviceActivity) {
        //        saRecord = serviceActivity.d;

        //        //Refresh the form when the state code has changed from Active to Closed/Cancelled from the dialog
        //        if (saRecord.StateCode != null && (saRecord.StateCode.Value == 1 || saRecord.StateCode.Value == 2)) {
        //            window.location.reload(true);
        //        }
        //    });
    }
}

SaveSA = function (formContext) {
    //SaveRecord(null, formContext);

    if (MCS != undefined && MCS.VIALogin != undefined)
        MCS.VIALogin.isGrpClinicappt = formContext.getAttribute("mcs_groupappointment").getValue();

    saveOption = {
        saveMode: 1,
        useSchedulingEngine: false
    };

    SaveRecord(formContext, saveOption);

    // formContext.data.save(saveOption).then(function (){
    // console.log('saved');
    // // success
    // }, function (error) {
    // console.log(error);
    // });
    //formContext.data.entity.save(saveOption);
    return;
};

SaveAndCloseSA = function (formContext) {
    //SaveRecord("saveandclose", primaryControl);
    //saveOption = null;

    if (MCS != undefined && MCS.VIALogin != undefined)
        MCS.VIALogin.isGrpClinicappt = formContext.getAttribute("mcs_groupappointment").getValue();

    saveOption = {
        saveMode: 2,
        useSchedulingEngine: false
    };

    SaveRecord(formContext, saveOption);

    // formContext.data.save(saveOption).then(function (){
    // console.log('saved');
    // // success
    // }, function (error) {
    // console.log(error);
    // });

    //formContext.data.entity.save("saveandclose",saveOption);
    return;
};

SaveAndNewSA = function (formContext) {
    //SaveRecord("saveandnew", primaryControl);
    //saveOption = null;

    if (MCS != undefined && MCS.VIALogin != undefined)
        MCS.VIALogin.isGrpClinicappt = formContext.getAttribute("mcs_groupappointment").getValue();

    saveOption = {
        saveMode: 59,
        useSchedulingEngine: false
    };
    SaveRecord(formContext, saveOption);

    // formContext.data.save(saveOption).then(function (){
    // console.log('saved');
    // // success
    // }, function (error) {
    // console.log(error);
    // });

    //formContext.data.entity.save("saveandnew", saveOption);
    return;
}

GetContactDetailsDeferred = function () {

    //debugger;
    var deferred = $.Deferred();

    var returnData = {
        success: true,
        data: {
        }
    };


    Xrm.WebApi.online.retrieveRecord("contact", patients[i].id, "?$select=contactid,cvt_bltablet,cvt_tablettype,donotemail,emailaddress1").then(
        function success(result) {

            var doNotEMail = result.donotemail != null ? result.donotemail : false;

            if (result.cvt_bltablet == null || result.cvt_bltablet === "")
                usingVMR = isHomeMobile;
            if (result.emailaddress1 != null && result.emailaddress1 !== "")
                allowSave = true;
            if (doNotEMail && (!usingVMR || result.cvt_tablettype === 917290002))
                allowSave = true;

            // if (!allowSave) {
            // currentVeteranIndex = i;
            // break;
            // }

            returnData.data.allowSave = allowSave;
            resolve(returnData);
        },
        function (error) {
            //alert("Patient could not be found: " + patients[i].id);

            var alertStrings = { confirmButtonLabel: "Yes", text: "Patient could not be found: " + patients[i].id, title: "Patient Not Found" };
            var alertOptions = { height: 120, width: 260 };
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                function success(result) {
                    //console.log("Alert dialog closed");
                },
                function (error) {
                    //console.log(error.message);
                }
            );
            //return;

            returnData.data.success = false;
            resolve(returnData);
        }
    );

    return deferred.promise();
}
//SaveRecord = function (saveOption, primaryControl) commented by Naveen Dubbaka 10/15/2020
//SaveRecord = function (saveOption, formContext) {
SaveRecord = function (formContext, saveOption) {
    debugger;
    if (Depth <= 3) {
        Depth = Depth + 1;

        //var formContext = primaryControl.getFormContext();

        //MCS.VIALogin.isGrpClinicappt = formContext.getAttribute("mcs_groupappointment").getValue();

        //formContext.data.entity.save(saveOption);
        //	return;


        //debugger;
        if (MCS != undefined && MCS.VIALogin == undefined)
            MCS.VIALogin = formContext.getControl("WebResource_vialogin").getObject().contentWindow.MCS.VIALogin;

        // re-write as deferred 
        var validUserDuz = MCS.VIALogin.IsValidUserDuz();

        if ((!validUserDuz) && (!MCS.VIALogin.isGrpClinicappt)) {
            //alert("Vista login has expired, attempting to get new login");

            var alertStrings = { confirmButtonLabel: "Yes", text: "Vista login has expired, attempting to get new login", title: "Login Expired" };
            var alertOptions = { height: 120, width: 260 };
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                function success(result) {
                    //console.log("Alert dialog closed");
                },
                function (error) {
                    //console.log(error.message);
                }
            );

            MCS.VIALogin.Saml(formContext);
            return;
        }

        var isGroup = formContext.getAttribute("mcs_groupappointment").getValue();
        var isHomeMobile = formContext.getAttribute("cvt_type").getValue();
        var phonecall = formContext.getAttribute("cvt_telephonecall").getValue();

        var resources = formContext.getAttribute('resources').getValue();
        if (resources != undefined && resources != null && resources.length > 0) {
            var providers = "";
            for (var i = 0; i < resources.length; i++) {
                providers += resources[i].name + ';';
            }
            formContext.getAttribute("tmp_scheduledproviders").setValue(providers)
        }
        var usingVMR = false;
        if (isGroup && !isHomeMobile) {
            formContext.data.entity.save(saveOption);
            return;
        }
        var patientObj = formContext.getAttribute('customers');
        var patients = patientObj != null ? patientObj.getValue() != null ? patientObj.getValue() : null : null;
        if (patients === null || patients.length === 0) {
            //alert("You must add a patient to all individual or VA Video Connect Group appointments");

            var alertStrings = { confirmButtonLabel: "Yes", text: "You must add a patient to all individual or VA Video Connect Group appointments", title: "Login Expired" };
            var alertOptions = { height: 120, width: 260 };
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                function success(result) {
                    //console.log("Alert dialog closed");
                },
                function (error) {
                    //console.log(error.message);
                }
            );

            return;
        }
        var patRecord;
        var allowSave = false;
        var currentVeteranIndex = 0;
        var gotResponse = false;

        var mergedFilter = [];
        for (var i = 0; i < patients.length; i++) {
            //contactid eq 27d9dc24-a16f-eb11-a812-001dd8021a79 or  contactid eq 281d0340-797b-ea11-a811-001dd801892c

            mergedFilter.push("contactid eq " + patients[i].id);
        }

        Xrm.WebApi.online.retrieveMultipleRecords("contact", "?$select=cvt_bltablet,cvt_tablettype,donotemail,emailaddress1&$filter=" + mergedFilter.join(' or ')).then(
            function success(results) {
                for (var i = 0; i < results.entities.length; i++) {
                    allowSave = false;
                    var result = results.entities[i];
                    var cvt_bltablet = result["cvt_bltablet"];
                    var cvt_tablettype = result["cvt_tablettype"];
                    var donotemail = result["donotemail"];
                    var emailaddress1 = result["emailaddress1"];

                    if (cvt_bltablet == null || cvt_bltablet === "")
                        usingVMR = isHomeMobile;
                    if (emailaddress1 != null && emailaddress1 !== "")
                        allowSave = true;
                    if (donotemail && (!usingVMR || cvt_tablettype === 917290002))
                        allowSave = true;
                    if (phonecall === true && isGroup === false && isHomeMobile === true)
                        allowSave = true;

                    if (!allowSave)
                        break;
                }

                if (allowSave) {

                    if (isGroup === false && isHomeMobile === true) //  must be a non-group VVC *phone call*
                        MCS.mcs_Service_Activity_OnLoad.UpdatePatientContactInfo(formContext, patients[0].id);

                    saveOption = (saveOption !== undefined) ? saveOption : null;

                    formContext.data.save(saveOption).then(function () {
                        console.log('saved');
                        // success
                    }, function (error) {
                        console.log(error);
                    });
                }
                else
                    EnterEmail(patients[currentVeteranIndex].id, usingVMR);
            },
            function (error) {
                Xrm.Utility.alertDialog(error.message);
            }
        );

        // for (var i = 0; i < patients.length; i++) {
        // allowSave = false;
        // gotResponse = false;

        // Xrm.WebApi.online.retrieveRecord("contact", patients[i].id, "?$select=contactid,cvt_bltablet,cvt_tablettype,donotemail,emailaddress1").then(
        // function success(result) {
        // gotResponse = true;

        // var doNotEMail = result.donotemail != null ? result.donotemail : false;

        // if (result.cvt_bltablet == null || result.cvt_bltablet === "")
        // usingVMR = isHomeMobile;
        // if (result.emailaddress1 != null && result.emailaddress1 !== "")
        // allowSave = true;
        // if (doNotEMail && (!usingVMR || result.cvt_tablettype === 917290002))
        // allowSave = true;

        // //MCS.mcs_Service_Activity.GetProviderSite(formContext);

        // if (allowSave) {
        // saveOption = (saveOption !== undefined) ? saveOption : null;

        // formContext.data.save(saveOption).then(function () {
        // console.log('saved');
        // // success
        // }, function (error) {
        // console.log(error);
        // });
        // }
        // else
        // EnterEmail(patients[currentVeteranIndex].id, usingVMR);

        // },
        // function (error) {
        // //alert("Patient could not be found: " + patients[i].id);

        // var alertStrings = { confirmButtonLabel: "Yes", text: "Patient could not be found: " + patients[i].id, title: "Not found" };
        // var alertOptions = { height: 120, width: 260 };
        // Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
        // function success(result) {
        // //console.log("Alert dialog closed");
        // },
        // function (error) {
        // //console.log(error.message);
        // }
        // );

        // return;
        // }
        // );
        // /*
        // CrmRestKit.Retrieve('Contact', patients[i].id, ['ContactId', 'EMailAddress1', 'DoNotEMail', 'cvt_BLTablet', 'cvt_TabletType'], false)
        // .fail(function (err) {
        // alert("Patient could not be found: " + patients[i].id);
        // return;
        // }).done(function(contact){
        // patRecord = contact.d;
        // var doNotEMail = patRecord.DoNotEMail != null ? patRecord.DoNotEMail : false;

        // if (patRecord.cvt_BLTablet == null || patRecord.cvt_BLTablet == "")
        // usingVMR = isHomeMobile;
        // if (patRecord.EMailAddress1 != null && patRecord.EMailAddress1 != "")
        // allowSave = true;
        // if (doNotEMail && (!usingVMR || patRecord.cvt_TabletType == 917290002))
        // allowSave = true;
        // });
        // */
        // if (gotResponse && !allowSave) {
        // currentVeteranIndex = i;
        // break;
        // }
        // }
    }
};

EnterEmail = function (patientId, usingVMR) {
    //debugger;
    if (usingVMR) {
        //alert("All veterans using VMRs must have email addresses before they can be booked.  Enter patient's email and try to save again or else inform the veteran that he/she will need to find another video visit option.");

        var alertStrings = { confirmButtonLabel: "Yes", text: "All veterans using VMRs must have email addresses before they can be booked.  Enter patient's email and try to save again or else inform the veteran that he/she will need to find another video visit option.", title: "Not found" };
        var alertOptions = { height: 120, width: 260 };
        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
            function success(result) {
                //console.log("Alert dialog closed");
            },
            function (error) {
                //console.log(error.message);
            }
        );

        MCS.cvt_Common.openDialogProcess(null, "52e2a47a-becc-449f-821a-0b95916e1cb1", "contact", patientId);
    }
    else {
        //alert("Please Enter the patient's email address or else opt them out of emails and then try to save again.");

        var alertStrings = { confirmButtonLabel: "Yes", text: "Please Enter the patient's email address or else opt them out of emails and then try to save again.", title: "Not found" };
        var alertOptions = { height: 120, width: 260 };
        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
            function success(result) {
                //console.log("Alert dialog closed");
            },
            function (error) {
                //console.log(error.message);
            }
        );

        MCS.cvt_Common.openDialogProcess(null, "AB9FF42A-ADAC-4C01-ADE7-01C1A1F7E320", "contact", patientId);
    }
}

schedulingAppointment = function () {
    Xrm.Navigation.openForm("serviceappointment");
}
//If the SDK namespace object is not defined, create it.
if (typeof MCS === "undefined")
    MCS = {};

// Create Namespace container for functions in this library;
if (typeof MCS.mcs_Service_Activity === "undefined")
    MCS.mcs_Service_Activity = {};

MCS.mcs_Service_Activity.FORM_TYPE_CREATE = 1;
MCS.mcs_Service_Activity.FORM_TYPE_UPDATE = 2;
MCS.mcs_Service_Activity.FORM_TYPE_READ_ONLY = 3;
MCS.mcs_Service_Activity.FORM_TYPE_DISABLED = 4;

//Gets the Scheduling Package Data - populates fields on Service Activity
MCS.mcs_Service_Activity.GetSchedulingPackageData = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var relatedSchedulingPackage = formContext.getAttribute("cvt_relatedschedulingpackage").getValue();

    if (relatedSchedulingPackage != null) {
        MCS.mcs_Service_Activity.getcvt_relatedschedulingpackageLookupData(executionContext, relatedSchedulingPackage[0].id);
    }
    else {
        formContext.getAttribute("serviceid").setValue(null);
        formContext.getAttribute("mcs_servicetype").setValue(null);
        formContext.getAttribute("mcs_servicesubtype").setValue(null);
    }
};

//re-written piece leveraging the Crm Rest Kit Library - pulls in values from the Scheduling Package and sets appropriate fields on Service Activity
MCS.mcs_Service_Activity.getcvt_relatedschedulingpackageLookupData = function (executionContext, cvt_relatedschedulingpackage) {
    //debugger;

    var formContext = executionContext.getFormContext();
    Xrm.WebApi.retrieveRecord("cvt_resourcepackage", cvt_relatedschedulingpackage, "?$select=_cvt_specialtysubtype_value,_cvt_specialty_value,_cvt_relatedservice_value,cvt_patientlocationtype,cvt_availabletelehealthmodality,cvt_groupappointment").then(
        function success(result) {
            //MCS.mcs_Service_Activity.SetLookup(result.cvt_relatedservice, formContext.getAttribute("serviceid"));
            //debugger;
            var value = result["_cvt_specialty_value"];
            var Name = result["_cvt_specialty_value@OData.Community.Display.V1.FormattedValue"];
            var LogicalName = result["_cvt_specialty_value@Microsoft.Dynamics.CRM.lookuplogicalname"];
            MCS.mcs_Service_Activity.SetNewLookup(value, Name, LogicalName, formContext.getAttribute("mcs_servicetype"));

            if (result._cvt_specialtysubtype_value != null) {
                //MCS.mcs_Service_Activity.SetLookup(result._cvt_specialtysubtype_value, formContext.getAttribute("mcs_servicesubtype"));
                MCS.mcs_Service_Activity.SetNewLookup(result["_cvt_specialtysubtype_value"], result["_cvt_specialtysubtype_value@OData.Community.Display.V1.FormattedValue"], result["_cvt_specialtysubtype_value@Microsoft.Dynamics.CRM.lookuplogicalname"], formContext.getAttribute("mcs_servicesubtype"));
            }


            //MCS.mcs_Service_Activity.SetLookup(result.cvt_relatedpatientsiteid, formContext.getAttribute("mcs_relatedsite"));
            //MCS.mcs_Service_Activity.SetLookup(result.cvt_relatedprovidersiteid, formContext.getAttribute("mcs_relatedprovidersite"));
            //Fire OnChange so that SubType shows
            formContext.getAttribute("mcs_servicetype").fireOnChange();
            if (result.cvt_patientlocationtype != null)
                formContext.getAttribute("cvt_type").setValue(result.cvt_patientlocationtype == 917290001);
            if (result.cvt_groupappointment != null)
                formContext.getAttribute("mcs_groupappointment").setValue(result.cvt_groupappointment);
            formContext.getAttribute("cvt_telehealthmodality").setValue((result.cvt_availabletelehealthmodality == 917290001))
            //if (result.cvt_SchedulingInstructions != null)
            //    formContext.getAttribute("cvt_schedulinginstructions").setValue(result.cvt_SchedulingInstructions);

            var isVVC = formContext.getAttribute("cvt_type").getValue() == true;
            var isPatientSiteResourcesRequired = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue() == true;


            //If it is VVC, then use the SP service
            if (isVVC && !isPatientSiteResourcesRequired) {
                //MCS.mcs_Service_Activity.SetLookup(result.cvt_relatedservice, formContext.getAttribute("serviceid"));
                MCS.mcs_Service_Activity.SetNewLookup(result["_cvt_relatedservice_value"], result["_cvt_relatedservice_value@OData.Community.Display.V1.FormattedValue"], result["_cvt_relatedservice_value@Microsoft.Dynamics.CRM.lookuplogicalname"], formContext.getAttribute("serviceid"));
            }
            else {

                cvt_relatedschedulingpackage = cvt_relatedschedulingpackage.substr(1, 36);
                var filter = "_cvt_resourcepackage_value eq " + cvt_relatedschedulingpackage;
                var siteId = "";

                // If patient site resources are required, search related site

                if (isPatientSiteResourcesRequired) {
                    if (formContext.getAttribute("mcs_relatedsite").getValue() != null) {
                        siteId = formContext.getAttribute("mcs_relatedsite").getValue()[0].id;
                        filter += " and cvt_locationtype eq 917290001";
                    }
                }
                //if it is group, then search the Provider PS
                else if (result.cvt_groupappointment === true) {
                    if (formContext.getAttribute("mcs_relatedprovidersite").getValue() != null) {
                        siteId = formContext.getAttribute("mcs_relatedprovidersite").getValue()[0].id;
                        filter += " and cvt_locationtype eq 917290000";
                    }
                }
                else { //search Patient PS
                    if (formContext.getAttribute("mcs_relatedsite").getValue() != null) {
                        siteId = formContext.getAttribute("mcs_relatedsite").getValue()[0].id;
                        filter += " and cvt_locationtype eq 917290001";
                    }
                }
                if (siteId !== "" || siteId != null) {

                    siteId = siteId.substr(1, 36);


                    //if (!isPatientSiteResourcesRequired)
                    //	filter += " and _cvt_site_value eq " + siteId;

                    if (!isPatientSiteResourcesRequired)
                        filter += " and _cvt_site_value eq " + siteId;
                    else if (isVVC && isPatientSiteResourcesRequired)
                        filter += " and _cvt_site_value eq " + siteId;

                    Xrm.WebApi.retrieveMultipleRecords("cvt_participatingsite", "?$select=_cvt_relatedservice_value,cvt_grouppatientbranch&$filter=" + filter).then(
                        function success(result) {
                            //debugger;
                            if (result != null && result.entities.length !== 0) {
                                //debugger;
                                MCS.mcs_Service_Activity.SetNewLookup(result.entities[0]._cvt_relatedservice_value, result.entities[0]["_cvt_relatedservice_value@OData.Community.Display.V1.FormattedValue"], "service", formContext.getAttribute("serviceid"));
                                //MCS.mcs_Service_Activity.SetLookup(result.entities[0]._cvt_relatedservice_value, formContext.getAttribute("serviceid"));
                                //Set the id to this field, then make sure it goes into the Resources field.
                                MCS.mcs_Service_Activity.GroupPat(result.entities[0].cvt_grouppatientbranch, executionContext);

                            }
                            else {
                                //alert("No Participating Site was retrieved, and therefore no service was retrieved.");

                                var alertStrings = { confirmButtonLabel: "Yes", text: "No Participating Site was retrieved, and therefore no service was retrieved.", title: "No Participating Site" };
                                var alertOptions = { height: 120, width: 260 };
                                Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                                    function success(result) {
                                        //console.log("Alert dialog closed");
                                    },
                                    function (error) {
                                        //console.log(error.message);
                                    }
                                );
                            }
                        },
                        function (error) {
                            //alert("Error: " + error.message);
                        }
                    );
                }
                else {

                    var alertStrings = { confirmButtonLabel: "Yes", text: "Appropriate Site was not filled in prior to selecting the Scheduling Package.", title: "Appropriate Site" };
                    var alertOptions = { height: 120, width: 260 };
                    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                        function success(result) {
                            //console.log("Alert dialog closed");
                        },
                        function (error) {
                            //console.log(error.message);
                        }
                    );
                    //alert("Appropriate Site was not filled in prior to selecting the Scheduling Package.");
                }
            }
        },
        function (error) {

            var alertStrings = { confirmButtonLabel: "Yes", text: "Please verify that this Scheduling Package is in Production, and if so, contact your system administrator", title: "Verify Scheduling Package" };
            var alertOptions = { height: 120, width: 260 };
            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                function success(result) {
                    //console.log("Alert dialog closed");
                },
                function (error) {
                    //console.log(error.message);
                }
            );


            //alert("Please verify that this Scheduling Package is in Production, and if so, contact your system administrator");
            return;
        }
    );

    //CrmRestKit.Retrieve('cvt_resourcepackage', cvt_relatedschedulingpackage, ['cvt_specialtysubtype', 'cvt_specialty', 'cvt_relatedservice', 'cvt_patientlocationtype', 'cvt_availabletelehealthmodality',
    //    //'cvt_relatedpatientsiteid', 'cvt_relatedprovidersiteid',
    //    'cvt_groupappointment'], true).fail(
    //        function (err) {
    //            alert("Please verify that this Scheduling Package is in Production, and if so, contact your system administrator");
    //            return;
    //        }).done(
    //            function (data) {
    //                //MCS.mcs_Service_Activity.SetLookup(data.d.cvt_relatedservice, Xrm.Page.getAttribute("serviceid"));
    //                MCS.mcs_Service_Activity.SetLookup(data.d.cvt_specialty, Xrm.Page.getAttribute("mcs_servicetype"));
    //                MCS.mcs_Service_Activity.SetLookup(data.d.cvt_specialtysubtype, Xrm.Page.getAttribute("mcs_servicesubtype"));
    //                //MCS.mcs_Service_Activity.SetLookup(data.d.cvt_relatedpatientsiteid, Xrm.Page.getAttribute("mcs_relatedsite"));
    //                //MCS.mcs_Service_Activity.SetLookup(data.d.cvt_relatedprovidersiteid, Xrm.Page.getAttribute("mcs_relatedprovidersite"));

    //                //Fire OnChange so that SubType shows
    //                Xrm.Page.getAttribute("mcs_servicetype").fireOnChange();

    //                if (data.d.cvt_patientlocationtype != null)
    //                    Xrm.Page.getAttribute("cvt_type").setValue(data.d.cvt_patientlocationtype.Value == 917290001);
    //                if (data.d.cvt_groupappointment != null)
    //                    Xrm.Page.getAttribute("mcs_groupappointment").setValue(data.d.cvt_groupappointment);
    //                Xrm.Page.getAttribute("cvt_telehealthmodality").setValue((data.d.cvt_availabletelehealthmodality.Value == 917290001))
    //                //if (data.d.cvt_SchedulingInstructions != null)
    //                //    Xrm.Page.getAttribute("cvt_schedulinginstructions").setValue(data.d.cvt_SchedulingInstructions);

    //                //If it is VVC, then use the SP service
    //                if (Xrm.Page.getAttribute("cvt_type").getValue() == true) {
    //                    MCS.mcs_Service_Activity.SetLookup(data.d.cvt_relatedservice, Xrm.Page.getAttribute("serviceid"));
    //                }
    //                else {
    //                    var filter = "cvt_resourcepackage/Id eq (Guid'" + cvt_relatedschedulingpackage + "') and statuscode/Value eq 1";
    //                    var siteId = "";
    //                    //if it is group, then search the Provider PS
    //                    if (data.d.cvt_groupappointment == true) {
    //                        if (Xrm.Page.getAttribute("mcs_relatedprovidersite").getValue() != null) {
    //                            siteId = Xrm.Page.getAttribute("mcs_relatedprovidersite").getValue()[0].id;
    //                            filter += " and cvt_locationtype/Value eq 917290000";
    //                        }
    //                    }
    //                    else { //search Patient PS
    //                        if (Xrm.Page.getAttribute("mcs_relatedsite").getValue() != null) {
    //                            siteId = Xrm.Page.getAttribute("mcs_relatedsite").getValue()[0].id;
    //                            filter += " and cvt_locationtype/Value eq 917290001";
    //                        }
    //                    }
    //                    if (siteId != "" || siteId != null) {
    //                        filter += " and cvt_site/Id eq (Guid'" + siteId + "')";
    //                        calls = CrmRestKit.ByQuery("cvt_participatingsite", ['cvt_relatedservice', 'cvt_grouppatientbranch'], filter, false);
    //                        calls.fail(function (err) {
    //                            return;
    //                        }).done(function (data) {
    //                            if (data && data.d && data.d.results != null && data.d.results.length != 0) {
    //                                MCS.mcs_Service_Activity.SetLookup(data.d.results[0].cvt_relatedservice, Xrm.Page.getAttribute("serviceid"));
    //                                //Set the id to this field, then make sure it goes into the Resources field.
    //                                MCS.mcs_Service_Activity.GroupPat(data.d.results[0].cvt_grouppatientbranch);
    //                            }
    //                        });
    //                    }
    //                    else {
    //                        alert("Appropriate Site was not filled in prior to selecting the Scheduling Package.");
    //                    }
    //                }
    //            });
};

//Pass in OData EntityReferences and set a lookup with the EntityReference Value
MCS.mcs_Service_Activity.SetLookup = function (column, targetField) {
    //debugger;
    if (targetField != null) {
        var obj = { id: column.Id, entityType: column.LogicalName, name: column.Name }
        if (obj.name == null)
            targetField.setValue(null);
        else
            targetField.setValue([obj]);
    }
}

MCS.mcs_Service_Activity.SetNewLookup = function (value, Name, LogicalName, targetField) {
    //debugger;
    //debugger;
    if (targetField != null) {
        var obj = { id: value, entityType: LogicalName, name: Name }
        if (obj.name == null)
            targetField.setValue(null);
        else
            targetField.setValue([obj]);
    }
}

//Show Scheduling Package lookup field once site has been selected
MCS.mcs_Service_Activity.EnableSchedulingPackage = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var relatedSite = null;
    var relatedSiteSLU = null;
    var relatedProviderSite = null;
    var relatedProviderSiteSLU = null;

    var relatedSiteAttribute = formContext.getAttribute("mcs_relatedsite");
    if (relatedSiteAttribute != null)
        relatedSite = relatedSiteAttribute.getValue();
    if (relatedSite != null)
        relatedSiteSLU = relatedSite[0].name;

    var relatedProviderSiteAttribute = formContext.getAttribute("mcs_relatedprovidersite");
    if (relatedProviderSiteAttribute != null)
        relatedProviderSite = relatedProviderSiteAttribute.getValue();
    if (relatedProviderSite != null)
        relatedProviderSiteSLU = relatedProviderSite[0].name;

    if (relatedSiteSLU != null || relatedProviderSiteSLU != null) {
        formContext.getControl("cvt_relatedschedulingpackage").setVisible(true);
    }
    else {
        formContext.getControl("cvt_relatedschedulingpackage").setVisible(false);
        formContext.getAttribute("cvt_relatedschedulingpackage").setValue(null);
    }
};

//Show Specialty Subtype field once Specialty has been selected
MCS.mcs_Service_Activity.EnableServiceSubType = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var serviceType = null;
    var serviceTypeSLU = null;

    if (formContext.getAttribute("mcs_servicetype") != null)
        serviceType = formContext.getAttribute("mcs_servicetype").getValue();
    if (serviceType != null)
        serviceTypeSLU = serviceType[0].name;

    if (serviceTypeSLU != null)
        formContext.getControl("mcs_servicesubtype").setVisible(true);
    else {
        formContext.getControl("mcs_servicesubtype").setVisible(false);
        formContext.getAttribute("mcs_servicesubtype").setValue(null);
    }
};

/* Adds Custom Filtered lookup view for Scheduling Package based on selections
/* for Specialty, Service Sub-Type, and Site(Patient Site). */
MCS.mcs_Service_Activity.HandleOnChangeSchedulingPackageLookup = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var schedulingPackageControl = formContext.getControl("cvt_relatedschedulingpackage");
    if (schedulingPackageControl.getVisible()) {
        var siteObj, site, sitesearch;
        var serviceType = new Array();
        var serviceSubType = new Array();
        var selectedSite = new Array();
        var schedulingPackagetype = formContext.getAttribute("cvt_type").getValue();
        var groupAppt = formContext.getAttribute("mcs_groupappointment") == null ? 0 : formContext.getAttribute("mcs_groupappointment").getValue();
        var providers = formContext.getAttribute("cvt_relatedproviderid").getValue();
        var requirePatResources = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue();

        //which site are you using to filter the SA lookup?
        if (groupAppt || schedulingPackagetype) { //Group or VVC?
            if (requirePatResources) {
                selectedSite = formContext.getAttribute("mcs_relatedsite").getValue();
            }
            else {
                selectedSite = formContext.getAttribute("mcs_relatedprovidersite").getValue();
            }
        }
        else {
            selectedSite = formContext.getAttribute("mcs_relatedsite").getValue();
        }

        serviceType = formContext.getAttribute("mcs_servicetype").getValue();
        serviceSubType = formContext.getAttribute("mcs_servicesubtype").getValue();

        //if (groupAppt == 0) {
        if (groupAppt === false) {
            if (schedulingPackagetype === true) { //CVT to Home - Provider
                if (requirePatResources) {
                    siteObj = formContext.getAttribute("mcs_relatedsite");
                    sitesearch = "cvt_patientsites";
                }
                else {
                    siteObj = formContext.getAttribute("mcs_relatedprovidersite");
                    sitesearch = "cvt_providersites";
                }
            }
            else { //(I) - Patient
                siteObj = formContext.getAttribute("mcs_relatedsite");
                sitesearch = "cvt_patientsites";
            }
        }
        else { //(G) - Provider
            siteObj = formContext.getAttribute("mcs_relatedprovidersite");
            sitesearch = "cvt_providersites";
        }

        if (siteObj != null)
            site = siteObj.getValue();
        if (site == null)
            return;

        var viewDisplayName = "Filtered by Site";
        var siteID = site[0].id;

        var siteName = MCS.cvt_Common.formatXML(site[0].name).trim();

        var lastInstanceOfOpenParenthesis = siteName.lastIndexOf('(');

        var sitenameWithoutStationNumber = lastInstanceOfOpenParenthesis === -1 ? siteName : siteName.substr(0, lastInstanceOfOpenParenthesis - 1);


        var fetchBase = '<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="true"><entity name="cvt_resourcepackage"><attribute name="cvt_resourcepackageid"/><attribute name="cvt_name"/><attribute name="cvt_providersites"/><attribute name="cvt_otherspecialtydetails"/>' +
            '<order attribute="cvt_name" descending="false"/><filter type="and"><condition attribute="statecode" operator="eq" value="0"/><condition attribute="' + sitesearch + '" operator="like" value="%' + sitenameWithoutStationNumber + '%"/>';

        if (serviceType != null) {
            viewDisplayName += " & Specialty";
            var serviceTypeID = serviceType[0].id;
            fetchBase += '<condition attribute="cvt_specialty" operator="eq" uiname="' + MCS.cvt_Common.formatXML(serviceType[0].name) + '" uitype="mcs_servicetype" value="' + serviceTypeID + '"/>';
            if (serviceSubType != null) {
                viewDisplayName += " & Specialty Sub-Type";
                var serviceSubTypeID = serviceSubType[0].id;
                fetchBase += '<condition attribute="cvt_specialtysubtype" operator="eq" uiname="' + MCS.cvt_Common.formatXML(serviceSubType[0].name) + '" uitype="mcs_servicesubtype" value="' + serviceSubTypeID + '"/>';
            }
        }
        if (schedulingPackagetype === true) {
            viewDisplayName += " & VA Video Connect";
            fetchBase += '<condition attribute="cvt_patientlocationtype" value="917290001" operator="eq"/>';
        }
        else {
            viewDisplayName += " & Clinic Based";
            fetchBase += '<filter type="or"><condition attribute="cvt_patientlocationtype" value="917290000" operator="eq"/><condition attribute="cvt_patientlocationtype" operator="null"/></filter>';
        }



        if (formContext.getAttribute("cvt_telephonecall").getValue() === true) {
            viewDisplayName += " & PHONE";
            fetchBase += '<condition attribute="cvt_availabletelehealthmodality" value="917290002" operator="eq"/>';
        }
        else {
            if (formContext.getAttribute("cvt_telehealthmodality").getValue() === true) {
                viewDisplayName += " & SFT";
                fetchBase += '<condition attribute="cvt_availabletelehealthmodality" value="917290001" operator="eq"/>';
            }
            else {
                viewDisplayName += " & CVT";
                fetchBase += '<filter type="or"><condition attribute="cvt_availabletelehealthmodality" value="917290000" operator="eq"/><condition attribute="cvt_availabletelehealthmodality" operator="null"/></filter>';
            }
        }
        fetchBase += '<condition attribute="statuscode" value="1" operator="eq"/><condition attribute="cvt_groupappointment" value="' + groupAppt + '" operator="eq"/></filter>"';

        //Original filtering by teleheath modality commented Duane M 7/29/2020
        //if (formContext.getAttribute("cvt_telehealthmodality").getValue() == true) {
        //    viewDisplayName += " & SFT";
        //    fetchBase += '<condition attribute="cvt_availabletelehealthmodality" value="917290001" operator="eq"/>';
        //}
        //else {
        //    viewDisplayName += " & CVT";
        //    fetchBase += '<filter type="or"><condition attribute="cvt_availabletelehealthmodality" value="917290000" operator="eq"/><condition attribute="cvt_availabletelehealthmodality" operator="null"/></filter>';
        //}
        //fetchBase += '<condition attribute="statuscode" value="1" operator="eq"/><condition attribute="cvt_groupappointment" value="' + groupAppt + '" operator="eq"/></filter>"';



        //Add associated PS
        fetchBase += '<link-entity name="cvt_participatingsite" alias="aa" to="cvt_resourcepackageid" from="cvt_resourcepackage"><filter type="and"><condition attribute="cvt_site" value="' + siteID + '" operator="eq" uitype="mcs_site" uiname="' + MCS.cvt_Common.formatXML(site[0].name) + '" /><condition attribute="statecode" value="0" operator="eq" />';

        //This is only commented out for testing.  Readd this in later
        //fetchBase += '<condition attribute="cvt_scheduleable" value="1" operator="eq" /> <condition attribute="cvt_relatedservice" operator="not-null" />';

        if (providers != null) {
            viewDisplayName += " & Provider";
            fetchBase += '<condition attribute="cvt_providers" value="' + '%' + MCS.cvt_Common.formatXML(providers[0].name) + '%' + '" operator="like"/>';
            //'<condition attribute="cvt_providers" value="%Smith%" operator="like" />
        }
        fetchBase += '</filter></link-entity></entity ></fetch>';

        var schedulingPackageLayoutXml = '<grid name="resultset" object="10010" jump="cvt_name" select="1" icon="0" preview="0"><row name="result" id="cvt_resourcepackageid">'
            + '<cell name="cvt_otherspecialtydetails" width="125"/><cell name="cvt_providersites" width="300"/><cell name="cvt_providersitevistaclinics" width="300"/><cell name="cvt_patientsites" width="300"/><cell name="cvt_patientsitevistaclinics" width="300"/>'
            + '<cell name="cvt_providers" width="300"/><cell name="cvt_name" width="300"/><cell name="cvt_groupappointment" width="125"/><cell name="cvt_patientsites" width="300"/><cell name="cvt_specialty" width="100"/><cell name="cvt_specialtysubtype" width="100"/><cell name="createdon" width="125"/></row></grid>';

        //Dynamically retrieve layout
        //  SELECT LayoutXml, * FROM[CVT_DEV2015_MSCRM].[dbo].[FilteredSavedQuery]         where Name = 'Active Scheduling Packages'
        var filter = " name eq 'Scheduling Package Lookup View'";
        //alert("About to retrieve the view layout.");

        Xrm.WebApi.online.retrieveMultipleRecords("savedquery", "?$select=layoutxml&$filter=" + filter).then(
            function success(result) {
                if (result && result != null && result.entities.length != 0 && result.entities[0].layoutxml != null) {
                    //"<grid name=\"resultset\" object=\"10010\" jump=\"cvt_name\" select=\"1\" icon=\"0\" preview=\"0\"><row name=\"result\" id=\"cvt_resourcepackageid\"><cell name=\"cvt_otherspecialtydetails\" width=\"125\"/><cell name=\"cvt_providersites\" width=\"300\"/><cell name=\"cvt_providersitevistaclinics\" width=\"300\"/><cell name=\"cvt_patientsites\" width=\"300\"/><cell name=\"cvt_patientsitevistaclinics\" width=\"300\"/><cell name=\"cvt_providers\" width=\"300\"/><cell name=\"cvt_name\" width=\"300\"/><cell name=\"cvt_groupappointment\" width=\"125\"/><cell name=\"cvt_patientsites\" width=\"300\"/><cell name=\"cvt_specialty\" width=\"100\"/><cell name=\"cvt_specialtysubtype\" width=\"100\"/><cell name=\"createdon\" width=\"125\"/></row></grid>"
                    //replace all of the \" with "
                    schedulingPackageLayoutXml = (result.entities[0].layoutxml).replace('\\', '');
                    schedulingPackageControl.addCustomView(siteID, "cvt_resourcepackage", viewDisplayName, fetchBase, schedulingPackageLayoutXml, true);
                    //alert(schedulingPackageLayoutXml);
                }
            },
            function (error) {
                return;
            }
        );
        //var calls = CrmRestKit.ByQuery("SavedQuery", ['LayoutXml'], filter, false);
        //calls.fail(function (err) {
        //    return;
        //}).done(function (data) {
        //    if (data && data.d && data.d.results != null && data.d.results.length != 0 && data.d.results[0].LayoutXml != null) {
        //        //"<grid name=\"resultset\" object=\"10010\" jump=\"cvt_name\" select=\"1\" icon=\"0\" preview=\"0\"><row name=\"result\" id=\"cvt_resourcepackageid\"><cell name=\"cvt_otherspecialtydetails\" width=\"125\"/><cell name=\"cvt_providersites\" width=\"300\"/><cell name=\"cvt_providersitevistaclinics\" width=\"300\"/><cell name=\"cvt_patientsites\" width=\"300\"/><cell name=\"cvt_patientsitevistaclinics\" width=\"300\"/><cell name=\"cvt_providers\" width=\"300\"/><cell name=\"cvt_name\" width=\"300\"/><cell name=\"cvt_groupappointment\" width=\"125\"/><cell name=\"cvt_patientsites\" width=\"300\"/><cell name=\"cvt_specialty\" width=\"100\"/><cell name=\"cvt_specialtysubtype\" width=\"100\"/><cell name=\"createdon\" width=\"125\"/></row></grid>"
        //        //replace all of the \" with "
        //        schedulingPackageLayoutXml = (data.d.results[0].LayoutXml).replace('\\', '');

        //        //alert(schedulingPackageLayoutXml);
        //    }
        //});
    }
};

MCS.mcs_Service_Activity.GetProviderFromResource = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var type = formContext.getAttribute("cvt_type").getValue();
    var isPatientResourcesRequired = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue();
    var resources = formContext.getAttribute("resources").getValue();
    var schedulingPackageId = formContext.getAttribute("cvt_relatedschedulingpackage").getValue()[0].id;

    if (resources != null && formContext.ui.getFormType() == MCS.cvt_Common.FORM_TYPE_CREATE) {

        var userResources = resources.filter(function (resource) { return resource.entityType == "systemuser"; });

        if (userResources.length === 1) {
            formContext.getAttribute("cvt_relatedproviderid").setValue(userResources);
        }
        else {
            for (i = 0; i < userResources.length; i++) {

                var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>";
                fetchXml += "  <entity name='mcs_resourcegroup'>";
                fetchXml += "    <attribute name='mcs_resourcegroupid' />";
                fetchXml += "    <attribute name='cvt_resources' />";
                fetchXml += "    <filter type='and'>";
                fetchXml += "      <condition attribute='cvt_resources' operator='like' value='%" + userResources[i].name + "%' />";
                fetchXml += "    </filter>";
                fetchXml += "    <link-entity name='cvt_schedulingresource' from='cvt_tmpresourcegroup' to='mcs_resourcegroupid' link-type='inner' alias='ag'>";
                fetchXml += "      <link-entity name='cvt_participatingsite' from='cvt_participatingsiteid' to='cvt_participatingsite' link-type='inner' alias='ah'>";
                fetchXml += "        <filter type='and'>";
                fetchXml += "          <condition attribute='cvt_locationtype' operator='eq' value='917290000' />";
                fetchXml += "          <condition attribute='cvt_resourcepackage' operator='eq' value='" + schedulingPackageId + "' />";
                fetchXml += "        </filter>";
                fetchXml += "      </link-entity>";
                fetchXml += "    </link-entity>";
                fetchXml += "  </entity>";
                fetchXml += "</fetch>";

                fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);
                Xrm.WebApi.retrieveMultipleRecords("mcs_resourcegroup", fetchXml).then(
                    function success(result) {
                        var countValue = result.entities.length;
                        if (countValue > 0) {

                            var resources = result.entities[0]['cvt_resources'];
                            var user = userResources.filter(function (resource) { return resources.includes(resource.name); });

                            // var lookupValue = new Array();
                            // lookupValue.push(user);
                            formContext.getAttribute("cvt_relatedproviderid").setValue(user);
                        }
                    }
                );
            }
        }
    }
};

MCS.mcs_Service_Activity.SetProviderSite = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var type = formContext.getAttribute("cvt_type").getValue();
    var isPatientResourcesRequired = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue();
    var providerSite = formContext.getAttribute("mcs_relatedprovidersite");

    if (type && !isPatientResourcesRequired) {

        var resources = formContext.getAttribute("resources").getValue();

        if (resources != null) {

            var equipmentResources = resources.filter(function (resource) { return resource.entityType == "equipment"; });

            for (var i = 0; i < equipmentResources.length; i++) {

                var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>";
                fetchXml += "  <entity name='mcs_site'>";
                fetchXml += "    <attribute name='mcs_name' />";
                fetchXml += "    <attribute name='mcs_siteid' />";
                fetchXml += "    <order attribute='mcs_name' descending='false' />";
                fetchXml += "    <link-entity name='mcs_resource' from='mcs_relatedsiteid' to='mcs_siteid' link-type='inner' alias='ag'>";
                fetchXml += "      <link-entity name='equipment' from='equipmentid' to='mcs_relatedresourceid' link-type='inner' alias='ah'>";
                fetchXml += "        <filter type='and'>";
                fetchXml += "          <condition attribute='equipmentid' operator='eq' value='" + equipmentResources[i].id + "' />";
                fetchXml += "          <condition attribute='cvt_type' operator='eq' value='251920000' />";
                fetchXml += "        </filter>";
                fetchXml += "      </link-entity>";
                fetchXml += "    </link-entity>";
                fetchXml += "  </entity>";
                fetchXml += "</fetch>";

                fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);
                Xrm.WebApi.retrieveMultipleRecords("mcs_site", fetchXml).then(
                    function success(result) {
                        var countValue = result.entities.length;
                        if (countValue > 0) {
                            var tmpSiteName = result.entities[0]['mcs_name'];
                            var tmpSiteId = result.entities[0]['mcs_siteid'];

                            MCS.mcs_Service_Activity.SetNewLookup(tmpSiteId, tmpSiteName, "mcs_site", providerSite);
                        }
                    }
                );
            }
        }
    }
};

MCS.mcs_Service_Activity.GetProviderSite = function (formContext) {

    var formContext = formContext.getFormContext();
    var providerSite = formContext.getAttribute("mcs_relatedprovidersite");
    var schedulingPackage = formContext.getAttribute("cvt_relatedschedulingpackage").getValue();
    if (schedulingPackage == null) {

        var alertStrings = { confirmButtonLabel: "Yes", text: "Please select SP", title: "Please select SP" };
        var alertOptions = { height: 120, width: 260 };
        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
            function success(result) {
                //console.log("Alert dialog closed");
            },
            function (error) {
                //console.log(error.message);
            }
        );

        return;
    }

    if (providerSite != null) {
        var sft = formContext.getAttribute("cvt_telehealthmodality").getValue(); //Get the Resources values
        var resources = formContext.getAttribute("resources").getValue(); //Get the Resources values

        if (sft) {

            var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>";
            fetchXml += "<entity name='cvt_participatingsite'>";
            fetchXml += "    <attribute name='cvt_participatingsiteid' />";
            fetchXml += "    <attribute name='cvt_name' />";
            fetchXml += "    <attribute name='cvt_site' />";
            fetchXml += "    <order attribute='cvt_name' descending='false' />";
            fetchXml += "   <filter type='and'>";
            fetchXml += "      <condition attribute='cvt_resourcepackage' operator='eq' value='" + schedulingPackage[0].id + "' />";
            fetchXml += "      <condition attribute='cvt_locationtype' operator='eq' value='917290000' />";
            fetchXml += "      <condition attribute='cvt_scheduleable' operator='eq' value='1' />";
            fetchXml += "      <condition attribute='statecode' operator='eq' value='0' />";
            fetchXml += "    </filter>";
            fetchXml += "  </entity>";
            fetchXml += "</fetch>";

            fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);
            Xrm.WebApi.retrieveMultipleRecords("cvt_participatingsite", fetchXml).then(
                function success(resultSFTPS) {
                    var countValue = resultSFTPS.entities.length;
                    if (countValue > 0) {
                        var relatedSiteId = resultSFTPS.entities[0]._cvt_site_value;
                        var relatedSiteName = resultSFTPS.entities[0]["_cvt_site_value@OData.Community.Display.V1.FormattedValue"];
                        if (providerSite.getValue() == null)
                            MCS.mcs_Service_Activity.SetNewLookup(relatedSiteId, relatedSiteName, "mcs_site", providerSite);

                        return;
                    }
                    //No results
                    else {
                        //alert('No Provider Site found.');

                        var alertStrings = { confirmButtonLabel: "Yes", text: "No Provider Site found.", title: "No Provider Site found." };
                        var alertOptions = { height: 120, width: 260 };
                        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                            function success(result) {
                                //console.log("Alert dialog closed");
                            },
                            function (error) {
                                //console.log(error.message);
                            }
                        );

                    }
                },
                function (error) {

                    var alertStrings = { confirmButtonLabel: "Yes", text: "Error occured while searching for valid participating site: " + error.message, title: "Error Occured." };
                    var alertOptions = { height: 120, width: 260 };
                    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                        function success(result) {
                            //console.log("Alert dialog closed");
                        },
                        function (error) {
                            //console.log(error.message);
                        }
                    );

                    //alert('Error occured while searching for valid participating site: ' + error.message);
                }
            );
        }
        else if (resources != null) {
            for (var i = 0; i < resources.length; i++) { //
                //alert(resources[i].name);
                if (resources[i].entityType === "equipment") { //Equipment

                    //Retrieve the info from the Scheduling Package
                    Xrm.WebApi.retrieveRecord("equipment", resources[i].id, "?$select=_mcs_relatedresource_value,name").then(
                        function success(resultEquipment) {
                            if (resultEquipment._mcs_relatedresource_value == null) {

                                var alertStrings = { confirmButtonLabel: "Yes", text: "Orphaned Resource has been scheduled: " + result.name + " with Id: " + result.id + ". Please fix this resource and rebuild the Scheduling Package (or just re-link the equipment with the TMP Resource).", title: "Error Occured." };
                                var alertOptions = { height: 120, width: 260 };
                                Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                                    function success(result) {
                                        //console.log("Alert dialog closed");
                                    },
                                    function (error) {
                                        //console.log(error.message);
                                    }
                                );
                            }
                            else {
                                Xrm.WebApi.retrieveRecord("mcs_resource", resultEquipment._mcs_relatedresource_value, "?$select=mcs_type,_cvt_defaultprovider_value").then(
                                    function success(resultResource) {
                                        if (resultResource.mcs_type != null && resultResource.mcs_type === 251920000) { //VistaClinic
                                            //We need to find the Provider Participating Site based on the VC being standalone or part of a PRG -> Scheduling Resource
                                            //Query Scheduling Resources where sr.cvt_resource.Id == resource.Id &&
                                            var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>";
                                            fetchXml += "<entity name='cvt_participatingsite'>";
                                            fetchXml += "    <attribute name='cvt_participatingsiteid' />";
                                            fetchXml += "    <attribute name='cvt_name' />";
                                            fetchXml += "    <attribute name='cvt_site' />";
                                            fetchXml += "    <order attribute='cvt_name' descending='false' />";
                                            fetchXml += "   <filter type='and'>";
                                            fetchXml += "      <condition attribute='cvt_resourcepackage' operator='eq' value='" + schedulingPackage[0].id + "' />";
                                            fetchXml += "      <condition attribute='cvt_locationtype' operator='eq' value='917290000' />";
                                            fetchXml += "      <condition attribute='cvt_scheduleable' operator='eq' value='1' />";
                                            fetchXml += "      <condition attribute='statecode' operator='eq' value='0' />";
                                            fetchXml += "    </filter>";
                                            fetchXml += "    <link-entity name='cvt_schedulingresource' from='cvt_participatingsite' to='cvt_participatingsiteid' alias='ab'>";
                                            fetchXml += "      <filter type='and'>";
                                            fetchXml += "        <condition attribute='cvt_tmpresource' operator='eq' value='{" + resultEquipment._mcs_relatedresource_value + "}' />";
                                            fetchXml += "      </filter>";
                                            fetchXml += "    </link-entity>";
                                            fetchXml += "  </entity>";
                                            fetchXml += "</fetch>";

                                            fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);

                                            Xrm.WebApi.retrieveMultipleRecords("cvt_participatingsite", fetchXml).then(
                                                function success(resultPS1) {
                                                    var countValue = resultPS1.entities.length;
                                                    if (countValue > 0) {
                                                        var relatedSiteId = resultPS1.entities[0]._cvt_site_value;
                                                        var relatedSiteName = resultPS1.entities[0]["_cvt_site_value@OData.Community.Display.V1.FormattedValue"];
                                                        if (providerSite.getValue() == null)
                                                            MCS.mcs_Service_Activity.SetNewLookup(relatedSiteId, relatedSiteName, "mcs_site", providerSite);

                                                        return;
                                                    }
                                                    //No results
                                                },
                                                function (error) {

                                                    var alertStrings = { confirmButtonLabel: "Yes", text: "Orphaned Resource has been scheduled: " + result.name + " with Id: " + result.id + ". Please fix this resource and rebuild the Scheduling Package (or just re-link the equipment with the TMP Resource).", title: "Ophaned Resource." };
                                                    var alertOptions = { height: 120, width: 260 };
                                                    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                                                        function success(result) {
                                                            //console.log("Alert dialog closed");
                                                        },
                                                        function (error) {
                                                            //console.log(error.message);
                                                        }
                                                    );

                                                    //alert('Error occured while searching for valid participating site: ' + error.message);
                                                }
                                            );

                                            //If it wasn't a standalone VC, let's look within PRGs
                                            //Query Scheduling Resources where sr.cvt_resource.Id == resource.Id &&
                                            fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>";
                                            fetchXml += "  <entity name='cvt_participatingsite'>";
                                            fetchXml += "    <attribute name='cvt_participatingsiteid' />";
                                            fetchXml += "    <attribute name='cvt_name' />";
                                            fetchXml += "    <attribute name='cvt_site' />";
                                            fetchXml += "    <order attribute='cvt_name' descending='false' />";
                                            fetchXml += "    <filter type='and'>";
                                            fetchXml += "      <condition attribute='cvt_resourcepackage' operator='eq' value='" + schedulingPackage[0].id + "' />";
                                            fetchXml += "      <condition attribute='cvt_locationtype' operator='eq' value='917290000' />";
                                            fetchXml += "      <condition attribute='cvt_scheduleable' operator='eq' value='1' />";
                                            fetchXml += "      <condition attribute='statecode' operator='eq' value='0' />";
                                            fetchXml += "    </filter>";
                                            fetchXml += "    <link-entity name='cvt_schedulingresource' from='cvt_participatingsite' to='cvt_participatingsiteid' alias='ac'>";
                                            fetchXml += "      <filter type='and'>";
                                            fetchXml += "        <condition attribute='cvt_tmpresourcegroup' operator='not-null' />";
                                            fetchXml += "        <condition attribute='statecode' operator='eq' value='0' />";
                                            fetchXml += "      </filter>";
                                            fetchXml += "      <link-entity name='mcs_resourcegroup' from='mcs_resourcegroupid' to='cvt_tmpresourcegroup' alias='ad'>";
                                            fetchXml += "        <filter type='and'>";
                                            fetchXml += "          <condition attribute='statecode' operator='eq' value='0' />";
                                            fetchXml += "        </filter>";
                                            fetchXml += "        <link-entity name='mcs_groupresource' from='mcs_relatedresourcegroupid' to='mcs_resourcegroupid' alias='ae'>";
                                            fetchXml += "          <filter type='and'>";
                                            fetchXml += "            <condition attribute='mcs_relatedresourceid' operator='eq' value='{" + resultEquipment._mcs_relatedresource_value + "}' />";
                                            fetchXml += "            <condition attribute='statecode' operator='eq' value='0' />";
                                            fetchXml += "          </filter>";
                                            fetchXml += "        </link-entity>";
                                            fetchXml += "      </link-entity>";
                                            fetchXml += "    </link-entity>";
                                            fetchXml += "  </entity>";
                                            fetchXml += "</fetch>";

                                            fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);
                                            Xrm.WebApi.retrieveMultipleRecords("cvt_participatingsite", fetchXml).then(
                                                function success(resultPS2) {
                                                    var countValue = resultPS2.entities.length;
                                                    if (countValue > 0) {
                                                        var relatedSiteId = resultPS2.entities[0]._cvt_site_value;
                                                        var relatedSiteName = resultPS2.entities[0]["_cvt_site_value@OData.Community.Display.V1.FormattedValue"];
                                                        if (providerSite.getValue() == null)
                                                            MCS.mcs_Service_Activity.SetNewLookup(relatedSiteId, relatedSiteName, "mcs_site", providerSite);

                                                        return;
                                                    }
                                                    //No results
                                                },
                                                function (error) {

                                                    var alertStrings = { confirmButtonLabel: "Yes", text: "Error occured while searching for valid participating site: " + error.message, title: "Valid Participating Site." };
                                                    var alertOptions = { height: 120, width: 260 };
                                                    Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                                                        function success(result) {
                                                            //console.log("Alert dialog closed");
                                                        },
                                                        function (error) {
                                                            //console.log(error.message);
                                                        }
                                                    );

                                                    //alert('Error occured while searching for valid participating site: ' + error.message);
                                                }
                                            );
                                        }
                                    },
                                    function (error1) {

                                        var alertStrings = { confirmButtonLabel: "Yes", text: "Error occured while retrieving Resource: " + error1.message, title: "Error Retrieving Resource" };
                                        var alertOptions = { height: 120, width: 260 };
                                        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                                            function success(result) {
                                                //console.log("Alert dialog closed");
                                            },
                                            function (error) {
                                                //console.log(error.message);
                                            }
                                        );

                                        //alert('Error occured while retrieving Resource: ' + error1.message);
                                    }
                                );
                            }
                        },
                        function (error) {
                            //alert('Error occured while retrieving equipment: ' + error.message);

                            var alertStrings = { confirmButtonLabel: "Yes", text: "Error occured while retrieving equipment: " + error.message, title: "Error Retrieving Equipment" };
                            var alertOptions = { height: 120, width: 260 };
                            Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
                                function success(result) {
                                    //console.log("Alert dialog closed");
                                },
                                function (error) {
                                    //console.log(error.message);
                                }
                            );
                        }
                    );
                }
            }

            return;
        }
        else
            MCS.VIALogin.Login(formContext);
    }
};

/*MCS.mcs_Service_Activity.SetNewLookup = function (value, Name, LogicalName, targetField) {
    //debugger;
    if (targetField != null) {
        var obj = { id: value, entityType: LogicalName, name: Name }
        if (obj.name == null)
            targetField.setValue(null);
        else
            targetField.setValue([obj]);
    }
}*/

//Description: CreateName for Service Activity Subject
MCS.mcs_Service_Activity.CreateName = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var serviceType = formContext.getAttribute("mcs_servicetype").getValue();
    var serviceSubType = formContext.getAttribute("mcs_servicesubtype").getValue();
    var groupApptOption = formContext.getAttribute("mcs_groupappointment").getValue();
    var derivedResultField = "";
    if (serviceType != null)
        derivedResultField += serviceType[0].name + " ";
    if (serviceSubType != null)
        derivedResultField += " : " + serviceSubType[0].name + " ";
    if (groupApptOption === 1)
        derivedResultField += "Group Appointment";

    formContext.getAttribute("subject").setValue(derivedResultField);
};

////If group appointment, show pro site and patient rooms,
MCS.mcs_Service_Activity.GroupAppt = function (executionContext) {
    //debugger;
    var isPatResReqValue = true;
    var formContext = executionContext.getFormContext();
    var groupAppt = formContext.getAttribute("mcs_groupappointment").getValue();
    var patSite = formContext.getControl("mcs_relatedsite");
    var proSite = formContext.getControl("mcs_relatedprovidersite");

    var patRoomsTab = formContext.ui.tabs.get("tab_groupscheduling");
    //    var grouppatientsTab = Xrm.Page.ui.tabs.get("tab_grouppatients");
    //Patient site required
    //var isPatResReq = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue() == true;
    var isPatResReq = formContext.getAttribute("cvt_patientsiteresourcesrequired");
    var isPatResReqc = formContext.getControl("cvt_patientsiteresourcesrequired");

    var teleModala = formContext.getAttribute("cvt_telehealthmodality");
    var teleModalc = formContext.getControl("cvt_telehealthmodality");
    var isHomeMobile = formContext.getAttribute("cvt_type").getValue();

    if (groupAppt === true) {
        proSite.setVisible(true);
        isPatResReqValue = false;
        patSite.setVisible(false);
        patRoomsTab.setVisible(!isHomeMobile);
        formContext.getControl("customers").setDisabled(!isHomeMobile);

        formContext.getAttribute("mcs_relatedsite").setValue(null);
        formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel("required");
        formContext.getAttribute("mcs_relatedsite").setRequiredLevel("none");

        isPatResReqc.setVisible(false);


        var isVVC = formContext.getAttribute("cvt_type").getValue() == true;

        if (!isVVC) {
            teleModala.setValue(false);
            teleModala.fireOnChange();
            teleModalc.setVisible(true);
            teleModalc.setDisabled(true);
        }
        else {
            teleModala.setValue(false);
            teleModala.fireOnChange();
            teleModalc.setVisible(true);
        }
        teleModalc.setDisabled(true);

    }
    else {

        proSite.setVisible(false);
        patSite.setVisible(true);
        isPatResReqValue = true;
        patRoomsTab.setVisible(false);
        formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel("none");
        formContext.getAttribute("mcs_relatedsite").setRequiredLevel("required");
        //if (Xrm.Page.getAttribute("cvt_type").getValue() != true) {
        //    Xrm.Page.getAttribute("mcs_relatedprovidersite").setValue(null);
        //}

        teleModalc.setVisible(true);
        teleModala.setValue(false);
        teleModala.fireOnChange();
        teleModalc.setDisabled(false);

        if (isHomeMobile) {
            isPatResReqc.setVisible(true);

            proSite.setVisible(true);
            patSite.setVisible(false);
            isPatResReqValue = false;
            patRoomsTab.setVisible(!isHomeMobile);
            formContext.getControl("customers").setDisabled(!isHomeMobile);

            if (formContext.ui.getFormType() == MCS.mcs_Service_Activity.FORM_TYPE_CREATE)
                formContext.getAttribute("mcs_relatedsite").setValue(null);

            formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel("required");
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("none");
            teleModalc.setDisabled(true);

        }
        else {
            proSite.setVisible(false);
            patSite.setVisible(true);
            isPatResReqValue = true;
            patRoomsTab.setVisible(false);
            formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel("none");
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("required");
        }

        isPatResReq.fireOnChange();
    }

    //Cant set to null because its used as a check elsewhere
    //isPatResReq.setValue(true);

};


//Group SA - add PatSide AR ResSpec to Resources field
MCS.mcs_Service_Activity.GroupPat = function (patValues, executionContext) {
    //debugger;
    //debugger;
    var formContext = executionContext.getFormContext();
    if (formContext.getAttribute("mcs_groupappointment").getValue() === true && formContext.ui.getFormType() === 1) {
        if (patValues != null) {
            //break result into an array
            var resultArray = patValues.split("|");
            if (resultArray.length === 3) {
                //Turn it into an object
                var groupActivityParty = [];
                groupActivityParty[0] = {
                    id: resultArray[0],
                    resouceSpecId: resultArray[2],
                    typeName: resultArray[1],
                    entityType: resultArray[1],
                    name: "Search for All Resources"
                };

                //Set the object to the Resouce field
                formContext.getAttribute("resources").setValue(groupActivityParty);
            }
        }
    }
};
MCS.mcs_Service_Activity.ClearResources = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var schedulingPackage = formContext.getAttribute("cvt_relatedschedulingpackage").getValue();
    if (schedulingPackage == null) {
        formContext.getAttribute("resources").setValue(null);
        //formContext.getAttribute("resources").setSubmitMode();
    }
};

//If resources are on Service Activity, display the scheduling tab, otherwise hide it
MCS.mcs_Service_Activity.SchedulingInfo = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var resources = formContext.getAttribute("resources").getValue();
    var schedulingTab = formContext.ui.tabs.get("tab_scheduling").setVisible(resources.length > 0);
};

//TO DO: explore why this is running onSave - probably need to remove this
MCS.mcs_Service_Activity.filterSubGrid = function () {

    // var formContext = executionContext.getFormContext();
    var PatRoomsGrid = document.getElementById("PatientRooms"); //grid to filter 
    if (PatRoomsGrid == null) { //make sure the grid has loaded 
        setTimeout(function () { MCS.mcs_Service_Activity.filterSubGrid(); }, 500); //if the grid hasn�t loaded run this again when it has 
        return;
    }

    var schedulingPackageValue = Xrm.Page.getAttribute("cvt_relatedschedulingpackage").getValue(); //field to filter by 
    var schedulingPackageId = "00000000-0000-0000-0000-000000000000"; //if filter field is null display nothing 

    if (schedulingPackageValue != null)
        var schedulingPackageId = schedulingPackageValue[0].id;

    //fetch xml code which will retrieve all Pat Sites Related to this Service Activity.  
    var fetchXml =
        "<?xml version='1.0'?>" +
        "<fetch distinct='false' mapping='logical' output-format='xml-platform' version='1.0'>" +
        "<entity name='cvt_patientresourcegroup'>" +
        "<attribute name='cvt_roomcapacity'/>" +
        "<attribute name='cvt_type'/>" +
        "<attribute name='cvt_name'/>" +
        "<attribute name='cvt_patientresourcegroupid'/>" +
        "<order descending='false' attribute='cvt_name'/>" +
        "<filter type='and'>" +
        "<condition attribute='cvt_type' value='251920001' operator='eq'/>" +
        "<condition attribute='cvt_relatedtsaid' value='" + schedulingPackageId + "' operator='eq'/>" +
        "<condition attribute='statecode' value='0' operator='eq'/>" +
        "</filter>" +
        "</entity>" +
        "</fetch>";

    PatRoomsGrid.control.SetParameter("fetchXml", fetchXml); //set the fetch xml to the sub grid   
    PatRoomsGrid.control.Refresh(); //refresh the sub grid using the new fetch xml 
};

MCS.mcs_Service_Activity.EnforceChanges = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    formContext.getAttribute("resources").setSubmitMode("always");
    formContext.getAttribute("serviceid").setSubmitMode("always");
    formContext.getAttribute("scheduledstart").setSubmitMode("always");
    formContext.getAttribute("scheduledend").setSubmitMode("always");
    formContext.getAttribute("scheduleddurationminutes").setSubmitMode("always");
};


MCS.mcs_Service_Activity.TelehealthCheck = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var teleModala = formContext.getAttribute("cvt_telehealthmodality");
    var teleModalc = formContext.getControl("cvt_telehealthmodality");
    var type = formContext.getAttribute("cvt_type").getValue();
    var typec = formContext.getControl("cvt_type");
    var groupAppta = formContext.getAttribute("mcs_groupappointment");
    var groupApptc = formContext.getControl("mcs_groupappointment");


    if (type === false && teleModala.getValue() === true) {

        groupApptc.setDisabled(true);
        groupAppta.setValue(false);
    }
    else {
        groupApptc.setDisabled(false);
    }
};

MCS.mcs_Service_Activity.CVTtoHome = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var type = formContext.getAttribute("cvt_type").getValue();
    var typec = formContext.getControl("cvt_type");
    if (formContext.ui.getFormType() === MCS.mcs_Service_Activity.FORM_TYPE_CREATE) {
        typec.setDisabled(false);
    }
    var groupAppta = formContext.getAttribute("mcs_groupappointment");
    var groupApptc = formContext.getControl("mcs_groupappointment");

    var patSitea = formContext.getAttribute("mcs_relatedsite");
    var patSitec = formContext.getControl("mcs_relatedsite");

    var proSitea = formContext.getAttribute("mcs_relatedprovidersite");
    var proSitec = formContext.getControl("mcs_relatedprovidersite");

    var patients = formContext.getControl("customers");
    var patRoomsTab = formContext.ui.tabs.get("tab_groupscheduling");
    var grouppatientsTab = formContext.ui.tabs.get("tab_grouppatients");

    var teleModala = formContext.getAttribute("cvt_telehealthmodality");
    var teleModalc = formContext.getControl("cvt_telehealthmodality");

    var patientResourcesRequiredControl = formContext.getControl("cvt_patientsiteresourcesrequired");
    var isPatientResourcesRequired = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue();

    var telephonea = formContext.getAttribute("cvt_telephonecall");
    var telephonec = formContext.getControl("cvt_telephonecall");
    var patientResourcesRequiredAttribute = formContext.getAttribute("cvt_patientsiteresourcesrequired");

    if (type === true) { //Cvt to VA Video Visit
        patientResourcesRequiredControl.setVisible(true);


        teleModalc.setDisabled(true);
        teleModala.setValue(false);


        groupApptc.setVisible(true);
        if (groupAppta.getValue())
            formContext.getControl("customers").setDisabled(false);

        proSitec.setVisible(true);
        proSitea.setRequiredLevel("required");

        if (isPatientResourcesRequired) {
            patSitec.setVisible(true);
            patSitea.setRequiredLevel("required");
            proSitec.setVisible(false);
            proSitea.setRequiredLevel("none");
        }
        else {
            patSitea.setRequiredLevel("none");
            patSitec.setVisible(false);
            proSitec.setVisible(true);
            proSitea.setRequiredLevel("required");
        }

        patRoomsTab.setVisible(false);

        groupApptc.setVisible(true);
        groupAppta.fireOnChange();
    }
    else { //VA Video Visit to Clinic based
        patientResourcesRequiredControl.setVisible(false);

        patientResourcesRequiredAttribute.setValue(false);
        telephonea.setValue(false);


        if (formContext.ui.getFormType() === MCS.mcs_Service_Activity.FORM_TYPE_CREATE) {
            proSitea.setValue(null);
        }

        proSitec.setVisible(false);
        proSitea.setRequiredLevel("none");

        patSitec.setVisible(true);
        patSitea.setRequiredLevel("required");

        groupApptc.setVisible(true);
        groupAppta.fireOnChange();

        teleModalc.setVisible(true);
        teleModala.fireOnChange();
        teleModalc.setDisabled(false);
        teleModala.setValue(false);

    }
};

MCS.mcs_Service_Activity.HandlePatientSiteResourcesRequiredChange = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var groupAppt = formContext.getAttribute("mcs_groupappointment");
    var groupApptc = formContext.getControl("mcs_groupappointment");
    var type = formContext.getAttribute("cvt_type").getValue();
    var isPatientSiteResourceRequired = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue();
    var telephoneCalla = formContext.getAttribute("cvt_telephonecall").getValue();
    var telephoneCallc = formContext.getControl("cvt_telephonecall");


    if (type === false && isPatientSiteResourceRequired === false) {
        formContext.getControl("mcs_relatedsite").setVisible(true);
        formContext.getAttribute("mcs_relatedsite").setRequiredLevel('required');
        formContext.getControl("mcs_relatedprovidersite").setVisible(false);
        formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel('none');

        if (formContext.ui.getFormType() === MCS.mcs_Service_Activity.FORM_TYPE_CREATE) {
            formContext.getAttribute("mcs_relatedsite").setValue(null);
            formContext.getAttribute("mcs_relatedprovidersite").setValue(null);
            formContext.getAttribute("serviceid").setValue(null);
            formContext.getAttribute("cvt_relatedschedulingpackage").setValue(null);
            formContext.getAttribute("mcs_servicetype").setValue(null);
        }
    }
    else if (type === false && isPatientSiteResourceRequired === true) {
        formContext.getControl("mcs_relatedsite").setVisible(true);
        formContext.getAttribute("mcs_relatedsite").setRequiredLevel('required');
        formContext.getControl("mcs_relatedprovidersite").setVisible(false);
        formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel('none');

        if (formContext.ui.getFormType() === MCS.mcs_Service_Activity.FORM_TYPE_CREATE) {
            formContext.getAttribute("mcs_relatedsite").setValue(null);
            formContext.getAttribute("mcs_relatedprovidersite").setValue(null);
            formContext.getAttribute("serviceid").setValue(null);
            formContext.getAttribute("cvt_relatedschedulingpackage").setValue(null);
            formContext.getAttribute("mcs_servicetype").setValue(null);
        }
    }
    else if (type === true && isPatientSiteResourceRequired === false) {
        formContext.getControl("mcs_relatedsite").setVisible(false);
        formContext.getAttribute("mcs_relatedsite").setRequiredLevel('none');
        formContext.getControl("mcs_relatedprovidersite").setVisible(true);
        formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel('required');

        if (formContext.ui.getFormType() === MCS.mcs_Service_Activity.FORM_TYPE_CREATE) {
            formContext.getAttribute("mcs_relatedsite").setValue(null);
            formContext.getAttribute("mcs_relatedprovidersite").setValue(null);
            formContext.getAttribute("serviceid").setValue(null);
            formContext.getAttribute("cvt_relatedschedulingpackage").setValue(null);
            formContext.getAttribute("mcs_servicetype").setValue(null);
        }
    }
    else if (type === true && isPatientSiteResourceRequired === true) {
        formContext.getControl("mcs_relatedsite").setVisible(true);
        formContext.getAttribute("mcs_relatedsite").setRequiredLevel('required');
        formContext.getControl("mcs_relatedprovidersite").setVisible(false);
        formContext.getAttribute("mcs_relatedprovidersite").setRequiredLevel('none');

        if (formContext.ui.getFormType() === MCS.mcs_Service_Activity.FORM_TYPE_CREATE) {
            formContext.getAttribute("mcs_relatedsite").setValue(null);
            formContext.getAttribute("mcs_relatedprovidersite").setValue(null);
            formContext.getAttribute("serviceid").setValue(null);
            formContext.getAttribute("cvt_relatedschedulingpackage").setValue(null);
            formContext.getAttribute("mcs_servicetype").setValue(null);
        }
    }

    //Handle Group seperately
    if (isPatientSiteResourceRequired) {
        //formContext.getControl("mcs_groupappointment").setVisible(false);
        groupApptc.setVisible(false);
        groupAppt.setValue(false);
    }
    else {
        if (telephoneCalla === true) {
            //.getControl("mcs_groupappointment").setVisible(false);
            groupApptc.setVisible(false);
        }
        else {
            //formContext.getControl("mcs_groupappointment").setVisible(true);
            groupApptc.setVisible(true);
        }
    }
};

MCS.mcs_Service_Activity.BlockAddPatient = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();
    var patientObj = formContext.getAttribute("customers");
    var patients = patientObj != null ? patientObj.getValue() : [];
    var newPatsAdded = MCS.mcs_Service_Activity.compareArrays(MCS.Patients, patients);
    if (newPatsAdded.length === 0) {
        //Determine if we want to re-build the cached patients list after removing a veteran - 
        //scenario: if you remove a veteran - click away - and then try to add a new one, should the one that got removed get added back or not?  
        //    MCS.Patients = Xrm.Page.getAttribute("optionalattendees").getValue();
        return;
    }
    else {
        //alert("You can only add patients through the Patient Search.  Not adding: " + newPatsAdded);

        var alertStrings = { confirmButtonLabel: "Yes", text: "You can only add patients through the Patient Search.  Not adding: " + newPatsAdded, title: "Adding Patient" };
        var alertOptions = { height: 120, width: 260 };
        Xrm.Navigation.openAlertDialog(alertStrings, alertOptions).then(
            function success(result) {
                //console.log("Alert dialog closed");
            },
            function (error) {
                //console.log(error.message);
            }
        );

        patientObj.setValue(MCS.Patients);
    }
};

MCS.mcs_Service_Activity.compareArrays = function (cachedPatients, newPatients) {
    //debugger;
    var newPats = [];
    var newPatString = "";
    if (newPatients == null)
        return "";
    for (var i in newPatients) {
        var alreadyExists = false;
        var newPatIdObj = newPatients[i];
        if (newPatIdObj != null) {
            var newPatId = MCS.cvt_Common.TrimBookendBrackets(newPatIdObj.id.toLowerCase());
            for (var j in cachedPatients) {
                var cachedPatientObj = cachedPatients[j];
                var cachedPatientObjId = MCS.cvt_Common.TrimBookendBrackets(cachedPatientObj.id.toLowerCase());
                if (cachedPatientObj != null && newPatId == cachedPatientObjId) {
                    alreadyExists = true;
                    break;
                }
            }
        }
        if (!alreadyExists) {
            newPats.push(newPatIdObj.name);
        }
    }
    if (newPats.length > 0) {

        for (var pat in newPats) {
            newPatString += newPats[pat] + "; ";
        }
        newPatString = newPatString.substr(0, newPatString.length - 2)
    }
    return newPatString;
};

var appointmentModality = {
    "CVT": 178970000,
    "SFT": 178970001,
    "VVC": 178970002,
    "VVCw/PSRR": 178970003,
    "PHONE": 178970004,
    "PHONEw/PSRR": 178970005,
    "CVTGRP": 178970006,
    "VVCGRP": 178970007
}

MCS.mcs_Service_Activity.SchedulingPackageFiltersHide = function (executionContext) {
    var formContext = executionContext.getFormContext();
    // formContext.ui.setFormNotification("Please use Appointment Modality DROPDOWN, in future Type, GroupAppointment, Telehealth Modality, Patient Site Resources Required and Telephonecall fields will be hidden", "WARNING", "warningId");
    var typeVisible = formContext.getControl("cvt_type");
    var groupapptVisible = formContext.getControl("mcs_groupappointment");
    var telehealthmodalityVisible = formContext.getControl("cvt_telehealthmodality");
    var patientsiteresourcesrequiredVisible = formContext.getControl("cvt_patientsiteresourcesrequired");
    var telephonecallVisible = formContext.getControl("cvt_telephonecall");
    typeVisible.setDisabled(true);
    groupapptVisible.setDisabled(true);
    telehealthmodalityVisible.setDisabled(true);
    patientsiteresourcesrequiredVisible.setDisabled(true);
    telephonecallVisible.setDisabled(true);
}

MCS.mcs_Service_Activity.SchedulingPackageFilters = function (executionContext) {
    var formContext = executionContext.getFormContext();
    // formContext.ui.clearFormNotification("warningId");
    // formContext.ui.setFormNotification("Please use Appointment Modality DROPDOWN, in future Type, GroupAppointment, Telehealth Modality, Patient Site Resources Required and Telephonecall fields will be hidden", "WARNING", "warningId")
    var appointmentModalityValue = formContext.getAttribute("tmp_appointmentmodality").getValue();

    var type = formContext.getAttribute("cvt_type");
    var groupappt = formContext.getAttribute("mcs_groupappointment");
    var telehealthmodality = formContext.getAttribute("cvt_telehealthmodality");
    var patientsiteresourcesrequired = formContext.getAttribute("cvt_patientsiteresourcesrequired");
    var telephonecall = formContext.getAttribute("cvt_telephonecall");

    var patientSite = formContext.getControl("mcs_relatedsite");
    var providerSite = formContext.getControl("mcs_relatedprovidersite");

    var typeVisible = formContext.getControl("cvt_type");
    var groupapptVisible = formContext.getControl("mcs_groupappointment");
    var telehealthmodalityVisible = formContext.getControl("cvt_telehealthmodality");
    var patientsiteresourcesrequiredVisible = formContext.getControl("cvt_patientsiteresourcesrequired");
    var telephonecallVisible = formContext.getControl("cvt_telephonecall");
    var patRoomsTab = formContext.ui.tabs.get("tab_groupscheduling");
    var appointmentmodalityVisible = formContext.getControl("tmp_appointmentmodality");
    if (formContext.ui.getFormType() !== 1) {
        appointmentmodalityVisible.setDisabled(true);
    }

    switch (appointmentModalityValue) {
        case appointmentModality.CVT:
            type.setValue(false);
            telephonecall.setValue(false);
            patientsiteresourcesrequired.setValue(false);
            groupappt.setValue(false);
            telehealthmodality.setValue(false);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(true);
            telehealthmodalityVisible.setVisible(true);
            telephonecallVisible.setVisible(false);
            patientsiteresourcesrequiredVisible.setVisible(false);
            patientSite.setVisible(true);
            providerSite.setVisible(false);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("required");
            patRoomsTab.setVisible(false);
            break;
        case appointmentModality.SFT:
            type.setValue(false);
            telephonecall.setValue(false);
            patientsiteresourcesrequired.setValue(false);
            groupappt.setValue(false);
            telehealthmodality.setValue(true);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(true);
            telehealthmodalityVisible.setVisible(true);
            telephonecallVisible.setVisible(false);
            patientsiteresourcesrequiredVisible.setVisible(false);
            patientSite.setVisible(true);
            providerSite.setVisible(false);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("required");
            patRoomsTab.setVisible(false);
            break;
        case appointmentModality.VVC:
            type.setValue(true);
            telephonecall.setValue(false);
            patientsiteresourcesrequired.setValue(false);
            groupappt.setValue(false);
            telehealthmodality.setValue(false);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(true);
            telehealthmodalityVisible.setVisible(true);
            telephonecallVisible.setVisible(true);
            patientsiteresourcesrequiredVisible.setVisible(true);
            patientSite.setVisible(false);
            providerSite.setVisible(true);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("none");
            patRoomsTab.setVisible(false);
            break;
        case appointmentModality["VVCw/PSRR"]:
            type.setValue(true);
            telephonecall.setValue(false);
            patientsiteresourcesrequired.setValue(true);
            groupappt.setValue(false);
            telehealthmodality.setValue(false);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(false);
            telehealthmodalityVisible.setVisible(true);
            telephonecallVisible.setVisible(true);
            patientsiteresourcesrequiredVisible.setVisible(true);
            patientSite.setVisible(true);
            providerSite.setVisible(false);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("required");
            patRoomsTab.setVisible(false);
            break;
        case appointmentModality.PHONE:
            type.setValue(true);
            telephonecall.setValue(true);
            patientsiteresourcesrequired.setValue(false);
            groupappt.setValue(false);
            telehealthmodality.setValue(false);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(false);
            telehealthmodalityVisible.setVisible(false);
            telephonecallVisible.setVisible(true);
            patientsiteresourcesrequiredVisible.setVisible(true);
            patientSite.setVisible(false);
            providerSite.setVisible(true);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("none");
            patRoomsTab.setVisible(false);
            break;
        case appointmentModality["PHONEw/PSRR"]:
            type.setValue(true);
            telephonecall.setValue(true);
            patientsiteresourcesrequired.setValue(true);
            groupappt.setValue(false);
            telehealthmodality.setValue(false);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(false);
            telehealthmodalityVisible.setVisible(false);
            telephonecallVisible.setVisible(true);
            patientsiteresourcesrequiredVisible.setVisible(true);
            patientSite.setVisible(true);
            providerSite.setVisible(false);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("required");
            patRoomsTab.setVisible(false);
            break;
        case appointmentModality.CVTGRP:
            type.setValue(false);
            telephonecall.setValue(false);
            patientsiteresourcesrequired.setValue(false);
            groupappt.setValue(true);
            telehealthmodality.setValue(false);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(true);
            telehealthmodalityVisible.setVisible(true);
            telephonecallVisible.setVisible(false);
            patientsiteresourcesrequiredVisible.setVisible(false);
            patientSite.setVisible(false);
            providerSite.setVisible(true);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("none");
            patRoomsTab.setVisible(true);
            break;
        case appointmentModality.VVCGRP:
            type.setValue(true);
            telephonecall.setValue(false);
            patientsiteresourcesrequired.setValue(false);
            groupappt.setValue(true);
            telehealthmodality.setValue(false);
            typeVisible.setVisible(true);
            groupapptVisible.setVisible(true);
            telehealthmodalityVisible.setVisible(true);
            telephonecallVisible.setVisible(true);
            patientsiteresourcesrequiredVisible.setVisible(false);
            patientSite.setVisible(false);
            providerSite.setVisible(true);
            formContext.getAttribute("mcs_relatedsite").setRequiredLevel("none");
            patRoomsTab.setVisible(false);
            break;
    }

    MCS.mcs_Service_Activity_OnLoad.PhoneModalityDisplayCheck(executionContext);
}


MCS.mcs_Service_Activity.setAppointmentModality = function (executionContext) {
    //debugger;
    var formContext = executionContext.getFormContext();

    if (formContext.ui.getFormType() === 1) {
        var type = formContext.getAttribute("cvt_type").getValue();
        var groupappt = formContext.getAttribute("mcs_groupappointment").getValue();
        var telehealthmodality = formContext.getAttribute("cvt_telehealthmodality").getValue();
        var patientsiteresourcesrequired = formContext.getAttribute("cvt_patientsiteresourcesrequired").getValue();
        var telephonecall = formContext.getAttribute("cvt_telephonecall").getValue();
        //3 more variables to store the 3 fields values

        switch (type) {
            case false:
                switch (groupappt) {
                    case false:
                        switch (telehealthmodality) {
                            case false:
                                formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality.CVT);
                                break;
                            case true:
                                formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality.SFT);
                                break;
                        }
                        break;
                    case true:
                        switch (telehealthmodality) {
                            case false:
                                formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality.CVTGRP);
                                break;
                        }
                        break;
                }
                break;
            case true:
                switch (groupappt) {
                    case false:

                        //switch (telehealthmodality) {
                        //	case false:
                        //		formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality.VVCGRP);
                        //		break;
                        //}

                        switch (patientsiteresourcesrequired) {
                            case false:
                                switch (telephonecall) {
                                    case false:
                                        switch (telehealthmodality) {
                                            case false:
                                                formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality.VVC);
                                                break;
                                        }
                                        break;
                                    case true:
                                        formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality.PHONE);
                                        break;
                                }
                                break;
                            case true:
                                switch (telephonecall) {
                                    case false:
                                        switch (telehealthmodality) {
                                            case false:
                                                formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality["VVCw/PSRR"]);
                                                break;
                                        }
                                        break;
                                    case true:
                                        formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality["PHONEw/PSRR"]);
                                        break;
                                }
                                break;
                        }

                        break;

                    case true:

                        switch (telehealthmodality) {
                            case false:
                                formContext.getAttribute("tmp_appointmentmodality").setValue(appointmentModality.VVCGRP);
                                break;
                        }

                        break
                }
                break;
        }
    }
};

MCS.mcs_Service_Activity.ParseResources = function (formContext) {
    console.log("Begin ParseResource");
    debugger;
    var formContext = formContext.getFormContext();
    var resources = formContext.getAttribute("resources").getValue();
    var providerSiteRooms = "",
        patientSiteRooms = "",
        providerSiteTechnologies = "",
        patientSiteTechnologies = "",
        providerSiteClinics = "",
        patientSiteClinics = "",
        resourceProviders = "",
        resourcePatientSiteUsers = "";

    var schedulingPackageId = formContext.getAttribute("cvt_relatedschedulingpackage").getValue()[0].id.replace("{", "").replace("}", "");

    //Reset fields if resources field has been reset
    if (resources === null || resources.length === 0) {
        formContext.getAttribute("tmp_scheduledprovidersiteroomslist").setValue(null);
        formContext.getAttribute("tmp_scheduledpatientsiteroomslist").setValue(null);

        formContext.getAttribute("tmp_scheduledprovidersitetechnologieslist").setValue(null);
        formContext.getAttribute("tmp_scheduledpatientsitetechnologieslist").setValue(null);

        formContext.getAttribute("tmp_scheduledprovidersitecliniclist").setValue(null);
        formContext.getAttribute("tmp_scheduledpatientsitecliniclist").setValue(null);

        formContext.getAttribute("tmp_scheduledproviderslist").setValue(null);
        formContext.getAttribute("tmp_scheduledpatientsiteuserslist").setValue(null);
    }
    else {
        const re = /\s*(?:;|$)\s*/
        var equipmentId = null;

        for (var i = 0; i < resources.length; i++) {
            equipmentId = resources[i].id;
            switch (resources[i].entityType) {
                case "equipment":
                    MCS.mcs_Service_Activity.GetResourceEquipment(schedulingPackageId, equipmentId)
                        .done(function (result) {
                            if (result.type !== undefined && result.type !== null) {
                                var siteName = result.siteName;
                                var resourceSiteName = siteName.substr(0, siteName.indexOf("(")).trim();
                                console.log(resourceSiteName);
                                switch (result.type) {
                                    case "Room":
                                        if (result.resourceLocation === "Provider") {
                                            if (providerSiteRooms.length === 0) providerSiteRooms = result.name;
                                            else providerSiteRooms += "; " + result.name;
                                            formContext.getAttribute("tmp_scheduledprovidersiteroomslist").setValue(providerSiteRooms);
                                        }
                                        else if (result.resourceLocation === "Patient") {
                                            if (patientSiteRooms.length === 0) patientSiteRooms = result.name;
                                            else patientSiteRooms += "; " + result.name;
                                            formContext.getAttribute("tmp_scheduledpatientsiteroomslist").setValue(patientSiteRooms);
                                        }
                                        break;
                                    case "Technology":
                                        if (result.resourceLocation === "Provider") {
                                            if (providerSiteTechnologies.length === 0) providerSiteTechnologies = result.name;
                                            else providerSiteTechnologies += "; " + result.name;
                                            formContext.getAttribute("tmp_scheduledprovidersitetechnologieslist").setValue(providerSiteTechnologies);
                                        }
                                        else if (result.resourceLocation === "Patient") {
                                            if (patientSiteTechnologies.length === 0) patientSiteTechnologies = result.name;
                                            else patientSiteTechnologies += "; " + result.name;
                                            formContext.getAttribute("tmp_scheduledpatientsitetechnologieslist").setValue(patientSiteTechnologies);
                                        }
                                        break;
                                    case "Vista Clinic":
                                        if (result.resourceLocation === "Provider") {
                                            if (providerSiteClinics.length === 0) providerSiteClinics = result.name;
                                            else providerSiteClinics += "; " + result.name;
                                            formContext.getAttribute("tmp_scheduledprovidersitecliniclist").setValue(providerSiteClinics);
                                        }
                                        else if (result.resourceLocation === "Patient") {
                                            if (patientSiteClinics.length === 0) patientSiteClinics = result.name;
                                            else patientSiteClinics += "; " + result.name;
                                            formContext.getAttribute("tmp_scheduledpatientsitecliniclist").setValue(patientSiteClinics);
                                        }
                                        break;
                                }
                            }
                        });
                    break;
                case "systemuser":
                    MCS.mcs_Service_Activity.GetResourceUser(schedulingPackageId, equipmentId)
                        .done(function (result) {
                            console.log(result);
                            if (result.resourceLocation == "Patient") {
                                if (resourcePatientSiteUsers.length === 0) resourcePatientSiteUsers = result.fullname;
                                else resourcePatientSiteUsers += "; " + result.fullname;
                                formContext.getAttribute("tmp_scheduledpatientsiteuserslist").setValue(resourcePatientSiteUsers);
                            }
                            if (result.resourceLocation == "Provider") {
                                if (resourceProviders.length === 0) resourceProviders = result.fullname;
                                else resourceProviders += "; " + result.fullname;
                                formContext.getAttribute("tmp_scheduledproviderslist").setValue(resourceProviders);
                            }
                        });
                    break;
                default:
            }
        }
        console.log("End ParseResource");
    }
};

MCS.mcs_Service_Activity.GetResourceEquipment = function (schedulingPackageId, equipmentId) {
    var deferred = new $.Deferred();
    var resource = {
        name: null,
        resourceLocation: null,
        siteName: null,
        type: null
    };

    var fetchXml = "<fetch distinct=\"true\">" +
        "<entity name=\"equipment\">" +
        "<attribute name=\"cvt_type\" />" +
        "<attribute name=\"name\" />" +
        "<attribute name=\"siteid\" />" +
        "<filter>" +
        "<condition attribute=\"equipmentid\" operator=\"eq\" value=\"" + equipmentId + "\" uitype=\"equipment\" />" +
        "</filter>" +
        "<link-entity name=\"mcs_resource\" from=\"mcs_resourceid\" to=\"mcs_relatedresource\">" +
        "<link-entity name=\"mcs_groupresource\" from=\"mcs_relatedresourceid\" to=\"mcs_resourceid\" link-type=\"outer\">" +
        "<link-entity name=\"mcs_resourcegroup\" from=\"mcs_resourcegroupid\" to=\"mcs_relatedresourcegroupid\" link-type=\"outer\">" +
        "<link-entity name=\"cvt_schedulingresource\" from=\"cvt_tmpresourcegroup\" to=\"mcs_resourcegroupid\" link-type=\"outer\">" +
        "<link-entity name=\"cvt_participatingsite\" from=\"cvt_participatingsiteid\" to=\"cvt_participatingsite\" link-type=\"outer\" alias=\"ParticipatingSite1\">" +
        "<attribute name=\"cvt_locationtype\" />" +
        "<filter>" +
        "<condition attribute=\"cvt_resourcepackage\" operator=\"eq\" value=\"" + schedulingPackageId + "\" uitype=\"cvt_resourcepackage\" />" +
        "</filter>" +
        "</link-entity>" +
        "</link-entity>" +
        "</link-entity>" +
        "</link-entity>" +
        "<link-entity name=\"cvt_schedulingresource\" from=\"cvt_tmpresource\" to=\"mcs_resourceid\" link-type=\"outer\">" +
        "<link-entity name=\"cvt_participatingsite\" from=\"cvt_participatingsiteid\" to=\"cvt_participatingsite\" link-type=\"outer\" alias=\"ParticipatingSite2\">" +
        "<attribute name=\"cvt_locationtype\" />" +
        "<filter>" +
        "<condition attribute=\"cvt_resourcepackage\" operator=\"eq\" value=\"" + schedulingPackageId + "\" />" +
        "</filter>" +
        "</link-entity>" +
        "</link-entity>" +
        "</link-entity>" +
        "</entity>" +
        "</fetch>";

    console.log("GetResourceEquipment fetchXml");
    console.log(fetchXml);
    fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);
    Xrm.WebApi.retrieveMultipleRecords("equipment", fetchXml).then(
        function success(results) {
            console.log(results);
            debugger;
            if (results !== null && results.entities && results.entities.length > 0) {
                results.entities.forEach((equipment) => {
                    if (equipment["ParticipatingSite1.cvt_locationtype"] !== undefined ||
                        equipment["ParticipatingSite2.cvt_locationtype"] !== undefined) {

                        resource.resourceLocation = equipment["ParticipatingSite1.cvt_locationtype"] !== undefined
                            ? equipment["ParticipatingSite1.cvt_locationtype@OData.Community.Display.V1.FormattedValue"]
                            : equipment["ParticipatingSite2.cvt_locationtype@OData.Community.Display.V1.FormattedValue"];

                        resource.name = equipment.name;
                        resource.siteName = equipment["_siteid_value@OData.Community.Display.V1.FormattedValue"]
                        resource.type = equipment["cvt_type@OData.Community.Display.V1.FormattedValue"]

                        deferred.resolve(resource);
                    }
                });
            }
            else deferred.resolve(resource);
        },
        function (error) {
            console.log(error);
            deferred.fail();
        }
    );

    return deferred.promise();
};

MCS.mcs_Service_Activity.GetResourceUser = function (schedulingPackageId, userId) {
    var deferred = new $.Deferred();
    var resourceUser = {
        fullname: null,
        resourceLocation: null
    };

    var fetchXml = "<fetch>" +
        "<entity name=\"cvt_resourcepackage\">" +
        "<attribute name=\"cvt_resourcepackageid\"/>" +
        "<filter>" +
        "<condition attribute=\"cvt_resourcepackageid\" operator=\"eq\" value=\"" + schedulingPackageId + "\"/>" +
        "</filter>" +
        "<link-entity name=\"cvt_participatingsite\" from=\"cvt_resourcepackage\" to=\"cvt_resourcepackageid\" link-type=\"inner\">" +
        "<attribute name=\"cvt_locationtype\" />" +
        "<link-entity name=\"cvt_schedulingresource\" from=\"cvt_participatingsite\" to=\"cvt_participatingsiteid\" link-type=\"outer\">" +
        "<attribute name=\"cvt_schedulingresourceid\"/>" +
        "<filter>" +
        "<condition attribute=\"cvt_user\" operator=\"eq\" value=\"" + userId + "\"/>" +
        "<condition attribute=\"cvt_resourcetype\" operator=\"eq\" value=\"99999999\"/>" +
        "</filter>" +
        "<link-entity name=\"systemuser\" from=\"systemuserid\" to=\"cvt_user\" alias=\"ResourceUser1\" link-type=\"outer\">" +
        "<attribute name=\"systemuserid\"/>" +
        "<attribute name=\"fullname\"/>" +
        "<filter/>" +
        "</link-entity>" +
        "</link-entity>" +
        "<link-entity name=\"cvt_schedulingresource\" from=\"cvt_participatingsite\" to=\"cvt_participatingsiteid\" link-type=\"outer\">" +
        "<attribute name=\"cvt_schedulingresourceid\"/>" +
        "<filter type=\"or\">" +
        "<condition attribute=\"cvt_resourcetype\" operator=\"eq\" value=\"100000000\"/>" +
        "</filter>" +
        "<link-entity name=\"systemuser\" from=\"systemuserid\" to=\"cvt_user\" link-type=\"outer\" alias=\"ResourceUser2\">" +
        "<attribute name=\"systemuserid\"/>" +
        "<attribute name=\"fullname\"/>" +
        "<filter>" +
        "<condition attribute=\"systemuserid\" operator=\"eq\" value=\"" + userId + "\"/>" +
        "</filter>" +
        "</link-entity>" +
        "</link-entity>" +
        "<link-entity name=\"cvt_schedulingresource\" from=\"cvt_participatingsite\" to=\"cvt_participatingsiteid\" link-type=\"outer\">" +
        "<attribute name=\"cvt_schedulingresourceid\"/>" +
        "<filter type=\"or\">" +
        "<condition attribute=\"cvt_resourcetype\" operator=\"eq\" value=\"917290000\"/>" +
        "<condition attribute=\"cvt_resourcetype\" operator=\"eq\" value=\"100000000\"/>" +
        "</filter>" +
        "<link-entity name=\"mcs_resourcegroup\" from=\"mcs_resourcegroupid\" to=\"cvt_tmpresourcegroup\" link-type=\"outer\">" +
        "<link-entity name=\"mcs_groupresource\" from=\"mcs_relatedresourcegroupid\" to=\"mcs_resourcegroupid\" link-type=\"outer\">" +
        "<link-entity name=\"systemuser\" from=\"systemuserid\" to=\"mcs_relateduserid\" alias=\"ResourceUser3\" link-type=\"outer\">" +
        "<attribute name=\"systemuserid\"/>" +
        "<attribute name=\"fullname\"/>" +
        "<filter>" +
        "<condition attribute=\"systemuserid\" operator=\"eq\" value=\"" + userId + "\"/>" +
        "</filter>" +
        "</link-entity>" +
        "</link-entity>" +
        "</link-entity>" +
        "</link-entity>" +
        "</link-entity>" +
        "</entity>" +
        "</fetch>";

    console.log("GetResourceUser fetchXml");
    console.log(fetchXml);
    fetchXml = "?fetchXml=" + encodeURIComponent(fetchXml);
    Xrm.WebApi.retrieveMultipleRecords("cvt_resourcepackage", fetchXml).then(
        function success(results) {
            console.log(results);
            //debugger;
            if (results !== null && results.entities && results.entities.length > 0) {
                results.entities.forEach((user) => {
                    if (user["ResourceUser1.systemuserid"] !== undefined ||
                        user["ResourceUser2.systemuserid"] !== undefined ||
                        user["ResourceUser3.systemuserid"] !== undefined) {

                        resourceUser.fullname = user["ResourceUser1.systemuserid"] !== undefined
                            ? user["ResourceUser1.fullname"]
                            : user["ResourceUser2.systemuserid"] !== undefined
                                ? resourceUser.fullname = user["ResourceUser2.fullname"]
                                : resourceUser.fullname = user["ResourceUser3.fullname"];

                        resourceUser.resourceLocation = user["cvt_participatingsite1.cvt_locationtype@OData.Community.Display.V1.FormattedValue"];

                        deferred.resolve(resourceUser);
                    }
                });
            }
            else deferred.resolve();
        },
        function (error) {
            console.log(error);
            deferred.fail();
        }
    );

    return deferred.promise();
};
