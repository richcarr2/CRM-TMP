if (!this.JSON) {
    this.JSON = {};
} (function () {
    function f(n) {
        return n < 10 ? '0' + n : n;
    }
    if (typeof Date.prototype.toJSON !== 'function') {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z': null;
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap, indent, meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    },
    rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap,
        partial, value = holder[key];
        if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }
        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }
        switch (typeof value) {
        case 'string':
            return quote(value);
        case 'number':
            return isFinite(value) ? String(value) : 'null';
        case 'boolean':
            case 'null':
            return String(value);
        case 'object':
            if (!value) {
                return 'null';
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }
                v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ': ':') + v);
                        }
                    }
                }
            } else {
                for (k in value) {
                    if (Object.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ': ':') + v);
                        }
                    }
                }
            }
            v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }
    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';
            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            } else if (typeof space === 'string') {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }
            return str('', {
                '': value
            });
        };
    }
    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                j = eval('(' + text + ')');
                return typeof reviver === 'function' ? walk({
                    '': j
                },
                '') : j;
            }
            throw new SyntaxError('JSON.parse');
        };
    }
} ());
/*globales Xrm, $ */

///
/// AlfaPeople CRM 2011 CrmRestKit
///
/// Based on 'MSCRM4 Web Service Toolkit for JavaScript v2.1' (http://crmtoolkit.codeplex.com/releases/view/48329)
/// and XrmSvcTookit 'http://xrmsvctoolkit.codeplex.com/
///
/// Credits:
///     Daniel Cai (getClientUrl, associate, disassociate)
///     Matt (https://www.codeplex.com/site/users/view/MattMatt)
///
/// @author:
///     Daniel Rene Thul, drt@alfapeople.com
///
/// @version:
///     2.6.1
///
/// requires (jquery.1.7.2.js, JSON2.js)
///
var CrmRestKit = (function (window, document, undefined) {
    'use strict';

    ///
    /// Private members
    ///
    var ODATA_ENDPOINT = "/XRMServices/2011/OrganizationData.svc",
    version = '2.6.0';

    ///
    /// Private function to the context object.
    ///
    function getContext() {

        if (typeof GetGlobalContext !== "undefined") {
            /*ignore jslint start*/
            return GetGlobalContext();
            /*ignore jslint end*/

        }
        else {

            if (typeof Xrm !== "undefined") {
                return Xrm.Page.context;
            }
            else {

                throw new Error("Context is not available.");
            }
        }
    }

    ///
    /// Private function to return the server URL from the context
    ///
    function getClientUrl() {

        var url = null,
        localServerUrl = window.location.protocol + "//" + window.location.host,
        context = getContext();

        if (Xrm.Page.context.getClientUrl !== undefined) {
            // since version SDK 5.0.13
            // http://www.magnetismsolutions.com/blog/gayan-pereras-blog/2013/01/07/crm-2011-polaris-new-xrm.page-method
            url = Xrm.Page.context.getClientUrl();
        }
        else if (context.isOutlookClient() && !context.isOutlookOnline()) {
            url = localServerUrl;
        }
        else {
            url = context.getClientUrl();
            url = url.replace(/^(http|https):\/\/([_a-zA-Z0-9\-\.]+)(:([0-9]{1,5}))?/, localServerUrl);
            url = url.replace(/\/$/, "");
        }
        return url;
    }

    ///
    /// Private function to return the path to the REST endpoint.
    ///
    function getODataPath() {

        return getClientUrl() + ODATA_ENDPOINT;
    }

    ///
    /// Returns an object that reprensts a entity-reference
    ///
    function entityReferenceFactory(id, opt_logicalName) {

        var reference = null;

        if (id !== undefined && id !== null) {

            reference = {
                __metadata: {
                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                },
                Id: id
            };

            if (opt_logicalName !== undefined && opt_logicalName !== null) {

                reference.LogicalName = opt_logicalName;
            }
        }

        return reference;
    }

    ///
    /// Returns an object that reprensts a option-set-value
    ///
    function optionSetValueFactory(option_value) {

        return {
            __metadata: {
                type: 'Microsoft.Crm.Sdk.Data.Services.OptionSetValue'
            },
            Value: option_value
        };
    }

    ///
    /// Returns an object that represents an money value
    ///
    function moneyValueFactory(value) {

        return {
            __metadata: {
                type: 'Microsoft.Crm.Sdk.Data.Services.Money'
            },
            Value: value
        };
    }

    ///
    /// Parses the ODATA date-string into a date-object
    /// All queries return a date in the format "/Date(1368688809000)/"
    ///
    function parseODataDate(value) {

        return new Date(parseInt(value.replace('/Date(', '').replace(')/', ''), 10));
    }

    ///
    /// Generics ajax-call funciton. Returns a promise object
    ///
    function doRequest(options, asyn) {

        // default values for the ajax queries
        var ajaxDefaults = {
            type: "GET",
            async: true,
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            beforeSend: function (request) {

                request.setRequestHeader("Accept", "application/json");
            }
        };

        // merge the default-settings with the options-object
        options = $.extend(ajaxDefaults, options);

        // request could be executed in sync or asyn mode
        options.
        async = (asyn === undefined) ? true : asyn;

        return $.ajax(options);
    }

    ///
    /// Creates a link between records
    ///
    function associate(entity1Id, entity1Name, entity2Id, entity2Name, relationshipName, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
        odatapath = getODataPath(),
        request = {
            url: odatapath + "/" + entity1Name + "Set(guid'" + entity1Id + "')/$links/" + relationshipName,
            type: "POST",
            data: window.JSON.stringify({
                uri: odatapath + "/" + entity2Name + "Set(guid'" + entity2Id + "')"
            })
        };

        return doRequest(request, asyn);
    }

    ///
    /// Removes a link between records
    ///
    function disassociate(entity1Id, entity1Name, entity2Id, relationshipName, opt_asyn) {

        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
        odatapath = getODataPath(),
        request = {
            url: odatapath + "/" + entity1Name + "Set(guid'" + entity1Id + "')/$links/" + relationshipName + "(guid'" + entity2Id + "')",
            type: "POST",
            // method: "DELETE",
            beforeSend: function (request) {
                request.setRequestHeader('Accept', 'application/json');
                request.setRequestHeader('X-HTTP-Method', 'DELETE');
            }
        };

        return doRequest(request, asyn);
    }

    ///
    /// Retrieves a single record
    ///
    function retrieve(entityName, id, columns, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
        setName = entityName + 'Set',
        query = getODataPath() + "/" + setName + "(guid'" + id + "')" + "?$select=" + columns.join(',');

        // returns a promise instance
        return doRequest({
            url: query
        },
        asyn);
    }

    ///
    /// Used in the context of lazy-loading (more than 50 records found in the retrieveMultiple request)
    /// Query (url) needs to define the entity, columns and filter
    ///
    function byQueryUrl(queryUrl, opt_asyn) {

        return doRequest({
            url: queryUrl
        },
        opt_asyn);
    }

    ///
    /// Used for joins
    ///
    function byExpandQuery(entityName, columns, expand, filter, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn;

        // in case filter is empty
        filter = (filter) ? "&$filter=" + encodeURIComponent(filter) : '';

        // create defered object
        var setName = entityName + 'Set',
        query = getODataPath() + "/" + setName + "?$select=" + columns.join(',') + '&$expand=' + expand + filter;

        return doRequest({
            url: query
        },
        asyn);
    }

    ///
    /// Retrievs multiuple records based on filter
    /// The max number of records returned by Odata is limited to 50, the result object contains the property
    /// 'next' and the fn loadNext that could be used to load the addional records
    ///
    function byQuery(entityName, columns, filter, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn;

        // in case filter is empty
        filter = (filter) ? "&$filter=" + encodeURIComponent(filter) : '';

        // create defered object
        var setName = entityName + 'Set',
        query = getODataPath() + "/" + setName + "?$select=" + columns.join(',') + filter;

        return doRequest({
            url: query
        },
        asyn);
    }

    ///
    /// Per default a REST query returns only 50 record. This function will load all records
    ///
    function byQueryAll(entityName, columns, filter, opt_asyn) {

        var dfdAll = new $.Deferred(),
        allRecords = [];

        byQuery(entityName, columns, filter, opt_asyn).then(function byQueryAllSuccess(result) {

            // add the elements to the collection
            allRecords = allRecords.concat(result.d.results);

            if (result.d.__next) {

                // the success-handler will be this function
                byQueryUrl(result.d.__next, opt_asyn).then(byQueryAllSuccess, dfdAll.reject);

                // call the progressCallbacks of the promise
                dfdAll.notify(result);
            }
            else {
                dfdAll.resolve(allRecords);
            }

        },
        dfdAll.reject);

        return dfdAll.promise();
    }

    ///
    /// Create a single reocrd
    ///
    function created(entityName, entityObject, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
        setName = entityName + 'Set',
        json = window.JSON.stringify(entityObject),
        query = getODataPath() + "/" + setName;

        // returns a promise object
        return doRequest({
            type: "POST",
            url: query,
            data: json
        },
        asyn);
    }

    ///
    /// Updates the record with the stated intance.
    /// MERGE methode does not return data
    ///
    /// Sample:
    ///     CrmRestKit.Update('Account', id, { 'Address1_City': 'sample', 'Name': 'sample' }).done(...).fail(..)
    ///
    function update(entityName, id, entityObject, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
        setName = entityName + 'Set',
        json = window.JSON.stringify(entityObject),
        query = getODataPath() + "/" + setName + "(guid'" + id + "')",
        // ajax-call-options
        options = {
            type: "POST",
            url: query,
            data: json,
            beforeSend: function (request) {
                request.setRequestHeader("Accept", "application/json");
                request.setRequestHeader("X-HTTP-Method", "MERGE");
            }
        };

        // MERGE methode does not return data
        return doRequest(options, asyn);
    }

    ///
    /// Deletes as single record identified by the id
    /// Sample:
    ///         CrmRestKit.Delete('Account', id).done(...).fail(..);
    ///
    function deleteRecord(entityName, id, opt_asyn) {

        // default is 'true'
        var asyn = (opt_asyn === undefined) ? true : opt_asyn,
        setName = entityName + 'Set',
        query = getODataPath() + '/' + setName + "(guid'" + id + "')",
        options = {
            type: "POST",
            url: query,
            beforeSend: function (request) {
                request.setRequestHeader('Accept', 'application/json');
                request.setRequestHeader('X-HTTP-Method', 'DELETE');
            }
        };

        return doRequest(options, asyn);
    }

    ///
    /// Public API
    ///
    return {
        Version: version,
        /* Read /retrieve methods*/
        Retrieve: retrieve,
        ByQuery: byQuery,
        ByQueryUrl: byQueryUrl,
        ByExpandQuery: byExpandQuery,
        ByQueryAll: byQueryAll,
        /* C U D */
        Create: created,
        Update: update,
        Delete: deleteRecord,
        /* N:M relationship operations */
        Associate: associate,
        Disassociate: disassociate,
        /* Factory methods */
        EntityReferenceFactory: entityReferenceFactory,
        OptionSetValueFactory: optionSetValueFactory,
        MoneyValueFactory: moneyValueFactory,
        /* util methods */
        ParseODataDate: parseODataDate
    };
} (window, document));
//Library Name: cvt_CommonFunctions.js
//If the SDK namespace object is not defined, create it.
if (typeof MCS == "undefined") {
    MCS = {};
}
// Create Namespace container for functions in this library;
if (typeof MCS.cvt_Common == "undefined") {
    MCS.cvt_Common = {};
}

//Form Types
MCS.cvt_Common.FORM_TYPE_CREATE = 1;
MCS.cvt_Common.FORM_TYPE_UPDATE = 2;
MCS.cvt_Common.FORM_TYPE_READ_ONLY = 3;
MCS.cvt_Common.FORM_TYPE_DISABLED = 4;
MCS.cvt_Common.FORM_TYPE_QUICKCREATE = 5;
MCS.cvt_Common.FORM_TYPE_BULKEDIT = 6;

MCS.cvt_Common.BlankGUID = "00000000-0000-0000-0000-000000000000";

MCS.cvt_Common.AppointmentOccursInPast = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() == MCS.cvt_Common.FORM_TYPE_CREATE) return false;
    var startTimeObj = formContext.getAttribute("scheduledstart");
    if (startTimeObj == null) return false;
    var startTime = startTimeObj.getValue();
    if (startTime == null) return false;
    var now = new Date();
    if (now > startTime) return true;
    else return false;
};

//Get Server URL
MCS.cvt_Common.BuildRelationshipServerUrl = function () {
    var globalContext = Xrm.Utility.getGlobalContext();
    var server = globalContext.getClientUrl();
    // var server = Xrm.Page.context.getClientUrl();
    if (server.match(/\/$/)) {
        server = server.substring(0, server.length - 1);
    }
    return server;
};

//Check if Obj is null else get Value
MCS.cvt_Common.checkNull = function (executionContext, fieldname) {
    var formContext = executionContext.getFormContext();
    var fieldObj = formContext.getAttribute(fieldname);

    if (fieldObj != null) return fieldObj.getValue();

    return null;
};

//Close window
MCS.cvt_Common.closeWindow = function (executionContext, msg) {
    var formContext = executionContext.getFormContext();
    if (msg != null) alert(msg);
    //Clear all fields so there are no dirty fields
    var attributes = formContext.data.entity.attributes.get();
    for (var i in attributes) {
        attributes[i].setSubmitMode("never");
    }
    //Close record
    formContext.ui.close();
};

MCS.cvt_Common.fireChange = function (executionContext, field) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
	USAGE:  Causes 'onChange' event to fire on a related field.  Typically
	would be called to initiate onChange event for a field changed 
	programmatically (and which would not have a "real" onChange fired)
	*********************************************************************/
    var ctlControl = formContext.getControl(field);

    formContext.getAttribute(ctlControl).fireOnChange();

}

//collapse a tab
MCS.cvt_Common.collapseTab = function (executionContext, tab, field) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
	USAGE: collapses/expands a tab based upon whether a control is empty.
	Pass in the schema name of the tab and the name of the field to check

	Example:
	//tab name: "tab_9"  <--schema name is what we want passed in
	//mcs_relatedtsa  <--pass in the field name to check

	**********************************************************************/

    var ctlControl = formContext.getControl(field);
    var atrControl = ctlControl.getAttribute();
    var valControl = atrControl.getValue();

    var tabObj = formContext.ui.tabs.get(tab);

    if (valControl != "" && valControl != null) {
        tabObj.setDisplayState("expanded");
    }
    else {
        tabObj.setDisplayState("collapsed");
    }
};

MCS.cvt_Common.collapse2Tab = function (executionContext, tab1, tab2) {
    var formContext = executionContext.getFormContext();
    /*********************************************************************
	USAGE: collapses/expands a tab based upon whether a control is empty.
	Pass in the schema name of the tab and the name of the field to check

	Example:
	//tab name: "tab_9"  <--schema name is what we want passed in
	//mcs_relatedtsa  <--pass in the field name to check

	**********************************************************************/
    var field = "serviceid";
    var ctlControl = formContext.getControl(field);
    var atrControl = ctlControl.getAttribute();
    var valControl = atrControl.getValue();

    var tabObj1 = formContext.ui.tabs.get(tab1);
    var tabObj2 = formContext.ui.tabs.get(tab2);

    if (valControl != "" && valControl != null) {
        tabObj1.setDisplayState("expanded");
        tabObj2.setVisible(false);
    }
    else {
        tabObj1.setDisplayState("collapsed");
        tabObj2.setVisible(true);
    }
};

//Check if GUIDS are the same
MCS.cvt_Common.compareGUIDS = function (guid1, guid2) {
    if (guid1 == null && guid2 == null) return true;

    if (guid1 == null || guid2 == null) return false;

    var guid1Cleaned = guid1.replace(/\W/g, '');
    guid1Cleaned = guid1Cleaned.toString().toUpperCase();

    var guid2Cleaned = guid2.replace(/\W/g, '');
    guid2Cleaned = guid2Cleaned.toString().toUpperCase();

    if (guid1Cleaned == guid2Cleaned) return true;
    else return false;
};

//Change a Record's Status
MCS.cvt_Common.changeRecordStatus = function (executionContext, RECORD_ID, Entity_Name, stateCode, statusCode) {
    var formContext = executionContext.getFormContext();
    var globalContext = Xrm.Utility.getGlobalContext();
    var url = globalContext.getClientUrl();
    //var url = Xrm.Page.context.getClientUrl();
    // create the SetState request
    var request = "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">";
    request += "<s:Body>";
    request += "<Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
    request += "<request i:type=\"b:SetStateRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">";
    request += "<a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>EntityMoniker</c:key>";
    request += "<c:value i:type=\"a:EntityReference\">";
    request += "<a:Id>" + RECORD_ID + "</a:Id>";
    request += "<a:LogicalName>" + Entity_Name + "</a:LogicalName>";
    request += "<a:Name i:nil=\"true\" />";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>State</c:key>";
    request += "<c:value i:type=\"a:OptionSetValue\">";
    request += "<a:Value>" + stateCode + "</a:Value>";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "<a:KeyValuePairOfstringanyType>";
    request += "<c:key>Status</c:key>";
    request += "<c:value i:type=\"a:OptionSetValue\">";
    request += "<a:Value>" + statusCode + "</a:Value>";
    request += "</c:value>";
    request += "</a:KeyValuePairOfstringanyType>";
    request += "</a:Parameters>";
    request += "<a:RequestId i:nil=\"true\" />";
    request += "<a:RequestName>SetState</a:RequestName>";
    request += "</request>";
    request += "</Execute>";
    request += "</s:Body>";
    request += "</s:Envelope>";
    //send set state request
    $.ajax({
        type: "POST",
        contentType: "text/xml; charset=utf-8",
        datatype: "xml",
        url: url + "/XRMServices/2011/Organization.svc/web",
        data: request,
        beforeSend: function (XMLHttpRequest) {
            XMLHttpRequest.setRequestHeader("Accept", "application/xml, text/xml, */*");
            XMLHttpRequest.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute");
        },
        success: function (data, textStatus, XmlHttpRequest) {
            formContext.data.refresh();
        },
        error: function (XMLHttpRequest, textStatus, errorThrown) {
            alert(errorThrown);
        }
    });
};

//Create Fetch
MCS.cvt_Common.CreateFetch = function (entityName, columns, conditions, order) {
    var formattedColumns = '';
    var formattedConditions = '';
    var formattedOrder = '';

    //columns is an array, so that we can build that string with the xml tags
    if (columns != null && columns.length > 0) {
        for (column in columns) {
            formattedColumns += '<attribute name="' + columns[column] + '" />';
        }
    }
    //prefix filter type and add conditions
    if (conditions != null && conditions.length > 0) {
        formattedConditions = "<filter type='and'>";
        for (condition in conditions) {
            formattedConditions += conditions[condition];
        }
    }
    //format order
    if (order != null && order.length == 2) formattedOrder = '<order attribute="' + order[0] + '" descending="' + order[1] + '" />';

    var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true' aggregate='false'>";
    fetchXml += "<entity name='" + entityName + "'>";
    fetchXml += formattedColumns;
    fetchXml += formattedOrder;
    fetchXml += formattedConditions;
    fetchXml += "</filter>";
    fetchXml += "</entity>";
    fetchXml += "</fetch>";

    return fetchXml;
};

MCS.cvt_Common.DateTime = function (executionContext, attributeName, hour, minute) {
    var formContext = executionContext.getFormContext();
    var attribute = formContext.getAttribute(attributeName);
    if (attribute.getValue() == null) {
        attribute.setValue(new Date());
    }
    attribute.setValue(attribute.getValue().setHours(hour, minute, 0));
};

//Used for Specialty Subtype based off of Subtype
MCS.cvt_Common.EnableDependentLookup = function (executionContext, primaryLU, secondaryLU) {
    var formContext = executionContext.getFormContext();
    var primaryLUattribute = formContext.getAttribute(primaryLU);
    var primaryLUvalue = primaryLUattribute != null ? primaryLUattribute.getValue() : null;
    var primaryLUvalueproperty = primaryLUvalue != null ? primaryLUvalue[0].name : null;

    if (primaryLUvalueproperty != null) {
        formContext.getControl(secondaryLU).setVisible(true);
        formContext.getControl(secondaryLU).setFocus();
    }
    else {
        formContext.getControl(secondaryLU).setVisible(false);
        formContext.getAttribute(secondaryLU).setValue(null);
    }
};

MCS.cvt_Common.EnableOtherDetails = function (executionContext, source, target, value) {
    var formContext = executionContext.getFormContext();
    var targetFieldControl = formContext.ui.controls.get(target);
    var targetFieldObject = formContext.getAttribute(target);
    var sourceValue = formContext.getAttribute(source).getValue();
    if (sourceValue != null && sourceValue.toString() == value) {
        targetFieldControl.setDisabled(false);
        targetFieldControl.setVisible(true);
        targetFieldObject.setRequiredLevel("required");
        targetFieldObject.setSubmitMode("dirty");
    }
    else {
        if (targetFieldObject.getValue() != "") {
            targetFieldObject.setValue("");
            targetFieldObject.setSubmitMode("always");
        }
        targetFieldControl.setDisabled(true);
        targetFieldControl.setVisible(false);
        targetFieldObject.setRequiredLevel("none");
    }
};

//XML Fix - replace & with &amp;
MCS.cvt_Common.formatXML = function (str) {
    if (str) {
        str = str.replace(/&/g, "&amp;");
        return str;
    }
};

//Gets the EntityTypeCode / ObjectTypeCode of a entity
MCS.cvt_Common.getObjectTypeCode = function (entityName) {
    var lookupService = new parent.RemoteCommand("LookupService", "RetrieveTypeCode");
    lookupService.SetParameter("entityName", entityName);
    var result = lookupService.Execute();
    if (result.Success && typeof result.ReturnValue == "number") {
        return result.ReturnValue;
    } else {
        return null;
    }
};

//MCS.cvt_Common.JSDebugAlert = function (msg) {
//    Set showAlerts to false to stop showing Alerts
//    var showAlerts = false;
//    if (showAlerts == true) {
//        if (msg != null) {
//            alert("JS Debug Message: \n\n" + msg);
//        }
//    }
//};
MCS.cvt_Common.MVIConfig = function () {
    var deferred = $.Deferred();
    var returnData = {
        success: false,
        data: {}
    };
    var roles = "";
    var MVIConfig = false;
    var filter = "mcs_name eq 'Active Settings'";
    Xrm.WebApi.retrieveMultipleRecords("mcs_setting", "?$select=cvt_usemvi,cvt_mviroles&$filter=" + filter).then(
    function success(result) {
        if (result != null && result.entities.length != 0) {
            MVIConfig = result.entities[0].cvt_usemvi != null ? result.entities[0].cvt_usemvi : false;
            roles = result.entities[0].cvt_mviroles;
        }
        // var roleCheck = MCS.cvt_Common.userHasRoleInList(roles);
        var roleCheckretrieveTokenDeferred = MCS.cvt_Common.userHasRoleInList(roles);
        $.when(roleCheckretrieveTokenDeferred).done(function (returnData) {
            //return MVIConfig && roleCheck;
            var roleCheck = returnData.data.result;
            returnData.success = true;
            returnData.data.result = MVIConfig && roleCheck;
            deferred.resolve(returnData);
        },
        function (error) {
            //return MVIConfig;
            returnData.success = false;
            deferred.resolve(returnData);

        });

    });
    return deferred.promise();
};

//UNSUPPORTED: Add Message to Notifications area
MCS.cvt_Common.Notifications = function (action, icon, message) {
    var notificationsList = Sys.Application.findComponent('crmNotifications');

    switch (action) {
    case "Add":
        if (notificationsList && icon && message) notificationsList.AddNotification('noteId1', icon, 'namespace', message);
        break;
    case "Hide":
        notificationsList.SetVisible(false);
        break;
    }
};

MCS.cvt_Common.openDialogOnCurrentRecord = function (primaryControl, dialogId) {
    var formContext = primaryControl.getFormContext();
    EntityName = formContext.data.entity.getEntityName();
    objectId = formContext.data.entity.getId();
    return MCS.cvt_Common.openDialogProcess(primaryControl, dialogId, EntityName, objectId);
};

MCS.cvt_Common.openDialogProcess = function (primaryControl, dialogId, EntityName, objectId) {
    var formContext = primaryControl.getFormContext();
    if (EntityName == null || EntityName == "") EntityName = formContext.data.entity.getEntityName();
    if (objectId == null || objectId == "") objectId = formContext.data.entity.getId();
    var globalContext = Xrm.Utility.getGlobalContext();
    var url = globalContext.getClientUrl() +
    //var url = Xrm.Page.context.getClientUrl() +
    "/cs/dialog/rundialog.aspx?DialogId=" + dialogId + "&EntityName=" + EntityName + "&ObjectId=" + objectId;
    var width = 400;
    var height = 400;
    var left = (screen.width - width) / 2;
    var top = (screen.height - height) / 2;
    return window.open(url, '', 'location=0,menubar=1,resizable=1,width=' + width + ',height=' + height + ',top=' + top + ',left=' + left + '');
};

MCS.cvt_Common.RestError = function (err) {
    return JSON.parse(err.responseText).error.message.value;
};

//From the Site, Set Facility
MCS.cvt_Common.SetFacilityFromSite = function (executionContext, siteFieldName, facilityFieldName) {
    var formContext = executionContext.getFormContext();
    var siteField = formContext.getAttribute(siteFieldName);
    var facilityField = formContext.getAttribute(facilityFieldName);
    var priorFacilityValue = facilityField.getValue() != null ? facilityField.getValue()[0].id : null;
    var siteValue = siteField.getValue() != null ? siteField.getValue()[0].id : null;

    if (siteValue != null) {
        //Get Parent Facility of Site
        Xrm.WebApi.retrieveRecord("mcs_site", siteValue, "?$select=mcs_FacilityId").then(
        function success(result) {
            if (result && result.mcs_FacilityId) {
                //Check and Set Facility
                var value = new Array();
                value[0] = new Object();
                value[0].id = '{' + result.mcs_FacilityId.Id + '}';
                value[0].name = result.mcs_FacilityId.Name;
                value[0].entityType = "mcs_facility";

                //Set Facility field
                facilityField.setValue(value);
            }
        },
        function (error) {});

        //var calls = CrmRestKit.Retrieve("mcs_site", siteValue, ['mcs_FacilityId'], false);
        //calls.fail(
        //        function (error) {
        //        }).done(function (data) {
        //            if (data && data.d && data.d.mcs_FacilityId) {
        //                //Check and Set Facility
        //                var value = new Array();
        //                value[0] = new Object();
        //                value[0].id = '{' + data.d.mcs_FacilityId.Id + '}';
        //                value[0].name = data.d.mcs_FacilityId.Name;
        //                value[0].entityType = "mcs_facility";
        //                //Set Facility field
        //                facilityField.setValue(value);
        //            }
        //        });
    }
    else {
        //Clear Facility field
        facilityField.setValue(null);
    }
    if (MCS.cvt_Common.compareGUIDS(priorFacilityValue, ((facilityField.getValue() != null) ? facilityField.getValue()[0].id : null)) != true) facilityField.setSubmitMode("always");
};

MCS.cvt_Common.TrimBookendBrackets = function (stringVar) {
    if (stringVar != null && stringVar.length > 0) return stringVar.charAt(0) == '{' ? stringVar.slice(1, stringVar.length - 1) : stringVar;
    else return "";
};

if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
    if (jQuery.when.all === undefined) {
        jQuery.when.all = function (deferreds) {
            var deferred = new jQuery.Deferred();
            $.when.apply(jQuery, deferreds).then(
            function () {
                deferred.resolve(Array.prototype.slice.call(arguments));
            },
            function () {
                deferred.fail(Array.prototype.slice.call(arguments));
            });

            return deferred;
        }
    }
}

//Check if the passed in User has a particular role
MCS.cvt_Common.userHasRoleInList = function (roles) {
    var deferred = $.Deferred();
    var returnData = {
        success: false,
        data: {}
    };
    var userRoles = Xrm.Utility.getGlobalContext().userSettings.securityRoles;
    //var userRoles = Xrm.Page.context.getUserRoles();
    var hasRole = false;
    var deferreds = [];
    for (var i = 0; i < userRoles.length; i++) {
        if (hasRole) {
            return true;
        }
        var currentUserRole = userRoles[i];
        var localDeferred1 = getCurrentUserRole(roles, currentUserRole);

        deferreds.push(localDeferred1);

        //CrmRestKit.Retrieve('Role', userRoles[i], ['Name'], false).fail(
        //    function (err) {
        //        return;
        //    }).done(
        //    function (data) {
        //        if (data != null && data.d != null) {
        //            var roleName = data.d.Name.trim().toLowerCase();
        //            if (roles.toLowerCase().indexOf(roleName) != -1) {
        //                hasRole = true;
        //                return;
        //            }
        //        }
        //    });
    }
    if (typeof $.when.all === 'undefined') loadWhenAllDefinition()

    $.when.all(deferreds).then(function (objects) {
        //console.log("Resolved objects:", objects);
        returnData.data.result = false;
        for (var i = 0; i < objects.length; i++) {
            if (objects[i].data.result) returnData.data.result = true
        }
        returnData.success = true;
        deferred.resolve(returnData)
    });

    //return hasRole;
    return deferred.promise();
};

getCurrentUserRole = function (roles, currentUserRole) {
    var localDeferred = $.Deferred();
    var returnData = {
        success: true,
        data: {}
    };
    Xrm.WebApi.retrieveRecord("Role", currentUserRole, "?$select=name").then(
    function success(result) {
        if (result != null) {
            var roleName = result.name.trim().toLowerCase();
            if (roles.toLowerCase().indexOf(roleName) != -1) {
                hasRole = true;
                //return;
                // return hasRole;
                returnData.success = true;
                returnData.data.result = hasRole;

            }
            localDeferred.resolve(returnData);
        }
    },
    function (error) {
        returnData.success = false;
        localDeferred.resolve(returnData);

    });
    return localDeferred.promise();
}

loadWhenAllDefinition = function () {
    if (typeof jQuery !== 'undefined' && typeof $ !== 'undefined') {
        if (jQuery.when.all === undefined) {
            jQuery.when.all = function (deferreds) {
                var deferred = new jQuery.Deferred();
                $.when.apply(jQuery, deferreds).then(
                function () {
                    deferred.resolve(Array.prototype.slice.call(arguments));
                },
                function () {
                    deferred.fail(Array.prototype.slice.call(arguments));
                });

                return deferred;
            }
        }
    }
}

/***********************************************************************
/** 
/** MCSGlbal Functions.js
/** Description: Global rules called by form level jscripts 
/** 
***********************************************************************/
//If the MCS namespace object is not defined, create it.
if (typeof(MCS) == "undefined") {
    MCS = {
        __namespace: true
    };
}
MCS.GlobalFunctions = {
    GetRequestObject: function () {
        if (window.XMLHttpRequest) {
            return new window.XMLHttpRequest;
        }
        else {
            try {
                return new ActiveXObject("MSXML2.XMLHTTP.3.0");
            }
            catch(ex) {
                return null;
            }
        }
    },
    GuidsAreEqual: function (guid1, guid2) {
        var isEqual = false;

        if (guid1 == null || guid2 == null) {
            isEqual = false;
        }
        else {
            isEqual = guid1.replace(/[{}]/g, "").toLowerCase() == guid2.replace(/[{}]/g, "").toLowerCase();
        }

        return isEqual;
    },

    getODataUTCDateFilter: function (date) {

        var monthString;
        var rawMonth = (date.getUTCMonth() + 1).toString();
        if (rawMonth.length === 1) {
            monthString = "0" + rawMonth;
        }
        else {
            monthString = rawMonth;
        }

        var dateString;
        var rawDate = date.getUTCDate().toString();
        if (rawDate.length === 1) {
            dateString = "0" + rawDate;
        }
        else {
            dateString = rawDate;
        }

        var DateFilter = "datetime\'";
        DateFilter += date.getUTCFullYear() + "-";
        DateFilter += monthString + "-";
        //DateFilter += "07-";
        DateFilter += dateString;
        DateFilter += "T";
        var temp = date.getUTCHours();
        if (temp.toString().length === 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + ":";

        temp = date.getUTCMinutes();
        if (temp.toString().length === 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + ":";

        temp = date.getUTCSeconds();
        if (temp.toString().length === 1) {
            temp = "0" + temp;
        }
        DateFilter += temp + "\'";

        //
        //         DateFilter += date.getUTCSeconds() + ":";
        //         DateFilter += date.getUTCMilliseconds();
        //         DateFilter += "Z\'";
        return DateFilter;
    },
    getAuthenticationHeader: function () {
        var authenticationHeader = Xrm.Page.context.getAuthenticationHeader();

    },
    _getClientUrl: function (urlType) {

        var orgServicePath = "/xrmservices/2011/organization.svc/web";

        if (urlType == "ODATA") {
            orgServicePath = "/xrmservices/2011/organizationdata.svc";
        }
        var serverUrl = "";
        if (typeof GetGlobalContext == "function") {
            var context = GetGlobalContext();
            serverUrl = context.getClientUrl();
        }
        else {
            if (typeof Xrm.Page.context == "object") {
                serverUrl = Xrm.Page.context.getClientUrl();
            }
            else {
                throw new Error("Unable to access the server URL");
            }
        }
        if (serverUrl.match(/\/$/)) {
            serverUrl = serverUrl.substring(0, serverUrl.length - 1);
        }
        return serverUrl + orgServicePath;
    },

    runWorkflow: function (objectId, workflowId, runResponse) {
        var request = "<Execute xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        request += "<request i:type=\"b:ExecuteWorkflowRequest\" xmlns:a=\"http://schemas.microsoft.com/xrm/2011/Contracts\" xmlns:b=\"http://schemas.microsoft.com/crm/2011/Contracts\">";
        request += "<a:Parameters xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";
        request += "<a:KeyValuePairOfstringanyType>";
        request += "<c:key>EntityId</c:key>";
        request += "<c:value i:type=\"d:guid\" xmlns:d=\"http://schemas.microsoft.com/2003/10/Serialization/\">" + objectId + "</c:value>";
        request += "</a:KeyValuePairOfstringanyType>";
        request += "<a:KeyValuePairOfstringanyType>";
        request += "<c:key>WorkflowId</c:key>";
        request += "<c:value i:type=\"d:guid\" xmlns:d=\"http://schemas.microsoft.com/2003/10/Serialization/\">" + workflowId + "</c:value>";
        request += "</a:KeyValuePairOfstringanyType>";
        request += "</a:Parameters>";
        request += "<a:RequestId i:nil=\"true\" />";
        request += "<a:RequestName>ExecuteWorkflow</a:RequestName>";
        request += "</request>";
        request += "</Execute>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP"), true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.RunWorkflow);
        req.onreadystatechange = function () {
            runResponse(req);
        };
        req.send(request);

    },
    runWorkflowResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            return "OK";
        });
    },
    createSOAPRequest: function (type, attributes, createResponse) {
        var request = "<Create xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">";
        request += "<entity xmlns:b=\"http://schemas.microsoft.com/xrm/2011/Contracts\"";
        request += " xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        request += this._getAttributeWrapper(attributes);
        request += "<b:EntityState i:nil=\"true\"/>";
        request += "<b:FormattedValues xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"/>";
        request += "<b:Id>00000000-0000-0000-0000-000000000000</b:Id>";
        request += "<b:LogicalName>" + type + "</b:LogicalName>";
        request += "<b:RelatedEntities xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\"/>";
        request += "</entity>";
        request += "</Create>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP"), true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.Create);
        req.onreadystatechange = function () {
            createResponse.parseResponse(req);
        };
        req.send(request);

    },
    createResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            return responseXML.selectSingleNode("//CreateResult").text;
        });
    },
    retrieveRequest: function (type, id, columnSet, retrieveResponse) {

        var request = "<Retrieve xmlns=\"http://schemas.microsoft.com/xrm/2011/Contracts/Services\">";
        request += "<entityName>" + type + "</entityName>";
        request += "<id>" + id + "</id>";
        request += MCS.GlobalFunctions._getColumnSet(columnSet);
        request += "</Retrieve>";
        request = this._getSOAPWrapper(request);

        var req = new XMLHttpRequest();
        req.open("POST", this._getClientUrl("SOAP") + "/web", true);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", this._Action.Retrieve);
        req.onreadystatechange = function () {
            retrieveResponse._parseResponse(req);
        };
        req.send(request);

    },
    retrieveResponse: function () {
        return new MCS.GlobalFunctions._response(200, function (responseXML) {
            var attributesData = responseXML.selectNodes("//a:KeyValuePairOfstringanyType")
            var entityInstance = {};
            for (var i = 0; i < attributesData.length; i++) {

                var attributeName = attributesData[i].selectSingleNode("b:key").text;
                var attributeType = attributesData[i].selectSingleNode("b:value").attributes.getNamedItem("i:type").text;
                var attributeValue = attributesData[i].selectSingleNode("b:value");
                switch (attributeType) {
                case "c:guid":
                    case "c:string":
                    entityInstance[attributeName] = attributeValue.text;
                    break;
                case "a:EntityReference":
                    var value = {};
                    value.Id = attributeValue.selectSingleNode("a:Id").text;
                    value.LogicalName = attributeValue.selectSingleNode("a:LogicalName").text;
                    value.Name = attributeValue.selectSingleNode("a:Name").text;
                    entityInstance[attributeName] = value;
                    break;
                default:
                    throw new Error("Parsing " + attributeType + " attributes not Implemented.");
                    break;
                }

            }

            return entityInstance;

        });
    },
    updateRequest: function () {},
    updateResponse: function () {},
    deleteRequest: function () {},
    deleteResponse: function () {},
    _getSOAPWrapper: function (request) {
        var SOAP = "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>";
        SOAP += request;
        SOAP += "</s:Body></s:Envelope>";
        return SOAP;
    },
    _getAttributeWrapper: function (attributes) {
        var attributesString = "<b:Attributes xmlns:c=\"http://schemas.datacontract.org/2004/07/System.Collections.Generic\">";

        for (var i = 0; i < attributes.length; i++) {

            var attribute = "<b:KeyValuePairOfstringanyType>";
            attribute += "<c:key>" + attributes[i].name + "</c:key>";

            switch (attributes[i].type) {

            case "string":
                attribute += "<c:value i:type=\"d:" + attributes[i].type + "\" ";
                attribute += " xmlns:d=\"http://www.w3.org/2001/XMLSchema\">" + attributes[i].value + "</c:value>";
                break;
            case "EntityReference":
                attribute += "<c:value i:type=\"b:EntityReference\">";
                attribute += "<b:Id>" + attributes[i].value.Id + "</b:Id>";
                attribute += "<b:LogicalName>" + attributes[i].value.LogicalName + "</b:LogicalName>";
                if (attributes[i].value.Name == null) {
                    attribute += "<b:Name i:nil=\"true\"/>";
                }
                else {
                    attribute += "<b:Name>" + attributes[i].value.Name + "</b:Name>";
                }
                attribute += "</c:value>";
                break;
            }

            attribute += "</b:KeyValuePairOfstringanyType>"
            attributesString += attribute;

        }
        attributesString += "</b:Attributes>";

        return attributesString;

    },
    columnSet: function (columns) {
        if (columns == null) {
            return {
                allColumns: false,
                columns: []
            };
        }
        else {
            var errorMessage = "The columns parameter must be a comma separated list of strings or an array of strings.";
            var arrColumns = [];
            switch (typeof columns) {
            case "string":
                arrColumns = columns.split(",");
                break;
            case "object":
                if (columns instanceof Array) {
                    var stringArray = true;
                    for (var i = 0; i < columns.length; i++) {
                        if (typeof columns[i] != "string") {
                            stringArray = false;
                            break;
                        }
                    }
                    if (stringArray) {
                        arrColumns = columns;
                    }
                    else {
                        throw new Error(errorMessage);
                    }
                }
                else {
                    throw new Error(errorMessage);
                }
                break;
            default:
                throw new Error(errorMessage);
                break;
            }
            return {
                allColumns: false,
                columns: arrColumns
            };
        }
    },
    _getColumnSet: function (columnSet) {

        var col = "<columnSet xmlns:b=\"http://schemas.microsoft.com/xrm/2011/Contracts\"";
        col += " xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">";
        if (columnSet.allColumns == true) {
            col += "<b:AllColumns>true</b:AllColumns>";
        }
        else {
            col += "<b:AllColumns>false</b:AllColumns>";
            col += "<b:Columns xmlns:c=\"http://schemas.microsoft.com/2003/10/Serialization/Arrays\">";
            for (var i = 0; i < columnSet.columns.length; i++) {
                col += "<c:string>" + columnSet.columns[i] + "</c:string>";
            }
            col += "</b:Columns>";
        }

        col += "</columnSet>";

        return col;

    },
    _Action: {
        Execute: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute",
        Create: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Create",
        Retrieve: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Retrieve",
        Update: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Update",
        Delete: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Delete",
        RunWorkflow: "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute"
    },
    _getError: function (faultXml) {
        var errorMessage = "Unknown Error (Unable to parse the fault)";
        if (typeof faultXml == "object") {
            try {
                var bodyNode = faultXml.firstChild.firstChild;
                //Retrieve the fault node
                for (var i = 0; i < bodyNode.childNodes.length; i++) {
                    var node = bodyNode.childNodes[i];

                    //NOTE: This comparison does not handle the case where the XML namespace changes
                    if ("s:Fault" == node.nodeName) {
                        for (var j = 0; j < node.childNodes.length; j++) {
                            var faultStringNode = node.childNodes[j];
                            if ("faultstring" == faultStringNode.nodeName) {
                                errorMessage = faultStringNode.text;
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            catch(e) {};
        }

        return new Error(errorMessage);

    },
    _response: function (successStatus, parseData) {
        return {
            _state: "sent",
            _data: null,
            _error: null,
            _parseData: parseData,
            onComplete: null,
            _parseResponse: function (req) {

                if (req.readyState == 4) {
                    this._state = "recieved";
                    if (req.status == successStatus) {
                        this._data = parseData(req.responseXML);
                        this._state = "complete";
                        if (this.onComplete != null) {
                            this.onComplete();
                        }
                    }
                    else {
                        this._state = "error";
                        this._error = new MCS.GlobalFunctions._getError(req.responseXML);
                        if (this.onComplete != null) {
                            this.onComplete();
                        }
                    }
                }

            },
            getError: function () {
                if (this._error != null) {
                    return this._error;
                }
                else {
                    throw new Error("No error exists.");
                }
            },
            getState: function () {
                return this._state;
            },
            getData: function () {
                if (this._state == "complete") {
                    return this._data;
                }
                else {
                    throw new Error("Data is not ready yet.");
                }
            }
        };
    },

    createRestRecord: function (recordToCreate, callback, recordType) {
        var jsonRecord = window.JSON.stringify(recordToCreate);

        var createReq = new XMLHttpRequest();
        createReq.open("POST", this._getClientUrl("ODATA") + "/" + recordType, true);
        createReq.setRequestHeader("Accept", "application/json");
        createReq.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        createReq.onreadystatechange = function () {
            MCS.GlobalFunctions.createRestReqCallBack(this, callback);
        };
        createReq.send(jsonRecord);

    },
    createRestReqCallBack: function (createReq, callback) {
        if (createReq.readyState == 4
        /* complete */
        ) {
            if (createReq.status == 201) {
                //Success
                var newRecord = JSON.parse(createReq.responseText).d;
                callback(newRecord);
            }
            else {
                //Failure
                MCS.GlobalFunctions.errorHandler(createReq);
            }
        }
    },

    RetrieveRecords: function (filter, callback) {
        /// <summary>
        /// Initiates an asynchronous request to retrieve records.
        /// If there are additional pages of records the SDK.RestEndpointPaging.RetrieveRecordsCallBack function will
        /// call this function.
        /// </summary>
        var retrieveRecordsReq = new XMLHttpRequest();
        retrieveRecordsReq.open("GET", this._getClientUrl("ODATA") + filter, true);
        retrieveRecordsReq.setRequestHeader("Accept", "application/json");
        retrieveRecordsReq.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        retrieveRecordsReq.onreadystatechange = function () {
            /// <summary>
            /// This event handler passes the callback through
            /// </summary>
            MCS.GlobalFunctions.RetrieveRecordsCallBack(this, callback);
        };
        retrieveRecordsReq.send();

    },
    dateReviver: function (key, value) {
        var a;
        if (typeof value === 'string') {
            a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
            if (a) {
                return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));
            }
        }
        return value;
    },
    RetrieveRecordsCallBack: function (retrieveRecordsReq, callback) {
        /// <summary>
        /// Handles the onreadystatechange event to process the records returned.
        /// If more pages are available this function will call the SDK.RestEndpointPaging.RetrieveRecords
        /// function to get the rest.
        /// </summary>
        if (retrieveRecordsReq.readyState == 4
        /* complete */
        ) {
            if (retrieveRecordsReq.status == 200) {
                //Success
                var retrievedRecords = JSON.parse(retrieveRecordsReq.responseText, MCS.GlobalFunctions.dateReviver).d;
                /// The callback is called with the results.
                callback(retrievedRecords.results);

                if (null != retrievedRecords.__next) {
                    // The existance of the '__next' property indicates that more records are available
                    // So the originating function is called again using the filter value returned
                    var filter = retrievedRecords.__next.replace(MCS.GlobalFunctions.GetODataPath(), "");
                    MCS.GlobalFunctions.RetrieveRecords(filter, callback);
                }

            }
            else {
                //Failure
                MCS.GlobalFunctions.errorHandler(retrieveRecordsReq);

            }
        }
    },
    //Function to handle any http errors
    errorHandler: function (XmlHttpRequest) {
        /// <summary>
        /// Simply displays an alert message with details about any errors.
        /// </summary>
        if (XmlHttpRequest) {
            if (XmlHttpRequest.status != null) {
                if (XMLHttpRequest.statusText != null) {
                    alert("Error : " + XmlHttpRequest.status + ": " + XmlHttpRequest.statusText + ": " + JSON.parse(XmlHttpRequest.responseText).error.message.value);
                }
                else {
                    alert(XMLHttpRequest);
                }
            }
            else {
                alert(XMLHttpRequest);
            }
        }
        else {
            alert("Unknown error occurred");
        }
    },

    __namespace: true
};
var XrmSvcToolkit = (function (window, undefined) {
    /**
	* XrmSvcToolkit v0.2, a small JavaScript library that helps access 
	* Microsoft Dynamics CRM 2011 web service interfaces (SOAP and REST)
	*
	* @copyright    Copyright (c) 2011 - 2013, KingswaySoft (http://www.kingswaysoft.com)
	* @license      Microsoft Public License (Ms-PL)
	* @developer    Daniel Cai (http://danielcai.blogspot.com)

	* @contributors George Doubinski, Mitch Milam, Carsten Groth
	*
	* THIS SOFTWARE IS PROVIDED BY KingswaySoft ''AS IS'' AND ANY
	* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	* DISCLAIMED. IN NO EVENT SHALL KingswaySoft BE LIABLE FOR ANY
	* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	*/

    var odataEndpoint = "/XRMServices/2011/OrganizationData.svc",
    soapEndpoint = "/XRMServices/2011/Organization.svc/web";

    // Type sniffering
    var toString = Object.prototype.toString,
    isFunction = function (o) {
        return toString.call(o) === "[object Function]";
    },
    isInteger = function (o) {
        return !isNaN(parseInt(o));
    },
    isString = function (o) {
        return toString.call(o) === "[object String]";
    },
    isArray = function (o) {
        return toString.call(o) === "[object Array]";
    },
    isNonEmptyString = function (o) {
        if (!isString(o) || o.length === 0) {
            return false;
        }

        // checks for a non-white space character
        return /[^\s]+/.test(o);
    };

    var isoDateExpr = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})\.?(\d*)?(Z|[+-]\d{2}?(:\d{2})?)?$/,
    jsonDateExpr = /^\/Date\(([-+]?\d+)\)\/$/;

    var context = (function () {
        if (isFunction(window.GetGlobalContext)) {
            return GetGlobalContext();
        } else if (Xrm != undefined) {
            return Xrm.Page.context;
        } else {
            throw new Error("CRM context is not available.");
        }
    })();

    var clientUrl = (function () {
        if (context.getClientUrl !== undefined) {
            return context.getClientUrl();
        }

        var localServerUrl = window.location.protocol + "//" + window.location.host;
        if (context.isOutlookClient() && !context.isOutlookOnline()) {
            return localServerUrl;
        } else {
            var crmServerUrl = context.getClientUrl();
            crmServerUrl = crmServerUrl.replace(/^(http|https):\/\/([_a-zA-Z0-9\-\.]+)(:([0-9]{1,5}))?/, localServerUrl);
            crmServerUrl = crmServerUrl.replace(/\/$/, "");
        }

        return crmServerUrl;
    })();

    var restErrorHandler = function (req) {
        var errorMessage;

        try {
            errorMessage = JSON.parse(req.responseText).error.message.value;
        } catch(err) {
            // Ignore any error when parsing the error message.
            errorMessage = req.responseText;
        }

        errorMessage = errorMessage.length > 0 ? "Error: " + req.status + ": " + req.statusText + ": " + errorMessage: "Error: " + req.status + ": " + req.statusText;

        return new Error(errorMessage);
    };

    var soapErrorHandler = function (req) {
        var errorMessage = req.responseText.length > 0 ? "Error: " + req.status + ": " + req.statusText + ": " + req.responseText: "Error: " + req.status + ": " + req.statusText;

        return new Error(errorMessage);
    };

    var dateReviver = function (key, value) {
        if (typeof value === 'string') {
            if (value.match(jsonDateExpr)) {
                var dateValue = value.replace(jsonDateExpr, "$1");
                return new Date(parseInt(dateValue, 10));
            }
        }
        return value;
    };

    var xmlEncode = function (input) {
        if (input == null) {
            return null;
        }

        if (input == '') {
            return '';
        }

        var c;
        var result = '';

        for (var pos = 0; pos < input.length; pos++) {
            c = input.charCodeAt(pos);

            if ((c > 96 && c < 123) || (c > 64 && c < 91) || (c > 47 && c < 58) || (c == 32) || (c == 44) || (c == 46) || (c == 45) || (c == 95)) {
                result = result + String.fromCharCode(c);
            } else {
                result = result + '&#' + c + ';';
            }
        }

        return result;
    };

    var parseIsoDate = function (s) {
        if (s == null || !s.match(isoDateExpr)) return null;

        var dateParts = isoDateExpr.exec(s);
        return new Date(Date.UTC(parseInt(dateParts[1], 10), parseInt(dateParts[2], 10) - 1, parseInt(dateParts[3], 10), parseInt(dateParts[4], 10) - (dateParts[8] == "" || dateParts[8] == "Z" ? 0 : parseInt(dateParts[8])), parseInt(dateParts[5], 10), parseInt(dateParts[6], 10)));
    };

    var getAttribute = function (xmlNode, attrName) {
        for (var i = 0; i < xmlNode.attributes.length; i++) {
            var attr = xmlNode.attributes[i];
            if (attr.name == attrName) {
                return attr.value;
            }
        }
    };

    var getNodeText = function (node) {
        return node.text !== undefined ? node.text : node.textContent;
    }

    var getTypedValue = function (fieldType, valueNode) {
        switch (fieldType) {
        case "c:string":
            case "c:guid":
            return getNodeText(valueNode);
        case "c:boolean":
            return getNodeText(valueNode) === "true";
        case "c:int":
            return parseInt(getNodeText(valueNode));
        case "c:decimal":
            case "c:double":
            return parseFloat(getNodeText(valueNode));
        case "c:dateTime":
            return parseIsoDate(getNodeText(valueNode));
        case "a:OptionSetValue":
            valueNode = getChildNode(valueNode, "a:Value");
            return {
                Value: parseInt(getNodeText(valueNode))
            };
        case "a:Money":
            valueNode = getChildNode(valueNode, "a:Value");
            return {
                Value: getNodeText(valueNode)
            };
        case "a:EntityReference":
            return getEntityReference(valueNode);
        case "a:EntityCollection":
            return getEntityCollection(valueNode);
        case "a:AliasedValue":
            valueNode = getChildNode(valueNode, "a:Value");
            fieldType = getAttribute(valueNode, "i:type");
            return getTypedValue(fieldType, valueNode);

        default:
            throw new Error("Unhandled field type: \"" + fieldType + "\", please report the problem to the developer. ");
        }
    };

    var concatOdataFields = function (fields, parameterName) {
        if (isArray(fields) && fields.length > 0) {
            return fields.join(',');
        } else if (isString(fields)) {
            return fields;
        }
        else if (parameterName != undefined) {
            throw new Error(parameterName + " parameter must be either a delimited string or an array. ");
        }
        else {
            return "";
        }
    };

    // Get a list of entities from an EntityCollection XML node.
    var getEntityCollection = function (entityCollectionNode) {
        var entityName, moreRecords, pagingCookie, totalRecordCount, entitiesNode;

        // Try to get all child nodes in one pass
        for (var m = 0; m < entityCollectionNode.childNodes.length; m++) {
            var collectionChildNode = entityCollectionNode.childNodes[m];
            switch (collectionChildNode.nodeName) {
            case "a:EntityName":
                entityName = getNodeText(collectionChildNode);
                break;
            case "a:MoreRecords":
                moreRecords = getNodeText(collectionChildNode) === "true";
                break;
            case "a:PagingCookie":
                pagingCookie = getNodeText(collectionChildNode);
                break;
            case "a:TotalRecordCount":
                totalRecordCount = parseInt(getNodeText(collectionChildNode));
                break;
            case "a:Entities":
                entitiesNode = collectionChildNode;
                break;
            }
        }

        var result = {
            entityName: entityName,
            moreRecords: moreRecords,
            pagingCookie: pagingCookie,
            totalRecordCount: totalRecordCount,
            entities: []
        };

        for (var i = 0; i < entitiesNode.childNodes.length; i++) {
            var entity = {
                formattedValues: []
            };
            var entityNode = entitiesNode.childNodes[i];
            var attributes = getChildNode(entityNode, "a:Attributes");
            for (var j = 0; j < attributes.childNodes.length; j++) {
                var attr = attributes.childNodes[j];

                var fieldName = getNodeText(getChildNode(attr, "b:key"));
                var valueNode = getChildNode(attr, "b:value");
                var fieldType = getAttribute(valueNode, "i:type");

                entity[fieldName] = getTypedValue(fieldType, valueNode);
            }

            var formattedValues = getChildNode(entityNode, "a:FormattedValues");

            for (var k = 0; k < formattedValues.childNodes.length; k++) {
                var valuePair = formattedValues.childNodes[k];
                entity.formattedValues[getNodeText(getChildNode(valuePair, "b:key"))] = getNodeText(getChildNode(valuePair, "b:value"));
            }

            result.entities.push(entity);
        }

        return result;
    };

    // Get an EntityReference from an XML node. For performance reason, we try to
    // get the entity reference in one pass, instead of multiple.
    var getEntityReference = function (xmlNode) {
        var id, logicalName, name;
        for (var i = 0; i < xmlNode.childNodes.length; i++) {
            var childNode = xmlNode.childNodes[i];

            switch (childNode.nodeName) {
            case "a:Id":
                id = getNodeText(childNode);
                break;
            case "a:LogicalName":
                logicalName = getNodeText(childNode);
                break;
            case "a:Name":
                name = getNodeText(childNode);
                break;
            }
        }

        return {
            Id: id,
            LogicalName: logicalName,
            Name: name
        };
    }

    // Get a single child node that matches the specified name.
    var getChildNode = function (xmlNode, nodeName) {
        for (var i = 0; i < xmlNode.childNodes.length; i++) {
            var childNode = xmlNode.childNodes[i];

            if (childNode.nodeName == nodeName) {
                return childNode;
            }
        }
    }

    var getSoapError = function (soapXml) {
        try {
            var bodyNode = soapXml.firstChild.firstChild;
            var faultNode = getChildNode(bodyNode, "s:Fault");
            var faultStringNode = getChildNode(faultNode, "faultstring");
            return new Error(getNodeText(faultStringNode));
        }
        catch(e) {
            return new Error("An error occurred when parsing the error returned from CRM server: " + e.message);
        }
    }

    var processSoapResponse = function (responseXml, successCallback, errorCallback) {
        try {
            var executeResult = responseXml.firstChild.firstChild.firstChild.firstChild; // "s:Envelope/s:Body/ExecuteResponse/ExecuteResult"
        } catch(err) {
            errorCallback(err);
            return;
        }

        return successCallback(executeResult);
    };

    var getFetchResults = function (resultXml) {
        // For simplicity reason, we are assuming the returned SOAP message uses the following three namespace aliases
        //   xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts"
        //   xmlns:i="http://www.w3.org/2001/XMLSchema-instance"
        //   xmlns:b="http://schemas.datacontract.org/2004/07/System.Collections.Generic"
        // however it is possible that the namespace aliases returned from CRM server could be different, in which
        // case, the fetch function will not work properly
        // For future reference, XPath to the entity collection node:
        // a:Results/a:KeyValuePairOfstringanyType/b:value[@i:type='a:EntityCollection']
        var resultsNode = getChildNode(resultXml, "a:Results"); // a:Results
        var entityCollectionNode = getChildNode(resultsNode.firstChild, "b:value"); // b:value
        return getEntityCollection(entityCollectionNode);
    };

    var processRestResult = function (req, successCallback, errorCallback) {
        if ((req.status >= 200 && req.status < 300) || req.status === 304 || req.status === 1223) {
            try {
                var result = ( !! req.responseText) ? JSON.parse(req.responseText, dateReviver).d : null;
            } catch(err) {
                errorCallback(err);
                return;
            }

            return successCallback(result);

        } else {
            errorCallback(restErrorHandler(req));
        }
    };

    var doRestRequest = function (restReq, successCallback, errorCallback) {
        var req = new XMLHttpRequest();
        req.open(restReq.type, restReq.url, restReq.
        async);
        req.setRequestHeader("Accept", "application/json");
        req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
        if ( !! restReq.method) {
            req.setRequestHeader("X-HTTP-Method", restReq.method);
        }

        var erred = false;

        if (restReq.
        async) {
            req.onreadystatechange = function () {
                if (req.readyState == 4
                /* complete */
                ) {
                    processRestResult(req, successCallback, errorCallback);
                }
            };

            if ( !! restReq.data) {
                req.send(restReq.data);
            } else {
                req.send();
            }
        } else {
            try {
                //synchronous: send request, then call the callback functions
                if ( !! restReq.data) {
                    req.send(restReq.data);
                } else {
                    req.send();
                }

                return processRestResult(req, successCallback, errorCallback);

            } catch(err) {
                errorCallback(err);
            }
        }
    };

    var doSoapRequest = function (soapBody,
    async, successCallback, errorCallback) {
        var req = new XMLHttpRequest();

        req.open("POST", clientUrl + soapEndpoint,
        async);
        req.setRequestHeader("Accept", "application/xml, text/xml, */*");
        req.setRequestHeader("Content-Type", "text/xml; charset=utf-8");
        req.setRequestHeader("SOAPAction", "http://schemas.microsoft.com/xrm/2011/Contracts/Services/IOrganizationService/Execute");

        var soapXml = ['<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Body>', soapBody, '</s:Body></s:Envelope>'].join('');

        if (
        async) {
            req.onreadystatechange = function () {
                if (req.readyState == 4) { // "complete"
                    if (req.status == 200) { // "OK"
                        processSoapResponse(req.responseXML, successCallback, errorCallback);
                    } else {
                        errorCallback(soapErrorHandler(req));
                    }
                }
            };

            req.send(soapXml);
        } else {
            var syncResult;
            try {
                //synchronous: send request, then call the callback function directly
                req.send(soapXml);
                if (req.status == 200) {
                    return processSoapResponse(req.responseXML, successCallback, errorCallback);
                }
                else {
                    var syncErr = getSoapError(req.responseXML);
                    errorCallback(syncErr);
                    return;
                }
            } catch(err) {
                errorCallback(err);
                return;
            }

            successCallback(syncResult);
        }
    };

    var execute = function (opts) {

        if (!isNonEmptyString(opts.executeXml)) {
            throw new Error("executeXml parameter was not provided. ");
        }

        var
        async = !!opts.
        async;

        return doSoapRequest(opts.executeXml,
        async, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var setState = function (opts) {

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isInteger(opts.stateCode)) {
            throw new Error("stateCode parameter must be an integer. ");
        }

        if (opts.statusCode == null) {
            opts.statusCode = -1;
        }

        var request = ['<Execute xmlns="http://schemas.microsoft.com/xrm/2011/Contracts/Services">', '<request i:type="b:SetStateRequest"', ' xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts" ', ' xmlns:b="http://schemas.microsoft.com/crm/2011/Contracts" ', ' xmlns:c="http://schemas.datacontract.org/2004/07/System.Collections.Generic" ', ' xmlns:i="http://www.w3.org/2001/XMLSchema-instance">', '<a:Parameters>', '<a:KeyValuePairOfstringanyType>', '<c:key>EntityMoniker</c:key>', '<c:value i:type="a:EntityReference">', '<a:Id>', opts.id, '</a:Id>', '<a:LogicalName>', opts.entityName, '</a:LogicalName>', '<a:Name i:nil="true" />', '</c:value>', '</a:KeyValuePairOfstringanyType>', '<a:KeyValuePairOfstringanyType>', '<c:key>State</c:key>', '<c:value i:type="a:OptionSetValue">', '<a:Value>', opts.stateCode, '</a:Value>', '</c:value>', '</a:KeyValuePairOfstringanyType>', '<a:KeyValuePairOfstringanyType>', '<c:key>Status</c:key>', '<c:value i:type="a:OptionSetValue">', '<a:Value>', opts.statusCode, '</a:Value>', '</c:value>', '</a:KeyValuePairOfstringanyType>', '</a:Parameters>', '<a:RequestId i:nil="true"/>', '<a:RequestName>SetState</a:RequestName>', '</request>', '</Execute>'].join("");

        var
        async = !!opts.
        async;

        return doSoapRequest(request,
        async, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var fetch = function (opts) {
        if (!isNonEmptyString(opts.fetchXml)) {
            throw new Error("fetchXml parameter was not provided. ");
        }

        var request = ['<Execute xmlns="http://schemas.microsoft.com/xrm/2011/Contracts/Services">', '<request i:type="a:RetrieveMultipleRequest"', ' xmlns:a="http://schemas.microsoft.com/xrm/2011/Contracts" ', ' xmlns:i="http://www.w3.org/2001/XMLSchema-instance">', '<a:Parameters xmlns:c="http://schemas.datacontract.org/2004/07/System.Collections.Generic">', '<a:KeyValuePairOfstringanyType>', '<c:key>Query</c:key>', '<c:value i:type="a:FetchExpression">', '<a:Query>', xmlEncode(opts.fetchXml), '</a:Query>', '</c:value>', '</a:KeyValuePairOfstringanyType>', '</a:Parameters>', '<a:RequestId i:nil="true"/>', '<a:RequestName>RetrieveMultiple</a:RequestName>', '</request>', '</Execute>'].join("");

        var
        async = !!opts.
        async;

        return doSoapRequest(request,
        async, function (result) {
            var fetchResults = getFetchResults(result);

            if (isFunction(opts.successCallback)) {
                opts.successCallback(fetchResults);
            }

            if (!
            async) {
                return fetchResults;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var retrieve = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        var select = opts.select == null ? "" : concatOdataFields(opts.select, "select");

        var expand = opts.expand == null ? "" : concatOdataFields(opts.expand, "expand");

        var odataQuery = "";

        if (select.length > 0 || expand.length > 0) {
            odataQuery = "?";
            if (select.length > 0) {
                odataQuery += "$select=" + select;

                if (expand.length > 0) {
                    odataQuery += "&";
                }
            }

            if (expand.length > 0) {
                odataQuery += "$expand=" + expand;
            }
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set(guid'" + opts.id + "')" + odataQuery,
            type: "GET",
            async: !!opts.
            async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var retrieveMultiple = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        var odataQuery = "";
        if (opts.odataQuery != null) {
            if (!isString(opts.odataQuery)) {
                throw new Error("odataQuery parameter must be a string. ");
            }

            if (opts.odataQuery.charAt(0) != "?") {
                odataQuery = "?" + opts.odataQuery;
            } else {
                odataQuery = opts.odataQuery;
            }
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set" + odataQuery,
            type: "GET",
            async: !!opts.
            async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result.results);
            }

            if (!opts.
            async) {
                return result.results;
            }

            if (result.__next != null) {
                opts.odataQuery = result.__next.substring((clientUrl + odataEndpoint + "/" + opts.entityName + "Set").length);
                retrieveMultiple(opts);
            } else {
                if (isFunction(opts.completionCallback)) {
                    opts.completionCallback();
                }
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var createRecord = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (opts.entity === null || opts.entity === undefined) {
            throw new Error("entity parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + 'Set',
            type: "POST",
            data: window.JSON.stringify(opts.entity),
            async: !!opts.
            async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var updateRecord = function (opts) {
        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        if (opts.entity === null || opts.entity === undefined) {
            throw new Error("entity parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set(guid'" + opts.id + "')",
            type: "POST",
            method: "MERGE",
            data: window.JSON.stringify(opts.entity),
            async: !!opts.
            async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var deleteRecord = function (opts) {

        if (!isNonEmptyString(opts.entityName)) {
            throw new Error("entityName parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.id)) {
            throw new Error("id parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entityName + "Set(guid'" + opts.id + "')",
            type: "POST",
            method: "DELETE",
            async: !!opts.
            async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            }
            else {
                throw err;
            }
        });
    };

    var associate = function (opts) {

        if (!isNonEmptyString(opts.entity1Id)) {
            throw new Error("entity1Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity1Name)) {
            throw new Error("entity1Name parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity2Id)) {
            throw new Error("entity2Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity2Name)) {
            throw new Error("entity2Name parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.relationshipName)) {
            throw new Error("relationshipName parameter was not provided. ");
        }

        var entity2Uri = {
            uri: clientUrl + odataEndpoint + "/" + opts.entity2Name + "Set(guid'" + opts.entity2Id + "')"
        };

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entity1Name + "Set(guid'" + opts.entity1Id + "')/$links/" + opts.relationshipName,
            type: "POST",
            data: window.JSON.stringify(entity2Uri),
            async: !!opts.
            async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    var disassociate = function (opts) {

        if (!isNonEmptyString(opts.entity1Id)) {
            throw new Error("entity1Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity1Name)) {
            throw new Error("entity1Name parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.entity2Id)) {
            throw new Error("entity2Id parameter was not provided. ");
        }

        if (!isNonEmptyString(opts.relationshipName)) {
            throw new Error("relationshipName parameter was not provided. ");
        }

        var restReq = {
            url: clientUrl + odataEndpoint + "/" + opts.entity1Name + "Set(guid'" + opts.entity1Id + "')/$links/" + opts.relationshipName + "(guid'" + opts.entity2Id + "')",
            type: "POST",
            method: "DELETE",
            async: !!opts.
            async
        };

        return doRestRequest(restReq, function (result) {
            if (isFunction(opts.successCallback)) {
                opts.successCallback(result);
            }

            if (!opts.
            async) {
                return result;
            }
        },
        function (err) {
            if (isFunction(opts.errorCallback)) {
                opts.errorCallback(err);
            } else {
                throw err;
            }
        });
    };

    // Toolkit's public members
    return {
        context: context,
        serverUrl: clientUrl,
        retrieve: retrieve,
        retrieveMultiple: retrieveMultiple,
        createRecord: createRecord,
        updateRecord: updateRecord,
        deleteRecord: deleteRecord,
        associate: associate,
        disassociate: disassociate,
        setState: setState,
        execute: execute,
        fetch: fetch
    };
})(window);
//Library Name: mcs_TSA.OnLoad.js
if (typeof MCS == "undefined") MCS = {};
// Create Namespace container for functions in this library;
MCS.mcs_TSA_OnLoad = {};

//Global Variables
MCS.mcs_TSA_OnLoad.Form_Type;
MCS.mcs_TSA_OnLoad.EntityName;
MCS.mcs_TSA_OnLoad.GroupAppt;
MCS.mcs_TSA_OnLoad.Type;
MCS.mcs_TSA_OnLoad.EntityId;

MCS.mcs_TSA_OnLoad.TSAName;
MCS.mcs_TSA_OnLoad.MTSAName;

MCS.mcs_TSA_OnLoad.relatedProviderSiteId;
MCS.mcs_TSA_OnLoad.relatedProviderSiteName;

MCS.mcs_TSA_OnLoad.relatedPatientSiteId;
MCS.mcs_TSA_OnLoad.relatedPatientSiteName;

MCS.mcs_TSA_OnLoad.relatedPatientFacilityId;
MCS.mcs_TSA_OnLoad.relatedPatientFacilityName;

MCS.mcs_TSA_OnLoad.ProvResourcesCreated = new Boolean;

MCS.SiteEmergencyPhone;
MCS.SiteMainPhone;
MCS.TCTPhone = "";
MCS.SiteLocal911Phone;

//Compare for Audit cleanup
MCS.mcs_TSA_OnLoad.Capacity;
MCS.mcs_TSA_OnLoad.InitalStatus;

MCS.mcs_TSA_OnLoad.OnLoad = function (executionContext) {
    var formContext = executionContext.getFormContext();
    MCS.mcs_TSA_OnLoad.CheckForMTSA(executionContext);
    if (formContext.ui.getFormType() === MCS.cvt_Common.FORM_TYPE_CREATE) {
        alert('The Archived Agreement functionality is obselete and the new record creation is not available.');
        formContext.ui.close();
        return;
    }
    else {
        if (formContext.getAttribute("cvt_relatedmasterid").getValue() == null) return;
        //Actually set all the values used in the library
        MCS.mcs_TSA_OnLoad.Form_Type = formContext.ui.getFormType();
        MCS.mcs_TSA_OnLoad.EntityName = formContext.data.entity.getEntityName();
        MCS.mcs_TSA_OnLoad.GroupAppt = (formContext.getAttribute("cvt_groupappointment") != null) ? formContext.getAttribute("cvt_groupappointment").getValue() : false;
        MCS.mcs_TSA_OnLoad.Type = (formContext.getAttribute("cvt_type") != null) ? formContext.getAttribute("cvt_type").getValue() : false;
        MCS.mcs_TSA_OnLoad.EntityId = formContext.data.entity.getId();

        if (MCS.mcs_TSA_OnLoad.Form_Type === MCS.cvt_Common.FORM_TYPE_CREATE) MCS.cvt_Common.DateTime('cvt_beginngtime', 8, 00);

        MCS.cvt_Common.EnableDependentLookup(executionContext, "cvt_servicetype", "cvt_servicesubtype");

        if (formContext.getAttribute("cvt_relatedmasterid").getValue() != null) {
            formContext.getControl("cvt_relatedmasterid").setDisabled(true);
        }
        //Conditional because of potentially missing data.
        if (formContext.getAttribute("cvt_providerlocationtype").getValue() != null) {
            formContext.getControl("cvt_providerlocationtype").setDisabled(true);
        }
        else {
            formContext.getControl("cvt_providerlocationtype").setDisabled(false);
        }

        formContext.getControl("mcs_name").setFocus(); //To bring to the top
        formContext.getAttribute("cvt_relatedpatientsiteid").setSubmitMode("always");
    }
};

MCS.mcs_TSA_OnLoad.BulkEdit = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Not Bulk Edit
    if (MCS.mcs_TSA_OnLoad.Form_Type !== 6) {
        //Hide the Bulk Edit section on all forms
        formContext.ui.tabs.get('tab_Pat').sections.get('tab_Pat_section_Bulk').setVisible(false);

        //Set all sections to hidden on form.  Show all sections
        //TSA tab
        formContext.ui.tabs.get('tab_Name').setVisible(true);

        //General section
        formContext.ui.tabs.get('tab_Info').sections.get('tab_Info_section_General').setVisible(true);
        formContext.ui.tabs.get('tab_Info').sections.get('tab_Info_section_General2').setVisible(true);

        //Provider Grid section
        formContext.ui.tabs.get('tab_Prov').sections.get('tab_provresources').setVisible(true);

        //Patient Grid section
        formContext.ui.tabs.get('tab_Pat').sections.get('tab_patientresources').setVisible(true);
        //Set Emergency IFRAME true
        formContext.ui.tabs.get('tab_Pat').sections.get('tab_Info_section_Emergency').setVisible(true);
        formContext.getControl('IFRAME_EmergencyContactViewer').setVisible(true);

        //Admin tab
        formContext.ui.tabs.get('tab_Admin').setVisible(true);

        MCS.mcs_TSA_OnLoad.SOS(executionContext);

        //Load Operations Guide
        var filter = "mcs_name eq 'Active Settings'";

        Xrm.WebApi.retrieveMultipleRecords("mcs_setting", "?$select=cvt_telehealthoperationsmanual&$filter=" + filter).then(
        function success(result) {
            if (result != null && result.entities.length !== 0) {
                var url = result.entities[0].cvt_telehealthoperationsmanual != null ? result.entities[0].cvt_telehealthoperationsmanual : null;
                if (url != null) formContext.getAttribute("cvt_telehealthoperationsmanual").setValue(url);
            }
        },
        function (error) {});
        //calls = CrmRestKit.ByQuery("mcs_setting", ['cvt_telehealthoperationsmanual'], filter, false);
        //calls.fail(function (err) {
        //}).done(function (data) {
        //    if (data && data.d && data.d.results != null && data.d.results.length != 0) {
        //        var url = data.d.results[0].cvt_telehealthoperationsmanual != null ? data.d.results[0].cvt_telehealthoperationsmanual : null;
        //        if (url != null)
        //            formContext.getAttribute("cvt_telehealthoperationsmanual").setValue(url);
        //    }
        //});
    }
};

//Getting Attributes needed for Quick Create Buttons
MCS.mcs_TSA_OnLoad.GetAttributes = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //TSA
    //if (MCS.mcs_TSA_OnLoad.EntityName == "mcs_services") {
    MCS.mcs_TSA_OnLoad.TSAName = formContext.getAttribute("mcs_name").getValue();

    var provSiteField = formContext.getAttribute("cvt_relatedprovidersiteid");
    var patSiteField = formContext.getAttribute("cvt_relatedpatientsiteid");
    switch (MCS.mcs_TSA_OnLoad.GroupAppt) {
    case false:
        if (patSiteField.getValue() != null) {
            var relatedPatientSite = patSiteField.getValue();
            MCS.mcs_TSA_OnLoad.relatedPatientSiteId = relatedPatientSite[0].id;
            MCS.mcs_TSA_OnLoad.relatedPatientSiteName = relatedPatientSite[0].name;
        }
        if (provSiteField.getValue() != null) {
            var relatedProviderSite = provSiteField.getValue();
            MCS.mcs_TSA_OnLoad.relatedProviderSiteId = relatedProviderSite[0].id;
            MCS.mcs_TSA_OnLoad.relatedProviderSiteName = relatedProviderSite[0].name;
        }
        break;

    case true:
        if (provSiteField.getValue() != null) {
            var relatedProviderSite = provSiteField.getValue();
            MCS.mcs_TSA_OnLoad.relatedProviderSiteId = relatedProviderSite[0].id;
            MCS.mcs_TSA_OnLoad.relatedProviderSiteName = relatedProviderSite[0].name;
        }
        var patFacilityField = formContext.getAttribute("cvt_patientfacility");
        if (patFacilityField.getValue() != null) {
            MCS.mcs_TSA_OnLoad.relatedPatientFacilityId = patFacilityField.getValue()[0].id;
            MCS.mcs_TSA_OnLoad.relatedPatientFacilityName = patFacilityField.getValue()[0].name;
        }
        break;
    }
};

MCS.mcs_TSA_OnLoad.LoadProvResources = function (executionObj) {
    var formContext = executionContext.getFormContext();
    if (formContext.getAttribute("cvt_relatedmasterid").getValue() == null) return;
    var mtsaId = formContext.getAttribute("cvt_relatedmasterid").getValue()[0].id;

    if ((mtsaId != null) && (MCS.mcs_TSA_OnLoad.Form_Type === 1) && (MCS.mcs_TSA_OnLoad.ProvResourcesCreated === false)) {

        //Looking up the Prov Site Resources related to the MTSA we came from.
        //var columns = "<attribute name='cvt_providerresourcegroupid'/><attribute name='cvt_tsaresourcetype'/>";
        var columns = ['cvt_providerresourcegroupid', 'cvt_tsaresourcetype'];
        var conditions = ["<condition attribute='cvt_relatedmastertsaid' operator='eq' uitype='cvt_mastertsa' value='" + mtsaId + "' />", "<condition attribute= 'statecode' operator='in'><value>0</value><value>3</value></condition>"];
        var fetchXml = MCS.cvt_Common.CreateFetch('cvt_providerresourcegroup', columns, conditions, null);

        XrmSvcToolkit.fetch({
            fetchXml: fetchXml,
            async: true,
            successCallback: function (result) {
                countValue = result.entities.length;
                if (countValue > 0) {
                    for (var i = 0; i < countValue; i++) {
                        var provResourceId = result.entities[i].cvt_providerresourcegroupid;
                        var tsaResourceType = result.entities[i].cvt_tsaresourcetype.Value;

                        //Single Resource
                        if (tsaResourceType === 1) {
                            Xrm.WebApi.retrieveRecord("cvt_providerresourcegroup", provResourceId, "?$select=cvt_name,cvt_TSAResourceType,cvt_Type,cvt_RelatedResourceId,cvt_relatedsiteid").then(
                            function success(result) {
                                Name = result.cvt_name;
                                Type = result.cvt_Type.Value;
                                TSAType = result.cvt_TSAResourceType.Value;
                                RelatedSite = result.cvt_relatedsiteid;
                                Resource = result.cvt_RelatedResourceId;
                            },
                            function () {
                                alert("Retrieve Failed")
                            });

                            //CrmRestKit.Retrieve('cvt_providerresourcegroup', provResourceId, ['cvt_name', 'cvt_TSAResourceType', 'cvt_Type', 'cvt_RelatedResourceId', 'cvt_relatedsiteid'], false)
                            //         .fail(function () { alert("Retrieve Failed") })
                            //         .done(function (data) {
                            //             Name = data.d.cvt_name;
                            //             Type = data.d.cvt_Type.Value;
                            //             TSAType = data.d.cvt_TSAResourceType.Value;
                            //             RelatedSite = data.d.cvt_relatedsiteid;
                            //             Resource = data.d.cvt_RelatedResourceId;
                            //         })
                            var provResource = {
                                'cvt_name': Name,
                                'cvt_TSAResourceType': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                                    },
                                    Value: TSAType
                                },
                                'cvt_Type': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                                    },
                                    Value: Type
                                },
                                // 'cvt_RelatedTSAid': { __metadata: { type: "Microsoft.Crm.Sdk.Data.Services.EntityReference" }, Id: EntityId, LogicalName: EntityName },
                                'cvt_RelatedResourceId': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                    },
                                    Id: Resource.Id,
                                    LogicalName: Resource.LogicalName
                                },
                                'cvt_relatedsiteid': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                    },
                                    Id: RelatedSite.Id,
                                    LogicalName: RelatedSite.LogicalName
                                },
                                'cvt_mtsaguid': mtsaId
                            };
                            Xrm.WebApi.createRecord("cvt_providerresourcegroup", provResource).then(
                            function success(result) {},
                            function (error) {
                                alert("Create failed")
                            });
                            //CrmRestKit.Create('cvt_providerresourcegroup', provResource, true)
                            //.fail(function () { alert("Create failed") })
                            //.done()
                        }

                        //Resource Group
                        if (tsaResourceType === 0) {
                            Xrm.WebApi.retrieveRecord("cvt_providerresourcegroup", provResourceId, "?$select=cvt_name,cvt_TSAResourceType,cvt_Type,cvt_RelatedResourceGroupid").then(
                            function success(result) {
                                Name = result.cvt_name;
                                Type = result.cvt_Type.Value;
                                TSAType = result.cvt_TSAResourceType.Value;
                                RelatedSite = result.cvt_relatedsiteid;
                                ResourceGroup = result.cvt_RelatedResourceGroupid;
                            },
                            function (error) {
                                alert("Retrieve Failed")
                            });
                            //CrmRestKit.Retrieve('cvt_providerresourcegroup', provResourceId, ['cvt_name', 'cvt_TSAResourceType', 'cvt_Type', 'cvt_RelatedResourceGroupid', 'cvt_relatedsiteid'], false)
                            //         .fail(function () { alert("Retrieve Failed") })
                            //         .done(function (data) {
                            //             Name = data.d.cvt_name;
                            //             Type = data.d.cvt_Type.Value;
                            //             TSAType = data.d.cvt_TSAResourceType.Value;
                            //             RelatedSite = data.d.cvt_relatedsiteid;
                            //             ResourceGroup = data.d.cvt_RelatedResourceGroupid;
                            //         })
                            var provResource = {
                                'cvt_name': Name,
                                'cvt_TSAResourceType': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                                    },
                                    Value: TSAType
                                },
                                'cvt_Type': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                                    },
                                    Value: Type
                                },
                                //  'cvt_RelatedTSAid': { __metadata: { type: "Microsoft.Crm.Sdk.Data.Services.EntityReference" }, Id: EntityId, LogicalName: EntityName },
                                'cvt_RelatedResourceGroupid': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                    },
                                    Id: ResourceGroup.Id,
                                    LogicalName: ResourceGroup.LogicalName
                                },
                                'cvt_relatedsiteid': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                    },
                                    Id: RelatedSite.Id,
                                    LogicalName: RelatedSite.LogicalName
                                },
                                'cvt_mtsaguid': mtsaId
                            };
                            Xrm.WebApi.createRecord("cvt_providerresourcegroup", provResource).then(
                            function success(result) {},
                            function (error) {
                                alert("Create failed")
                            });

                            //CrmRestKit.Create('cvt_providerresourcegroup', provResource, true)
                            //    .fail(function () { alert("Create failed") })
                            //    .done()
                        }

                        //Provider
                        if (tsaResourceType === 2) {
                            Xrm.WebApi.retrieveRecord("cvt_providerresourcegroup", provResourceId, "?$select=cvt_name,cvt_TSAResourceType,cvt_RelatedUserId,cvt_relatedsiteid").then(
                            function success(result) {
                                Name = result.cvt_name;
                                TSAType = result.cvt_TSAResourceType.Value;
                                RelatedSite = result.cvt_relatedsiteid;
                                User = result.cvt_RelatedUserId;
                            },
                            function () {
                                alert("Retrieve Failed")
                            });
                            //CrmRestKit.Retrieve('cvt_providerresourcegroup', provResourceId, ['cvt_name', 'cvt_TSAResourceType', 'cvt_RelatedUserId', 'cvt_relatedsiteid'], false)
                            //         .fail(function () { alert("Retrieve Failed") })
                            //         .done(function (data) {
                            //             Name = data.d.cvt_name;
                            //             TSAType = data.d.cvt_TSAResourceType.Value;
                            //             RelatedSite = data.d.cvt_relatedsiteid;
                            //             User = data.d.cvt_RelatedUserId;
                            //         })
                            var provResource = {
                                'cvt_name': Name,
                                'cvt_TSAResourceType': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                                    },
                                    Value: TSAType
                                },
                                //  'cvt_RelatedTSAid': { __metadata: { type: "Microsoft.Crm.Sdk.Data.Services.EntityReference" }, Id: EntityId, LogicalName: EntityName },
                                'cvt_RelatedUserId': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                    },
                                    Id: User.Id,
                                    LogicalName: User.LogicalName
                                },
                                'cvt_relatedsiteid': {
                                    __metadata: {
                                        type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                    },
                                    Id: RelatedSite.Id,
                                    LogicalName: RelatedSite.LogicalName
                                },
                                'cvt_mtsaguid': mtsaId
                            };
                            Xrm.WebApi.createRecord("cvt_providerresourcegroup", provResource).then(
                            function success(result) {},
                            function () {
                                alert("Create failed")
                            });
                            //CrmRestKit.Create('cvt_providerresourcegroup', provResource, true)
                            //.fail(function () { alert("Create failed") })
                            //.done()
                        }
                    }
                }
            },
            errorCallback: function (error) {
                throw error;
            }
        });
    }
};

MCS.mcs_TSA_OnLoad.AssignProvResources = function (executionContext, executionObj) {
    var formContext = executionContext.getFormContext();
    if (formContext.getAttribute("cvt_relatedmasterid").getValue() == null) return;
    var mtsaId = formContext.getAttribute("cvt_relatedmasterid").getValue()[0].id;
    var EntityId;
    var EntityName;

    if ((mtsaId != null) && (MCS.mcs_TSA_OnLoad.Form_Type === 2)) {
        if (typeof(MCS.mcs_TSA_OnLoad) !== "undefined") {
            EntityId = MCS.mcs_TSA_OnLoad.EntityId;
            EntityName = MCS.mcs_TSA_OnLoad.EntityName;
        }
        else {
            EntityId = window.parent.MCS.mcs_TSA_OnLoad.EntityId;
            EntityName = window.parent.MCS.mcs_TSA_OnLoad.EntityName;
        }

        //Looking up the Prov Site Resources related to the MTSA we came from.
        var columns = ['cvt_providerresourcegroupid', 'cvt_tsaresourcetype'];
        var conditions = ["<condition attribute='cvt_mtsaguid' value='" + mtsaId + "' operator='eq'/>", "<condition attribute= 'statecode' operator='in'><value>0</value><value>3</value></condition>"];
        var fetchXml = MCS.cvt_Common.CreateFetch('cvt_providerresourcegroup', columns, conditions, null);

        XrmSvcToolkit.fetch({
            fetchXml: fetchXml,
            async: false,
            successCallback: function (result) {
                countValue = result.entities.length;
                if (countValue > 0) {
                    for (var i = 0; i < countValue; i++) {
                        var provResourceId = result.entities[i].cvt_providerresourcegroupid;

                        var provResource = {
                            'cvt_RelatedTSAid': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                },
                                Id: EntityId,
                                LogicalName: EntityName
                            },
                            'cvt_mtsaguid': ''
                        };
                        Xrm.WebApi.updateRecord("cvt_providerresourcegroup", provResourceId, provResource).then(
                        function success(result) {},
                        function (error) {
                            alert("Update Failed")
                        });

                        //CrmRestKit.Update('cvt_providerresourcegroup', provResourceId, provResource, false)
                        //                .fail(function () { alert("Update Failed") })
                        //                .done(function () {
                        //                })
                    }
                }
            },
            errorCallback: function (error) {
                throw error;
            }
        });
    }
};

MCS.mcs_TSA_OnLoad.RefreshGridAgain = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (formContext.getAttribute("cvt_relatedmasterid").getValue() == null) return;
    var mtsaId = formContext.getAttribute("cvt_relatedmasterid").getValue()[0].id;
    if ((mtsaId != null) && (MCS.mcs_TSA_OnLoad.Form_Type === 2)) {

        var ProvSiteResourcesGrid = document.getElementById("provgroups");
        if (ProvSiteResourcesGrid == null) {
            setTimeout(function () {
                MCS.mcs_TSA_OnLoad.RefreshGridAgain();
            },
            500);
            return;
        }
        setTimeout(function () {

            if (ProvSiteResourcesGrid.control.Refresh != undefined) {
                ProvSiteResourcesGrid.control.Refresh()
            }
            else {
                ProvSiteResourcesGrid.control.refresh()
            }
        },
        3000);

        setTimeout(function () {

            if (ProvSiteResourcesGrid.control.Refresh != undefined) {
                ProvSiteResourcesGrid.control.Refresh()
            }
            else {
                ProvSiteResourcesGrid.control.refresh()
            }
        },
        3000);

        setTimeout(function () {

            if (ProvSiteResourcesGrid.control.Refresh != undefined) {
                ProvSiteResourcesGrid.control.Refresh()
            }
            else {
                ProvSiteResourcesGrid.control.refresh()
            }
        },
        3000);

        setTimeout(function () {

            if (ProvSiteResourcesGrid.control.Refresh != undefined) {
                ProvSiteResourcesGrid.control.Refresh()
            }
            else {
                ProvSiteResourcesGrid.control.refresh()
            }
        },
        3000);
    }
};

MCS.mcs_TSA_OnLoad.showEmergencyContactViewer = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() === MCS.cvt_Common.FORM_TYPE_CREATE) {
        formContext.ui.close();
    }
    else {
        if (formContext.getAttribute("cvt_relatedmasterid").getValue() == null) return;
        if (MCS.mcs_TSA_OnLoad.Form_Type === MCS.cvt_Common.FORM_TYPE_CREATE || MCS.mcs_TSA_OnLoad.GroupAppt === true || MCS.mcs_TSA_OnLoad.Type === true) {
            formContext.getControl("IFRAME_EmergencyContactViewer").setVisible(false);
            return;
        }
        if (formContext.getAttribute("cvt_relatedpatientsiteid").getValue() == null) {
            alert("Please select a Patient Site.");
            formContext.getControl("IFRAME_EmergencyContactViewer").setVisible(false);
            return;
        }
        var siteId = formContext.getAttribute("cvt_relatedpatientsiteid").getValue()[0];
        Xrm.WebApi.retrieveRecord("mcs_site", siteId.id, "?$select=cvt_Local911,cvt_UrgentEmergencyPhone,cvt_phone").then(
        function success(result) {
            var resultFields = data.d;
            var patTCTteam = (formContext.getAttribute("cvt_patientsitetctteam") != null) ? formContext.getAttribute("cvt_patientsitetctteam").getValue() : null;
            MCS.SiteLocal911Phone = resultFields["cvt_Local911"];
            MCS.SiteEmergencyPhone = resultFields["cvt_UrgentEmergencyPhone"];
            MCS.SiteMainPhone = resultFields["cvt_phone"];

            if (patTCTteam != null) {
                //var filter = "SystemUserId eq (Guid' " + userId + "') and TeamId eq (Guid' " + teamid + "')";
                var filter = "TeamId eq (Guid'" + patTCTteam[0].id + "')";; //Teammembers where teamid = PatTCTTeam
                Xrm.WebApi.retrieveMultipleRecords("TeamMembership", "?$select=TeamId', 'SystemUserId&$filter=" + filter).then(
                function success(result1) {
                    for (var i = 0; i < result1.entities.length; i++) {
                        //alert("Results found: " + result1.entities.length);
                        var teamMembers = result1.entities[i];
                        for (var i = 0; i < teamMembers.length; i++) {
                            var tctName = "";
                            var tctPhone = "";
                            Xrm.WebApi.retrieveRecord("SystemUser", teamMembers[i].SystemUserId, "?$select=FirstName,LastName,cvt_officephone,MobilePhone").then(
                            function success(result2) {
                                var office = result2["cvt_officephone"];
                                var mobile = result2["MobilePhone"];
                                tctName = result2["FirstName"] + " " + result2["LastName"];
                                tctPhone = (mobile == null) ? office : mobile;
                            },
                            function (error) {
                                alert("user retrieve failed");
                            });
                            if (tctPhone != null) {
                                if (MCS.TCTPhone !== "") MCS.TCTPhone += "; ";
                                MCS.TCTPhone += tctName + ': ' + tctPhone;
                            }
                        }
                    }
                },
                function (error) {
                    alert("team member retrieve failed");
                });
            }
            else {
                MCS.TCTPhone = "No TCT Team Members";
            }
        },
        function (error) {});
        var urlBuilder = MCS.cvt_Common.BuildRelationshipServerUrl() + "/WebResources/cvt_EmergencyContactViewer.html";
        var IFrame = formContext.ui.controls.get("IFRAME_EmergencyContactViewer");

        // Use the setSrc method so that the IFRAME uses the new page with the existing parameters
        IFrame.setSrc(urlBuilder);
    }
};

MCS.mcs_TSA_OnLoad.CheckForMTSA = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Check if formType = create
    if (formContext.ui.getFormType() === MCS.cvt_Common.FORM_TYPE_CREATE) {
        //Check for MTSA - //No MTSA - must be created from one.
        if (formContext.getAttribute("cvt_relatedmasterid").getValue() == null) MCS.cvt_Common.closeWindow(executionContext, "A TSA must be created from a MTSA.\n\nPlease close this TSA form and start from a MTSA.");
    }
};

MCS.mcs_TSA_OnLoad.SOS = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Make the SOS field visible and get the url
    if (formContext.getAttribute("cvt_servicetype").getValue() != null) {
        Xrm.WebApi.retrieveRecord("mcs_servicetype", formContext.getAttribute("cvt_servicetype").getValue()[0].id, "?$select=cvt_specialtyoperationssupplement").then(
        function success(result) {
            var url = data.d["cvt_specialtyoperationssupplement"];

            if (url) {
                formContext.getControl("cvt_specialtyoperationssupplement").setVisible(true);
                formContext.getAttribute("cvt_specialtyoperationssupplement").setValue(url);
            }
        },
        function (error) {});

        //CrmRestKit.Retrieve('mcs_servicetype', Xrm.Page.getAttribute("cvt_servicetype").getValue()[0].id, ["cvt_specialtyoperationssupplement"], false).fail(function (err) {
        //    //alert("fail");
        //}).done(function (data) {
        //    //alert("success");
        //    var url = data.d["cvt_specialtyoperationssupplement"];
        //    if (url) {
        //        Xrm.Page.getControl("cvt_specialtyoperationssupplement").setVisible(true);
        //        Xrm.Page.getAttribute("cvt_specialtyoperationssupplement").setValue(url);
        //    }
        //});
    }
};
//Library Name: mcs_TSA.OnChange.js
if (typeof MCS === "undefined") MCS = {};
// Create Namespace container for functions in this library;
MCS.mcs_TSA_OnChange = {};

//Called from StatusReason
MCS.mcs_TSA_OnChange.ProductionLock = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var status = formContext.getAttribute("statuscode").getValue();
    var isProduction = (status === 251920000) ? true : false;
    //Draft or Revision
    var notEditable = (status != 1 && status != 917290007) ? true : false;
    var groupApptOption = (formContext.getAttribute("cvt_groupappointment") != null) ? formContext.getAttribute("cvt_groupappointment").getValue() : false;
    var label = (groupApptOption === true) ? "Group Appointment " : "";

    label += (isProduction === true) ? "TSA(Production Lock) ~ Save in Draft to Edit" : "TSA-Draft";

    formContext.ui.tabs.get("tab_Info").setLabel(label);
    var alwaysDisable = ['cvt_relatedprovidersiteid', 'cvt_servicetype', 'cvt_servicesubtype', 'cvt_groupappointment', 'cvt_provistaclinic', 'cvt_patvistaclinic', 'cvt_servicescope', 'cvt_availabletelehealthmodalities'];

    var disabledFields = ['cvt_servicelevels', 'cvt_relatedpatientsiteid', 'ownerid', 'cvt_relatedpatientsiteid', 'cvt_patientfacility', 'cvt_duration', 'cvt_startevery'];

    for (fields in alwaysDisable) {
        formContext.getControl(alwaysDisable[fields]).setDisabled(true);
    }
    for (fields in disabledFields) {
        formContext.getControl(disabledFields[fields]).setDisabled(notEditable);
    }
    if (!notEditable) {
        MCS.mcs_TSA_OnChange.GroupAppt(executionContext);
        MCS.mcs_TSA_OnChange.ChangeType(executionContext);
    }

    if (notEditable && formContext.getAttribute('cvt_duration').getValue() == null) formContext.getAttribute("cvt_duration").setRequiredLevel("none");
    else formContext.getAttribute("cvt_duration").setRequiredLevel("required");

    if (notEditable && formContext.getAttribute('cvt_startevery').getValue() == null) formContext.getAttribute("cvt_startevery").setRequiredLevel("none");
    else formContext.getAttribute("cvt_startevery").setRequiredLevel("required");
};

MCS.mcs_TSA_OnChange.GroupAppt = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var isHomeMobile = formContext.getAttribute("cvt_type").getValue();
    var patSite = formContext.getAttribute("cvt_relatedpatientsiteid");
    var patSiteControl = formContext.getControl("cvt_relatedpatientsiteid");
    var patFac = formContext.getAttribute("cvt_patientfacility");
    var patFacControl = formContext.getControl("cvt_patientfacility");
    var status = formContext.getAttribute("statuscode").getValue();
    var groupApptOptionValue = (formContext.getAttribute("cvt_groupappointment") != null) ? formContext.getAttribute("cvt_groupappointment").getValue() : null;
    var label = "";
    if (isHomeMobile) {
        patSite.setRequiredLevel("none");
        patSite.setValue(null);
        patSiteControl.setVisible(false);
        patFac.setRequiredLevel("none");
        patFacControl.setDisabled(true);
        label += "VA Video Connect ";
        if (groupApptOptionValue) {
            if (status === 251920000) label += "Group Appointment TSA(Production Lock) ~ Save in Draft to Edit";
            else label += "Group Appointment TSA-Draft";
        }
        else {
            if (status === 251920000) label += 'TSA(Production Lock) ~ Save in Draft to Edit';
            else label += 'TSA-Draft';
        }

    }
    else {
        if (groupApptOptionValue === 1) {
            patSite.setRequiredLevel("none");
            patSite.setValue(null);
            patSiteControl.setVisible(false);
            if (!isHomeMobile) {
                patFacControl.setDisabled(false);
                patFac.setRequiredLevel("required");
            }

            if (status === 251920000) label = 'Group Appointment TSA(Production Lock) ~ Save in Draft to Edit';
            else label = 'Group Appointment TSA-Draft';
        }
        else {
            patSiteControl.setVisible(true);
            patSite.setRequiredLevel("required");
            patFacControl.setDisabled(true);
            patFac.setRequiredLevel("none");
            //formContext.getControl("mcs_capacity").setDisabled(true);
            if (status == 251920000) label = 'TSA(Production Lock) ~ Save in Draft to Edit';
            else label = 'TSA-Draft';
        }
        //initialstatus.setValue(4);
        formContext.ui.tabs.get("tab_Info").setLabel(label);
    }
};

MCS.mcs_TSA_OnChange.StoreForward = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //Check if this TSA is store forward
    var SFT = formContext.getAttribute("cvt_availabletelehealthmodalities").getValue() === 917290001;
    formContext.getControl("cvt_groupappointment").setVisible(!SFT);
};

MCS.mcs_TSA_OnChange.ChangeType = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (formContext.ui.getFormType() === MCS.cvt_Common.FORM_TYPE_CREATE) {
        formContext.getAttribute("cvt_servicescope").setValue(917290001);
        formContext.getAttribute("cvt_servicescope").setSubmitMode("always");
    }
    formContext.getAttribute("cvt_type").setSubmitMode("always");

    if (formContext.getAttribute("cvt_type").getValue() === true) { //CVT to Home
        formContext.getControl("cvt_groupappointment").setVisible(true);
        formContext.getControl("cvt_servicescope").setDisabled(true);

        formContext.getControl("cvt_relatedpatientsiteid").setVisible(false);
        formContext.getControl("cvt_patientfacility").setVisible(false);
        formContext.getAttribute("cvt_relatedpatientsiteid").setRequiredLevel("none");

        formContext.ui.tabs.get("tab_Pat").setVisible(false);
    }
};

MCS.mcs_TSA_OnChange.setInterIntraFacility = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var patSiteObj = formContext.getAttribute("cvt_relatedpatientsiteid");
    var patFacObj = formContext.getAttribute("cvt_patientfacility");
    var serviceScope = formContext.getAttribute("cvt_servicescope");
    //Prov site will always be on the form, so go ahead and getValue, Pat Site or Pat Facility will be on form, don't get both
    var provSite = formContext.getAttribute("cvt_relatedprovidersiteid").getValue();

    if (patSiteObj != null) patSiteObj = patSiteObj.getValue();
    if (patFacObj != null) patFacObj = patFacObj.getValue();

    //determine if the form is displaying facility or site for patients (based on group or individual)
    var facOrSite = patSiteObj == null ? "facility" : "site";
    //if either pat site/facility or provider site are not populated, do nothing, otherwise, set intrafacility or interfacility for the user
    if (provSite == null || ((facOrSite === "site" && patSiteObj == null) || (facOrSite === "facility" && patFacObj == null))) return;
    else {
        //Query Facility for both records and match them
        var provFacilityId = MCS.mcs_TSA_OnChange.QueryFacility(provSite[0].id).Id;
        var patFacilityId = facOrSite === "facility" ? patFacObj[0].id : MCS.mcs_TSA_OnChange.QueryFacility(patSiteObj[0].id).Id;

        //Clean both guids for the compare
        if (MCS.cvt_Common.compareGUIDS(patFacilityId, provFacilityId) === true) { //if facility for patient and provider site are the same, then set service scope to intra-facility
            if (serviceScope.getValue() !== 917290001) serviceScope.setValue(917290001);
        }
        else { // if facility for patient and provider site are different, then set service scope to inter-facility
            if (serviceScope.getValue() !== 917290000) serviceScope.setValue(917290000);
        }
        serviceScope.setSubmitMode("always");
    }
};

MCS.mcs_TSA_OnChange.QueryFacility = function (siteID) {
    var facilityId;
    Xrm.WebApi.retrieveRecord("mcs_site", siteID, "?$select=mcs_FacilityId").then(
    function success(result) {
        if (result) {
            facilityId = result.mcs_FacilityId;
        }
    },
    function (error) {});
    //var call = CrmRestKit.Retrieve('mcs_site', siteID, ['mcs_FacilityId'], false);
    //call.fail(
    //    function (error) {
    //        return;
    //    }).done(function (site) {
    //        if (site && site.d) {
    //            facilityId = site.d.mcs_FacilityId;
    //        }
    //    });
    return facilityId;
};

//Specialty
MCS.mcs_TSA_OnChange.Specialty = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //See if any sub-types exist
    if (formContext.getAttribute("cvt_servicetype").getValue() != null) {
        Xrm.WebApi.retrieveMultipleRecords("mcs_servicesubtype", "?$select=mcs_name&$filter=cvt_relatedServiceTypeId/Id eq guid" + formContext.getAttribute("cvt_servicetype").getValue()[0].id).then(
        function success(result) {
            if (result != null && result.entities.length !== 0) {
                formContext.getControl("cvt_servicesubtype").setVisible(true);
                formContext.getControl("cvt_servicesubtype").setFocus();
            }
            else {
                formContext.getControl("cvt_servicesubtype").setVisible(false);
                formContext.getAttribute("cvt_servicesubtype").setValue(null);
            }
            MCS.mcs_TSA_OnLoad.SOS();
        },
        function (error) {
            formContext.getControl("cvt_servicesubtype").setVisible(false);
            formContext.getAttribute("cvt_servicesubtype").setValue(null);
        });

        //calls = CrmRestKit.ByQuery("mcs_servicesubtype", ['mcs_name'], "cvt_relatedServiceTypeId/Id eq guid'" + formContext.getAttribute("cvt_servicetype").getValue()[0].id + "'", false);
        //calls.fail(function (err) {
        //    formContext.getControl("cvt_servicesubtype").setVisible(false);
        //    formContext.getAttribute("cvt_servicesubtype").setValue(null);
        //}).done(function (data) {
        //    if (data && data.d && data.d.results != null && data.d.results.length != 0) {
        //        formContext.getControl("cvt_servicesubtype").setVisible(true);
        //        formContext.getControl("cvt_servicesubtype").setFocus();
        //    }
        //    else {
        //        formContext.getControl("cvt_servicesubtype").setVisible(false);
        //        formContext.getAttribute("cvt_servicesubtype").setValue(null);
        //    }
        //    MCS.mcs_TSA_OnLoad.SOS();
        //});
    }
    else {
        formContext.getControl("cvt_servicesubtype").setVisible(false);
        formContext.getAttribute("cvt_servicesubtype").setValue(null);
    }
};

//Provider Site TCT Team
MCS.mcs_TSA_OnChange.TCTTeamPro = function (executionContext) {
    var formContext = executionContext.getFormContext();
    //See if any sub-types exist
    if (formContext.getAttribute("cvt_relatedprovidersiteid").getValue() != null) {
        Xrm.WebApi.retrieveMultipleRecords("Team", "?$select=Name,TeamId&$filter=cvt_Type/Value eq 917290007 and cvt_TMPSite/Id eq" + formContext.getAttribute("cvt_relatedprovidersiteid").getValue()[0].id).then(
        function success(result) {
            if (result != null && result.entities.length !== 0) {
                //Set the TCT Team
                var teamObj = new Array();
                teamObj[0] = new Object();
                teamObj[0].id = result.entities[0].TeamId;
                teamObj[0].name = result.entities[0].Name;
                teamObj[0].entityType = 'Team';

                formContext.getAttribute("cvt_providersitetctteam").setValue(teamObj)
            }
            else formContext.getAttribute("cvt_providersitetctteam").setValue(null);
        },
        function (error) {});
        //calls = CrmRestKit.ByQuery("Team", ['Name', 'TeamId'], "cvt_Type/Value eq 917290007 and cvt_TMPSite/Id eq (Guid'" + formContext.getAttribute("cvt_relatedprovidersiteid").getValue()[0].id + "')", false);
        //calls.fail(function (err) {
        //    //Fail
        //}).done(function (data) {
        //    if (data && data.d && data.d.results != null && data.d.results.length != 0) {
        //        //Set the TCT Team
        //        var teamObj = new Array();
        //        teamObj[0] = new Object();
        //        teamObj[0].id = data.d.results[0].TeamId;
        //        teamObj[0].name = data.d.results[0].Name;
        //        teamObj[0].entityType = 'Team';
        //        formContext.getAttribute("cvt_providersitetctteam").setValue(teamObj)
        //    }
        //    else
        //        formContext.getAttribute("cvt_providersitetctteam").setValue(null);
        //});
    }
    else formContext.getAttribute("cvt_providersitetctteam").setValue(null);
};
//Patient Site TCT Team
MCS.mcs_TSA_OnChange.TCTTeamPat = function executionContext() {
    var formContext = executionContext.getFormContext();
    //See if any sub-types exist
    if (formContext.getAttribute("cvt_relatedpatientsiteid").getValue() != null) {
        Xrm.WebApi.retrieveMultipleRecords("Team", "?$select=Name,TeamId&$filter=cvt_Type/Value eq 917290007 and cvt_TMPSite/Id eq (Guid'" + formContext.getAttribute("cvt_relatedpatientsiteid").getValue()[0].id + "')").then(
        function success(result) {
            if (result != null && result.entities.length !== 0) {
                //Set the TCT Team
                var teamObj = new Array();
                teamObj[0] = new Object();
                teamObj[0].id = data.d.results[0].TeamId;
                teamObj[0].name = data.d.results[0].Name;
                teamObj[0].entityType = 'Team';

                formContext.getAttribute("cvt_patientsitetctteam").setValue(teamObj)
            }
            else formContext.getAttribute("cvt_patientsitetctteam").setValue(null);
        },
        function (error) {});
        //calls = CrmRestKit.ByQuery("Team", ['Name', 'TeamId'], "cvt_Type/Value eq 917290007 and cvt_TMPSite/Id eq (Guid'" + formContext.getAttribute("cvt_relatedpatientsiteid").getValue()[0].id + "')", false);
        //calls.fail(function (err) {
        //    //Fail
        //}).done(function (data) {
        //    if (data && data.d && data.d.results != null && data.d.results.length != 0) {
        //        //Set the TCT Team
        //        var teamObj = new Array();
        //        teamObj[0] = new Object();
        //        teamObj[0].id = data.d.results[0].TeamId;
        //        teamObj[0].name = data.d.results[0].Name;
        //        teamObj[0].entityType = 'Team';
        //        formContext.getAttribute("cvt_patientsitetctteam").setValue(teamObj)
        //    }
        //    else
        //        formContext.getAttribute("cvt_patientsitetctteam").setValue(null);
        //});
    }
    else formContext.getAttribute("cvt_patientsitetctteam").setValue(null);
};
//Library Name: mcs_TSA.OnSave.js
if (typeof MCS === "undefined") MCS = {};
// Create Namespace container for functions in this library;
MCS.mcs_TSA = {};

MCS.mcs_TSA.CreateName = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var cvt_servicetype = formContext.getAttribute("cvt_servicetype").getValue();
    var cvt_servicesubtype = formContext.getAttribute("cvt_servicesubtype").getValue();
    var cvt_relatedprovidersiteid = formContext.getAttribute("cvt_relatedprovidersiteid").getValue();
    var cvt_type = formContext.getAttribute("cvt_type").getValue();
    var cvt_groupappointment = formContext.getAttribute("cvt_groupappointment").getValue();

    var derivedResultField = "";

    if (cvt_servicetype != null) {
        derivedResultField += cvt_servicetype[0].name;
    }

    if (cvt_servicesubtype != null) {
        derivedResultField += " : ";
        derivedResultField += cvt_servicesubtype[0].name;
    }

    derivedResultField += " From ";

    if (cvt_relatedprovidersiteid != null) {
        derivedResultField += cvt_relatedprovidersiteid[0].name;
    }

    //Group
    if (cvt_groupappointment === true) {
        //derivedResultField += " (G)";
    } else {
        //CVT to home
        if (cvt_type === true) {
            derivedResultField += " to VA Video Connect";
        }
        //else {
        //    derivedResultField += " (I)";
        //}
    }
    if (formContext.getAttribute("mcs_name").getValue() !== derivedResultField) {
        formContext.getAttribute("mcs_name").setSubmitMode("always");
        formContext.getAttribute("mcs_name").setValue(derivedResultField);
    }
};

//To move to Common
MCS.mcs_TSA.runRibbonWorkflow = function (executionContext, workflowId) {
    var formContext = executionContext.getFormContext();
    //To move to Common
    MCS.GlobalFunctions.runWorkflow(formContext.data.entity.getId(), workflowId, MCS.GlobalFunctions.runWorkflowResponse);
};

MCS.mcs_TSA.EnforceChanges = function (executionContext) {
    var formContext = executionContext.getFormContext();
    if (MCS.mcs_TSA_OnLoad.GroupAppt !== formContext.getAttribute("cvt_groupappointment").getValue()) formContext.getAttribute("cvt_groupappointment").setSubmitMode("always");

    formContext.getAttribute("cvt_relatedpatientsiteid").setSubmitMode("always");

    if (MCS.mcs_TSA_OnLoad.Form_Type === MCS.cvt_Common.FORM_TYPE_CREATE) {
        formContext.getAttribute("cvt_type").setSubmitMode("always");
    }
    else {
        if (MCS.mcs_TSA_OnLoad.Type !== formContext.getAttribute("cvt_type").getValue()) formContext.getAttribute("cvt_type").setSubmitMode("always");
        else formContext.getAttribute("cvt_type").setSubmitMode("never");
    }
};

//Description: Service Activities Warning
MCS.mcs_TSA.RelatedServiceActivitiesWarning = function (executionContext, executionObj) {
    var formContext = executionContext.getFormContext();
    var status = formContext.getAttribute("statuscode").getValue();
    var service = formContext.getAttribute("mcs_relatedserviceid").getValue();
    var EntityId;

    if ((status === 251920000) && (service != null)) {
        if (typeof(MCS.mcs_TSA_OnLoad) !== "undefined") {
            EntityId = MCS.mcs_TSA_OnLoad.EntityId;
        }
        else {
            EntityId = window.parent.MCS.mcs_TSA_OnLoad.EntityId;
        }

        var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' aggregate='true'>";
        fetchXml += "<entity name='serviceappointment'>";
        fetchXml += "<attribute name='subject' alias='recordcount' aggregate='count' />";
        fetchXml += "<filter type='and'>";
        fetchXml += "<condition attribute='mcs_relatedtsa' operator='eq' uitype='mcs_services' value='" + EntityId + "' />";
        fetchXml += "<condition attribute= 'statecode' operator='in'><value>0</value><value>3</value></condition>";
        fetchXml += "</filter>";
        fetchXml += "</entity>";
        fetchXml += "</fetch>";

        XrmSvcToolkit.fetch({
            fetchXml: fetchXml,
            async: false,
            successCallback: function (result) {
                countValue = result.entities[0].recordcount;
                if (countValue > 0) {
                    // alert("You are about to update the Service Components of this TSA. There are open or scheduled Service Activities which are using the previous set of Service components for this TSA. Only future Service Activities related to this TSA will use the newly defined Service Components.");
                    var r = confirm("Service Activities exist that are using previously defined service components of this TSA. Only future Service Activities will inherit the newly defined service components. If you would like to continue and update this TSA's service components, press OK. Otherwise press Cancel to abort and review the Service Activities using the previously defined service components of this TSA.");
                    if (r === true) {
                        x = "Save Confirmed";
                    }
                    else {
                        x = executionObj.getEventArgs().preventDefault();
                        formContext.getAttribute("statuscode").setValue(1);
                    }
                }
            },
            errorCallback: function (error) {
                throw error;
            }
        });
    }
};

MCS.mcs_TSA.CheckPatientProviderSiteResources = function (executionContext, executionObj) {
    var formContext = executionContext.getFormContext();
    var status = formContext.getAttribute("statuscode").getValue();
    var EntityId;

    if (status === 251920000) {

        if (typeof(MCS.mcs_TSA_OnLoad) !== "undefined") {
            EntityId = MCS.mcs_TSA_OnLoad.EntityId;
        }
        else {
            EntityId = window.parent.MCS.mcs_TSA_OnLoad.EntityId;
        }

        //First do a check to make sure there are any Pat / Pro Site Resources added to the TSA. We dont want to move to production if there are none.
        //if CVT to home then bypass the patient resources
        if (formContext.getAttribute("cvt_type").getValue() != true) {
            var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' aggregate='true'>";
            fetchXml += "<entity name='cvt_patientresourcegroup'>";
            fetchXml += "<attribute name='cvt_name' alias='recordcount' aggregate='count' />";
            fetchXml += "<filter type='and'>";
            fetchXml += "<condition attribute='cvt_relatedtsaid' operator='eq' uitype='mcs_services' value='" + EntityId + "' />";
            fetchXml += "<condition attribute= 'statecode' operator='in'><value>0</value><value>3</value></condition>";
            fetchXml += "</filter>";
            fetchXml += "</entity>";
            fetchXml += "</fetch>";

            XrmSvcToolkit.fetch({
                fetchXml: fetchXml,
                async: false,
                successCallback: function (result) {
                    countValue = result.entities[0].recordcount;
                    if (countValue < 1) {
                        alert("No Patient Site Resources have been added to this TSA. Patient Site Resources must be added before moving this TSA to Production status.");
                        x = executionObj.getEventArgs().preventDefault();
                        formContext.getAttribute("statuscode").setValue(1);
                    }

                },
                errorCallback: function (error) {
                    throw error;
                }
            });
        }
        var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' aggregate='true'>";
        fetchXml += "<entity name='cvt_providerresourcegroup'>";
        fetchXml += "<attribute name='cvt_name' alias='recordcount' aggregate='count' />";
        fetchXml += "<filter type='and'>";
        fetchXml += "<condition attribute='cvt_relatedtsaid' operator='eq' uitype='mcs_services' value='" + EntityId + "' />";
        fetchXml += "<condition attribute= 'statecode' operator='in'><value>0</value><value>3</value></condition>";
        fetchXml += "</filter>";
        fetchXml += "</entity>";
        fetchXml += "</fetch>";

        XrmSvcToolkit.fetch({
            fetchXml: fetchXml,
            async: false,
            successCallback: function (result) {
                countValue = result.entities[0].recordcount;
                if (countValue < 1) {
                    alert("No Provider Site Resources have been added to this TSA. Provider Site Resources must be added before moving this TSA to Production status.");
                    x = executionObj.getEventArgs().preventDefault();
                    formContext.getAttribute("statuscode").setValue(1);
                }

            },
            errorCallback: function (error) {
                throw error;
            }
        });

        //Now we are going to check for the resourcespecguid on the Pat / Pro Site Resources which is need to build the TSA Service.
        //if CVT to home then bypass the patient resources
        if (formContext.getAttribute("cvt_type").getValue() != true) {
            var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' aggregate='true'>";
            fetchXml += "<entity name='cvt_patientresourcegroup'>";
            fetchXml += "<attribute name='cvt_name' alias='recordcount' aggregate='count' />";
            fetchXml += "<filter type='and'>";
            fetchXml += "<condition attribute='cvt_relatedtsaid' operator='eq' uitype='mcs_services' value='" + EntityId + "' />";
            fetchXml += "<condition attribute= 'statecode' operator='in'><value>0</value><value>3</value></condition>";
            fetchXml += "<condition attribute='cvt_resourcespecguid' operator='null'/>";
            fetchXml += "</filter>";
            fetchXml += "</entity>";
            fetchXml += "</fetch>";

            XrmSvcToolkit.fetch({
                fetchXml: fetchXml,
                async: false,
                successCallback: function (result) {
                    countValue = result.entities[0].recordcount;
                    if (countValue > 0) {
                        alert("Some of the Patient Site Resources added to this TSA are still generating their Service Components. Please wait a few moments and try to Save to Production again");
                        x = executionObj.getEventArgs().preventDefault();
                        formContext.getAttribute("statuscode").setValue(1);
                    }

                },
                errorCallback: function (error) {
                    throw error;
                }
            });
        }
        var fetchXml = "<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false' aggregate='true'>";
        fetchXml += "<entity name='cvt_providerresourcegroup'>";
        fetchXml += "<attribute name='cvt_name' alias='recordcount' aggregate='count' />";
        fetchXml += "<filter type='and'>";
        fetchXml += "<condition attribute='cvt_relatedtsaid' operator='eq' uitype='mcs_services' value='" + EntityId + "' />";
        fetchXml += "<condition attribute= 'statecode' operator='in'><value>0</value><value>3</value></condition>";
        fetchXml += "<condition attribute='cvt_resourcespecguid' operator='null'/>";
        fetchXml += "</filter>";
        fetchXml += "</entity>";
        fetchXml += "</fetch>";

        XrmSvcToolkit.fetch({
            fetchXml: fetchXml,
            async: false,
            successCallback: function (result) {
                countValue = result.entities[0].recordcount;
                if (countValue > 0) {
                    alert("Some of the Provider Site Resources added to this TSA are still generating their Service Components. Please wait a few moments and try to Save to Production again");
                    x = executionObj.getEventArgs().preventDefault();
                    formContext.getAttribute("statuscode").setValue(1);
                }
            },
            errorCallback: function (error) {
                throw error;
            }
        });
    }
};
//If the SDK namespace object is not defined, create it.
if (typeof MCS === "undefined") MCS = {};
// Create Namespace container for functions in this library;
MCS.mcs_TSA_Buttons = {};

//Page Scope Variables
MCS.mcs_TSA_Buttons.EntityName;
MCS.mcs_TSA_Buttons.EntityId;
MCS.mcs_TSA_Buttons.site = [];
MCS.mcs_TSA_Buttons.GroupAppt = false;
MCS.mcs_TSA_Buttons.
async = false;
MCS.mcs_TSA_Buttons.patientsite = [];

//HELPER - Unsupported method of re-creating Multi-select Lookup window in order to Create a different type of record than you are looking up
MCS.mcs_TSA_Buttons.buildshowStandardDialog = function (executionContext, entityName, viewName, side, isGroupAppt) {
    var formContext = executionContext.getFormContext();
    MCS.mcs_TSA_Buttons.gatherParameters();
    var otcCode = MCS.cvt_Common.getObjectTypeCode(entityName);

    if (MCS.mcs_TSA_Buttons.site != null) {
        var customViewId = MCS.mcs_TSA_Buttons.site[0].id;
        var customView;
        var site = "";
        var facility = "";
        var viewLocation = "Site";
        if (side === "Provider") {
            site = MCS.mcs_TSA_Buttons.site;
            //Check for SFT here
            if (formContext.getAttribute("cvt_availabletelehealthmodalities").getValue() === 917290001) {
                if (viewName === "Resources By Site") {
                    //Prevent users from adding Provider Side Resources
                    alert("Per Business Rules, you should enter only a Provider or Provider Group on this SFT TSA.");
                    return;
                }
            }
        }
        else { //Patient
            if (MCS.mcs_TSA_Buttons.GroupAppt === 0) { //Individual
                site = MCS.mcs_TSA_Buttons.patientsite;
                if (site == null) {
                    alert("A TSA must have a designated Patient Site.");
                    return;
                }
            }
            else { //Group, so Facility
                viewLocation = "Facility";
                facility = MCS.mcs_TSA_OnLoad.relatedPatientFacilityId;
                if (facility == null) {
                    alert("A Group TSA must have a designated Patient Facility.");
                    return;
                }

                if (viewName !== "Resource Groups By Site") {
                    //Prevent users from adding Patient Side Resources or Users
                    alert("Per Business Rules, you should enter Patient Side All Required Groups on this Group TSA.");
                    return;
                }
            }
        }

        switch (viewName) {
        case "Users By Site":
            // object located in Lookup.js : function CustomView(id, iRecordTypeId, sName, sFetchXml, sLayoutXml)
            customView = new CustomView(customViewId, otcCode, "Users By " + viewLocation, getUserFetchXml(site, facility), getUserLayout(otcCode));
            break;
        case "Resource Groups By Site":
            if (side === "Patient" && isGroupAppt) customView = new CustomView(customViewId, otcCode, "All Required Resource Groups By " + viewLocation, getResourceGroupFetchXml(site, facility, true), getResourceGroupLayout(otcCode));
            else customView = new CustomView(customViewId, otcCode, "Resource Groups By " + viewLocation, getResourceGroupFetchXml(site, facility, false), getResourceGroupLayout(otcCode));
            break;
        case "Resources By Site":
            customView = new CustomView(customViewId, otcCode, "Resources By " + viewLocation, getResourceFetchXml(site, facility), getResourceLayout(otcCode));
            break;
        }

        // object located in Lookup.js : function LookupArgsClass()
        // use the args object when passing complex objects to the openStdDlg()
        var args = new LookupArgsClass;

        // limit the list of Views to only the custom view
        args.customViews = new Array(customView);

        // located in Global.js: Mscrm.CrmUri.create
        var oUrl = Mscrm.CrmUri.create("/_controls/lookup/lookupinfo.aspx");
        oUrl.get_query()["LookupStyle"] = "multi";
        oUrl.get_query()["browse"] = "0";
        oUrl.get_query()["objecttypes"] = otcCode;

        // set the default view to the custom view created above
        oUrl.get_query()["DefaultViewId"] = customViewId;

        // generic object that contains the height and width
        var oFeatures = {
            width: 600,
            height: 700
        };

        // Fixed for CRM2015
        var lookupItems = new Mscrm.CrmDialog(oUrl, args, oFeatures.width, oFeatures.height);
        return lookupItems;
    }
};

//HELPER - called by showStandard Dialog used to populate the global variables containing data about the TSA (or MTSA)
MCS.mcs_TSA_Buttons.gatherParameters = function () {
    if (typeof(CrmRestKit) === "undefined") CrmRestKit = window.parent.CrmRestKit;
    if (typeof(MCS.cvt_Common) === "undefined") MCS = window.parent.MCS;
    if (typeof(Xrm) === "undefined") Xrm = window.parent.Xrm;

    //Determine if TSA/MTSA, variable names are different
    if (typeof(MCS.mcs_TSA_OnLoad) !== "undefined") {
        //TSA
        MCS.mcs_TSA_Buttons.EntityId = MCS.mcs_TSA_OnLoad.EntityId;
        MCS.mcs_TSA_Buttons.EntityName = MCS.mcs_TSA_OnLoad.EntityName;
        MCS.mcs_TSA_Buttons.GroupAppt = MCS.mcs_TSA_OnLoad.GroupAppt;
        MCS.mcs_TSA_Buttons.site[0] = {
            name: MCS.mcs_TSA_OnLoad.relatedProviderSiteName,
            id: MCS.mcs_TSA_OnLoad.relatedProviderSiteId
        };
        MCS.mcs_TSA_Buttons.patientsite[0] = {
            name: MCS.mcs_TSA_OnLoad.relatedPatientSiteName,
            id: MCS.mcs_TSA_OnLoad.relatedPatientSiteId
        };
        //Patient Facility?
    }
    else {
        //MTSA
        MCS.mcs_TSA_Buttons.EntityId = MCS.cvt_MTSA_OnLoad.EntityId;
        MCS.mcs_TSA_Buttons.EntityName = MCS.cvt_MTSA_OnLoad.EntityName;
        MCS.mcs_TSA_Buttons.GroupAppt = MCS.cvt_MTSA_OnLoad.GroupAppt;
        MCS.mcs_TSA_Buttons.site[0] = {
            name: MCS.cvt_MTSA_OnLoad.relatedProviderSiteName,
            id: MCS.cvt_MTSA_OnLoad.relatedProviderSiteId
        };
    }
};

//HELPER - called by BuildRelationship Runners to refresh the grids, displaying the updated information
MCS.mcs_TSA_Buttons.refreshGrids = function (executionContext, side) {
    var formContext = executionContext.getFormContext();
    var ProvSiteResourcesGrid = formContext.getControl("provgroupsselectall");
    var PatSiteResourcesGrid = formContext.getControl("patgroupsselectall");

    switch (side) {
    case "Provider":
        ProvSiteResourcesGrid.refresh();
        break;
    case "Patient":
        PatSiteResourcesGrid.refresh();
        break;
    }
};

//TSA Only - Called By Ribbon Button - Add Pat Site Resources
MCS.mcs_TSA_Buttons.BuildRelationshipPatResourceBySite = function (selectedControl) {
    MCS.mcs_TSA_Buttons.BuildRelationshipResourceRunner("mcs_resource", "Patient", selectedControl);
};

//TSA Only - Called by Ribbon Button - Add Pat Site Resource Groups
MCS.mcs_TSA_Buttons.BuildRelationshipPatResourceGroupBySite = function (selectedControl) {
    MCS.mcs_TSA_Buttons.BuildRelationshipResourceRunner("mcs_resourcegroup", "Patient", selectedControl);
};

//TSA Only - Called by Ribbon Button - Add Pat Site Users.
MCS.mcs_TSA_Buttons.BuildRelationshipPatTelepresenterBySite = function (selectedControl) {
    MCS.mcs_TSA_Buttons.BuildRelationshipUserRunner("Patient", selectedControl);
};

//Called by Ribbon Buttons - Add Prov Site Resources
MCS.mcs_TSA_Buttons.BuildRelationshipProvResourceBySite = function (selectedControl) {
    MCS.mcs_TSA_Buttons.BuildRelationshipResourceRunner("mcs_resource", "Provider", selectedControl);
};

//Called by Ribbon Buttons - Add Prov Site Resource Groups
MCS.mcs_TSA_Buttons.BuildRelationshipProvResourceGroupBySite = function (selectedControl) {
    MCS.mcs_TSA_Buttons.BuildRelationshipResourceRunner("mcs_resourcegroup", "Provider", selectedControl);
};

//Called by Ribbon Buttons - Add Prov Site Users
MCS.mcs_TSA_Buttons.BuildRelationshipProvProviderBySite = function (selectedControl) {
    MCS.mcs_TSA_Buttons.BuildRelationshipUserRunner("Provider", selectedControl);
};

//HELPER - Add Resource by Site (Patient or Provider AND Resource or Resource Group)
MCS.mcs_TSA_Buttons.BuildRelationshipResourceRunner = function (executionContext, entityName, patientOrProvider, selectedControl) {
    var formContext = executionContext.getFormContext();
    //Fields to make this function robust
    var siteField = 'mcs_RelatedSiteId';
    var isGroup = false;
    var TSAResourceType = 1;
    var title = "Resources";
    var table = "cvt_providerresourcegroup";
    var isGroupAppt = false;

    //Value storing fields
    var resourcename, type, relatedSite, relatedSiteName, resourcespecguid, constraintgroupguid;
    if (patientOrProvider === "Patient") table = "cvt_patientresourcegroup";

    if (entityName === "mcs_resourcegroup") {
        isGroup = true;
        siteField = 'mcs_relatedSiteId';
        TSAResourceType = 0;
        title = "Resource Groups";
        isGroupAppt = formContext.getAttribute("cvt_groupappointment").getValue() ? true : false;
    }
    var lookupItems = MCS.mcs_TSA_Buttons.buildshowStandardDialog(entityName, title + " By Site", patientOrProvider, isGroupAppt);
    lookupItems.setCallbackReference(function (results) {
        if ((results != null) && (results != undefined)) {
            var returnedItems = results;
            if (typeof(results) === "string") returnedItems = JSON.parse(results);
            if (returnedItems != null) {
                for (i = 0; i < returnedItems.items.length; i++) {
                    var ResourceId = returnedItems.items[i].id;
                    var resourcename, type, relatedSite, relatedSiteName, resourcespecguid, constraintgroupguid;
                    Xrm.WebApi.retrieveRecord(entityName, ResourceId, "?$select=mcs_name,mcs_Type, siteField,mcs_resourcespecguid,mcs_constraintgroupguid").then(
                    function success(result) {
                        resourcename = result.mcs_name;
                        type = result.mcs_Type.Value;
                        relatedSite = isGroup ? result.mcs_relatedSiteId : result.mcs_RelatedSiteId;
                        resourcespecguid = result.mcs_resourcespecguid;
                        constraintgroupguid = result.mcs_constraintgroupguid;
                    },
                    function (error) {
                        alert("Failed retrieved" + MCS.cvt_Common.RestError(error));
                    });

                    //CrmRestKit.Retrieve(entityName, ResourceId, ['mcs_name', 'mcs_Type', siteField, 'mcs_resourcespecguid', 'mcs_constraintgroupguid'], MCS.mcs_TSA_Buttons.async)
                    //.fail(function (err) { alert("Failed retrieved" + MCS.cvt_Common.RestError(err)); })
                    //.done(function (data) {
                    //    resourcename = data.d.mcs_name;
                    //    type = data.d.mcs_Type.Value;
                    //    relatedSite = isGroup ? data.d.mcs_relatedSiteId : data.d.mcs_RelatedSiteId;
                    //    resourcespecguid = data.d.mcs_resourcespecguid;
                    //    constraintgroupguid = data.d.mcs_constraintgroupguid;
                    //});
                    var newResource = {
                        'cvt_name': returnedItems.items[i].name,
                        'cvt_TSAResourceType': {
                            __metadata: {
                                type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                            },
                            Value: TSAResourceType
                        },
                        'cvt_relatedsiteid': {
                            __metadata: {
                                type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                            },
                            Id: relatedSite.Id,
                            LogicalName: relatedSite.LogicalName
                        },
                        'cvt_resourcespecguid': resourcespecguid,
                        'cvt_constraintgroupguid': constraintgroupguid
                    };
                    var resID = {
                        __metadata: {
                            type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                        },
                        Id: ResourceId,
                        LogicalName: returnedItems.items[i].typename
                    };
                    if (patientOrProvider === "Patient") newResource.cvt_type = {
                        __metadata: {
                            type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                        },
                        Value: type
                    };
                    else newResource.cvt_Type = {
                        __metadata: {
                            type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                        },
                        Value: type
                    };
                    if (isGroup) newResource.cvt_RelatedResourceGroupid = resID;
                    else newResource.cvt_RelatedResourceId = resID;
                    if (MCS.mcs_TSA_Buttons.EntityName === "mcs_services") newResource.cvt_RelatedTSAid = {
                        __metadata: {
                            type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                        },
                        Id: MCS.mcs_TSA_Buttons.EntityId,
                        LogicalName: MCS.mcs_TSA_Buttons.EntityName
                    };
                    else newResource.cvt_RelatedMasterTSAId = {
                        __metadata: {
                            type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                        },
                        Id: MCS.mcs_TSA_Buttons.EntityId,
                        LogicalName: MCS.mcs_TSA_Buttons.EntityName
                    };

                    Xrm.WebApi.createRecord(table, newResource).then(
                    function success(result) {
                        //Nothing here for now. Moved the Subgrid Refresh outside of loop to only run once all resources are created.
                    },
                    function (error) {
                        if (type === 251920002) {
                            alert(MCS.cvt_Common.RestError(error));
                        }
                        else {
                            alert(MCS.cvt_Common.RestError(error));
                        }
                    });

                    //CrmRestKit.Create(table, newResource, MCS.mcs_TSA_Buttons.async)
                    //.fail(function (err) {
                    //    if (type == 251920002) {
                    //        alert(MCS.cvt_Common.RestError(err));
                    //    }
                    //    else {
                    //        alert(MCS.cvt_Common.RestError(err));
                    //    }
                    //})
                    //.done(function () {
                    //    //Nothing here for now. Moved the Subgrid Refresh outside of loop to only run once all resources are created.
                    //});
                }
                MCS.mcs_TSA_Buttons.refreshGrids(patientOrProvider);
                selectedControl.refresh();
            }
        }
        else return null;
    });
    lookupItems.show();
};

//HELPER - Add User by Site (Patient or Provider)
MCS.mcs_TSA_Buttons.BuildRelationshipUserRunner = function (patientOrProvider, selectedControl) {
    var TSAResourceType = 2;
    var entityName = "cvt_providerresourcegroup";
    if (patientOrProvider === "Patient") {
        TSAResourceType = 3;
        entityName = "cvt_patientresourcegroup";
    }

    var systemUser = {};
    var lookupItems = MCS.mcs_TSA_Buttons.buildshowStandardDialog('systemuser', "Users By Site", patientOrProvider, false);
    lookupItems.setCallbackReference(function (results) {
        if ((results != null) && (results != undefined)) {
            var returnedItems = results;
            if (typeof(results) === "string") returnedItems = JSON.parse(results);
            if (returnedItems != null) {
                for (i = 0; i < returnedItems.items.length; i++) {
                    var TelepresenterId = returnedItems.items[i].id;
                    var relatedSite;
                    Xrm.WebApi.retrieveRecord("SystemUser", TelepresenterId, "?$select=cvt_site").then(
                    function success(result) {
                        relatedSite = result.cvt_site;
                    },
                    function (error) {
                        //console.log(error.message);
                        // handle error conditions
                    });

                    //CrmRestKit.Retrieve('SystemUser', TelepresenterId, ['cvt_site'], MCS.mcs_TSA_Buttons.async)
                    //            .fail(function () {
                    //                //alert("Retrieve Failed")
                    //            })
                    //            .done(function (data) {
                    //                relatedSite = data.d.cvt_site;
                    //            });
                    if (patientOrProvider === "Patient" || MCS.mcs_TSA_Buttons.EntityName === "mcs_services") {
                        systemUser = {
                            'cvt_name': returnedItems.items[i].name,
                            'cvt_TSAResourceType': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                                },
                                Value: TSAResourceType
                            },
                            'cvt_RelatedTSAid': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                },
                                Id: MCS.mcs_TSA_Buttons.EntityId,
                                LogicalName: MCS.mcs_TSA_Buttons.EntityName
                            },
                            'cvt_RelatedUserId': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                },
                                Id: returnedItems.items[i].id,
                                LogicalName: returnedItems.items[i].typename
                            },
                            'cvt_relatedsiteid': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                },
                                Id: relatedSite.Id,
                                LogicalName: relatedSite.LogicalName
                            }
                        };
                    }
                    else {
                        systemUser = {
                            'cvt_name': returnedItems.items[i].name,
                            'cvt_TSAResourceType': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.OptionSetValue"
                                },
                                Value: TSAResourceType
                            },
                            'cvt_RelatedMasterTSAId': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                },
                                Id: MCS.mcs_TSA_Buttons.EntityId,
                                LogicalName: MCS.mcs_TSA_Buttons.EntityName
                            },
                            'cvt_RelatedUserId': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                },
                                Id: returnedItems.items[i].id,
                                LogicalName: returnedItems.items[i].typename
                            },
                            'cvt_relatedsiteid': {
                                __metadata: {
                                    type: "Microsoft.Crm.Sdk.Data.Services.EntityReference"
                                },
                                Id: relatedSite.Id,
                                LogicalName: relatedSite.LogicalName
                            }
                        };
                    }
                    Xrm.WebApi.createRecord(entityName, systemUser).then(
                    function success(result) {},
                    function (error) {});
                    // CrmRestKit.Create(entityName, systemUser, MCS.mcs_TSA_Buttons.async);
                }
                MCS.mcs_TSA_Buttons.refreshGrids(patientOrProvider);
                selectedControl.refresh();
            }
        }
        else return null;
    });
    lookupItems.show();
};

//HELPER - creates the fetchXML to be used in grid views
//The sample Fetch and layout I used above… standard stuff you are already doing
function getResourceFetchXml(site, facility) {

    var columns = ['mcs_resourceid', 'mcs_name', 'createdon'];

    var conditions = ['<condition attribute="statecode" operator="eq" value="0"/>', buildSiteConditions(site, facility, "R")];

    fetchXml = MCS.cvt_Common.CreateFetch('mcs_resource', columns, conditions, ['mcs_name', false]);

    return fetchXml;
};

//HELPER - sets the FetchXML view layout
function getResourceLayout(otc) {
    return '<grid name="resultset" object="' + otc + '" jump="mcs_name" select="1" icon="0" preview="0"><row name="result" id="mcs_resourceid"><cell name="mcs_name" width="300" /><cell name="mcs_relatedsiteid" width="200" /><cell name="mcs_type" width="100" /><cell name="mcs_businessunitid" width="100" /><cell name="ownerid" width="150" /><cell name="modifiedon" width="125" /><cell name="createdon" width="125" /></row></grid>';
};

function getResourceGroupFetchXml(site, facility, isAllReqd) {

    var columns = ['mcs_name', 'mcs_type', 'mcs_relatedsiteid', 'modifiedon', 'createdon', 'mcs_resourcegroupid'];
    var conditions = [];

    if (isAllReqd) {
        conditions = ['<condition attribute="statecode" operator="eq" value="0"/>', '<condition attribute="mcs_type" operator="eq" value="917290000"/>', buildSiteConditions(site, facility, "RG")];
    }
    else {
        conditions = ['<condition attribute="statecode" operator="eq" value="0"/>', buildSiteConditions(site, facility, "RG")];
    }

    fetchXml = MCS.cvt_Common.CreateFetch('mcs_resourcegroup', columns, conditions, ['mcs_name', false]);

    return fetchXml;
};

function getResourceGroupLayout(otc) {
    return '<grid name="resultset" object="' + otc + '" jump="mcs_name" select="1" icon="0" preview="0"><row name="result" id="mcs_resourcegroupid"><cell name="mcs_name" width="300" /><cell name="mcs_relatedsiteid" width="300" /><cell name="mcs_type" width="150" /><cell name="modifiedon" width="125" /><cell name="createdon" width="125" /></row></grid>';
};

function getUserFetchXml(site, facility) {
    fetchXml = '<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false"><entity name="systemuser"><attribute name="fullname"/><attribute name="businessunitid"/><attribute name="cvt_type"/><attribute name="domainname"/><attribute name="jobtitle"/><attribute name="internalemailaddress"/><attribute name="modifiedon"/><attribute name="cvt_site"/><attribute name="cvt_facility"/><attribute name="systemuserid"/><order attribute="fullname" descending="false"/><filter type="and"><condition attribute="isdisabled" operator="eq" value="0"/><condition attribute="accessmode" operator="ne" value="3"/>';
    fetchXml += buildSiteConditions(site, facility, "U");
    fetchXml += '</filter><link-entity name="team" from="teamid" to="cvt_primaryteam" visible="false" link-type="outer" alias="a_8f34fae9459de2118b0978e3b511a629"><attribute name="name"/></link-entity></entity></fetch>';
    return fetchXml;
};

function getUserLayout(otc) {
    return '<grid name="resultset" object="8" jump="fullname" select="1" icon="0" preview="0"><row name="result" id="systemuserid"><cell name="fullname" width="200" /><cell name="jobtitle" width="150" /><cell name="domainname" width="200" /><cell name="internalemailaddress" width="150" /><cell name="cvt_type" width="125" /><cell name="cvt_facility" width="150" /><cell name="cvt_site" width="200" /><cell name="a_8f34fae9459de2118b0978e3b511a629.name" width="150" disableSorting="1" /><cell name="businessunitid" width="150" /><cell name="modifiedon" width="100" /></row></grid>';
};

function buildSiteConditions(site, FacilityId, type) {
    var siteXml = '';
    switch (type) {
    case "U":
        siteXml = '<condition attribute="cvt_site" operator="in">';
        break;
    default:
        siteXml = '<condition attribute="mcs_relatedsiteid" operator="in">';
        break;
    }
    if (site) {
        siteXml += '<value uiname="' + MCS.cvt_Common.formatXML(site[0].mcs_name) + '" uitype="mcs_site">' + site[0].id + '</value>';
    }
    else { //Query for sites based on Facility
        var childSites = [];
        var filter = "statuscode/Value eq 1 and mcs_FacilityId/Id eq (Guid'" + FacilityId + "')";

        Xrm.WebApi.retrieveMultipleRecords("mcs_site", "?$select=mcs_name,mcs_siteId,mcs_FacilityId&$filter=" + filter).then(
        function success(result) {
            for (var i = 0; i < result.entities.length; i++) {
                childSites = result.entities[i];
            }
        },
        function (error) {});
        //calls = CrmRestKit.ByQuery("mcs_site", ['mcs_name', 'mcs_siteId', 'mcs_FacilityId'], filter, false);
        //calls.fail(
        //        function (error) {
        //        })
        //calls.done(function (data) {
        //    if (data && data.d.results && data.d.results.length > 0) {
        //        childSites = data.d.results;
        //    }
        //});
        if (childSites.length > 0) {
            for (record in childSites) {
                siteXml += '<value uiname="' + MCS.cvt_Common.formatXML(childSites[record].mcs_name) + '" uitype="mcs_site">' + childSites[record].mcs_siteId + '</value>';
            }
        }
        else //Facility has no sites
        siteXml += '<value uiname="NoSites" uitype="mcs_site">' + MCS.cvt_Common.BlankGUID + '</value>';
    }
    siteXml += '</condition>';
    return siteXml;
};
if (typeof MCS === "undefined") MCS = {};
if (typeof MCS.TSA_Ribbon === "undefined") MCS.TSA_Ribbon = {};

var process = [[], [], [], []];
var facilities;
var PatFacility;
var ProFacility;

//Ribbon button calls this function to create a new service activity and pass in the fields for: Specialty and sub-type, service, capacity, name, group, modality, and type
MCS.TSA_Ribbon.CreateNewServiceActivity = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var relatedPatientSiteValue = MCS.cvt_Common.checkNull("cvt_relatedpatientsiteid");
    if (relatedPatientSiteValue != null) relatedPatientSiteValue = relatedPatientSiteValue[0];

    var relatedProviderSiteValue = MCS.cvt_Common.checkNull("cvt_relatedprovidersiteid");
    if (relatedProviderSiteValue != null) relatedProviderSiteValue = relatedProviderSiteValue[0];

    var serviceTypeValue = MCS.cvt_Common.checkNull("cvt_servicetype");
    var serviceSubTypeValue = MCS.cvt_Common.checkNull("cvt_servicesubtype");
    var serviceValue = MCS.cvt_Common.checkNull("mcs_relatedserviceid");
    var TSAName = MCS.cvt_Common.checkNull("mcs_name");
    var groupApptOptionValue = MCS.cvt_Common.checkNull("cvt_groupappointment");
    var modalityValue = MCS.cvt_Common.checkNull("cvt_availabletelehealthmodalities");
    var TypeOptionValue = MCS.cvt_Common.checkNull("cvt_type");
    var instructionsValue = MCS.cvt_Common.checkNull("cvt_schedulinginstructions");

    var tsa = {
        id: formContext.data.entity.getId(),
        name: TSAName
    };

    MCS.TSA_Ribbon.openNewServiceAppointment(groupApptOptionValue, relatedProviderSiteValue, tsa, relatedPatientSiteValue, TypeOptionValue, modalityValue, instructionsValue);
};

//Refactored such that it is all happening in 1 function
MCS.TSA_Ribbon.openNewServiceAppointment = function (group, provSite, tsa, patSite, type, modality, instructions) {
    group = group == null ? false : group;
    type = type == null ? false : type;
    SFT = modality == 917290001;
    if (typeof Xrm !== "undefined" && typeof Xrm.Utility !== "undefined") {
        var p = {
            formid: "75ec0e60-421b-4e71-8f5d-d8de7e0aa04e",
            mcs_groupappointment: group,
            mcs_relatedtsa: tsa.id,
            mcs_relatedtsaname: tsa.name,
            cvt_type: type,
            cvt_telehealthmodality: SFT,
            cvt_schedulinginstructions: instructions
        };
        if (provSite != null) {
            p.mcs_relatedprovidersite = provSite.id;
            p.mcs_relatedprovidersitename = provSite.name;
        }
        if (patSite != null) {
            p.mcs_relatedsite = patSite.id;
            p.mcs_relatedsitename = patSite.name;
        }
        Xrm.Navigation.openForm("serviceappointment", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["formid=75ec0e60-421b-4e71-8f5d-d8de7e0aa04e", "mcs_groupappointment=" + group, "mcs_relatedtsa=" + tsa.id, "mcs_relatedtsaname=" + tsa.name, "cvt_type=" + type, "cvt_telehealthmodality=" + SFT, "cvt_schedulinginstructions=" + instructions];
        if (provSite != null) extraqs.concat["mcs_relatedprovidersite=" + provSite.id, "mcs_relatedprovidersitename=" + provSite.name];
        if (patSite != null) extraqs.concat["mcs_relatedsite=" + patSite.id, "mcs_relatedsitename=" + patSite.name];

        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();
        if (url.match(/\/$/)) {
            url = url.substring(0, url.length - 1);
        }

        if (typeof globalContext.getClientUrl !== "undefined") {
            url = globalContext.getClientUrl();
            // if (typeof Xrm.Page.context.getClientUrl != "undefined") {
            //    url = Xrm.Page.context.getClientUrl();
        }
        window.open(url + "/main.aspx?etn=serviceappointment&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//************************BEGIN APPROVAL METHODS HERE****************************//
//
//This function is used to dynamically build out the Approval flow process into an array which correlates the status, the role name, and the teamId sequentially so that one can get the step and all of the corresponding values
MCS.TSA_Ribbon.buildProcess = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var serviceType = formContext.getAttribute("cvt_servicetype").getValue(); //Get Service Line
    if (serviceType == null) {
        alert("Specialty should always be populated");
        return;
    }
    var counter = 0,
    patFacilityData = null,
    proFacilityData = null;
    var provCoSTeam = null,
    provSCTeam = null,
    provCPTeam = null,
    provFTCTeam = null,
    provNotificationTeam = null,
    patCoSTeam = null,
    patSCTeam = null,
    patFTCTeam = null,
    patNotificationTeam = null,
    patCPTeam = null;
    var skipPatient = formContext.getAttribute("cvt_type").getValue() == true || formContext.getAttribute("cvt_servicescope").getValue() == 917290001;
    var skipProvider = formContext.getAttribute("cvt_type").getValue() == true;

    //Draft
    process[0][counter] = 1; //Current Status
    process[1][counter] = "Draft"; //Current Role /Approver
    process[2][counter] = null; //Approval team to reach this stage
    process[3][counter] = null; //workflow to run at this stage
    counter++;

    //Updated Query to Retrieve Team based on Attributes instead of lookups on Facility
    var filter = "(cvt_ServiceType/Id eq (Guid'" + serviceType[0].id + "') or cvt_ServiceType/Id eq null) and cvt_Type ne null and (cvt_Facility/Id eq (Guid'" + ProFacility.Id + "')";
    filter += skipPatient ? ")": " or cvt_Facility/Id eq (Guid'" + PatFacility.Id + "'))";

    Xrm.WebApi.retrieveMultipleRecords("Team", "?$select=TeamId,cvt_Type,cvt_ServiceType,cvt_Facility&$filter=" + filter).then(
    function success(result) {
        for (var counter in result) {
            var item = result[counter];
            if (ProFacility.Id === item.cvt_Facility.Id) { //ProvFacility
                switch (item.cvt_Type.Value) {
                case 917290000:
                    //FTC
                    provFTCTeam = item.TeamId;
                    break;
                case 917290001:
                    //Service Chief - extra check here for Specialty
                    if (item.cvt_ServiceType != null) provSCTeam = item.TeamId;
                    break;
                case 917290002:
                    //Chief of Staff
                    provCoSTeam = item.TeamId;
                    break;
                case 917290004:
                    //Notification Team
                    provNotificationTeam = item.TeamId;
                    break;
                default:
                    break;
                }
            }
            else { //PatFacility
                switch (item.cvt_Type.Value) {
                case 917290000:
                    //FTC
                    patFTCTeam = item.TeamId;
                    break;
                case 917290001:
                    //Service Chief - extra check here for Specialty
                    if (item.cvt_ServiceType != null) {
                        patSCTeam = item.TeamId;
                    }
                    break;
                case 917290002:
                    //Chief of Staff
                    patCoSTeam = item.TeamId;
                    break;
                case 917290004:
                    //Notification Team
                    patNotificationTeam = item.TeamId;
                    break;
                default:
                    break;
                }
            }
        }
    },
    function (error) {
        alert(MCS.cvt_Common.RestError(error));
    });

    //CrmRestKit.ByQueryAll("Team", ['TeamId', 'cvt_Type', 'cvt_ServiceType', 'cvt_Facility'], filter, false)
    //.fail(function(err) {
    //    alert(MCS.cvt_Common.RestError(err));
    //}).done(function(data){
    //    for(var counter in data)
    //    {
    //        var item = data[counter];
    //        if (ProFacility.Id == item.cvt_Facility.Id) { //ProvFacility
    //            switch (item.cvt_Type.Value) {
    //                case 917290000: //FTC
    //                    provFTCTeam = item.TeamId;
    //                    break;
    //                case 917290001: //Service Chief - extra check here for Specialty
    //                    if (item.cvt_ServiceType != null)
    //                        provSCTeam = item.TeamId;
    //                    break;
    //                case 917290002: //Chief of Staff
    //                    provCoSTeam = item.TeamId;
    //                    break;
    //                case 917290004: //Notification Team
    //                    provNotificationTeam = item.TeamId;
    //                    break;
    //                default:
    //                    break;
    //            }
    //        }
    //        else { //PatFacility
    //            switch (item.cvt_Type.Value) {
    //                case 917290000: //FTC
    //                    patFTCTeam = item.TeamId;
    //                    break;
    //                case 917290001: //Service Chief - extra check here for Specialty
    //                    if (item.cvt_ServiceType != null) {
    //                        patSCTeam = item.TeamId;
    //                    }
    //                    break;
    //                case 917290002: //Chief of Staff
    //                    patCoSTeam = item.TeamId;
    //                    break;
    //                case 917290004: //Notification Team
    //                    patNotificationTeam = item.TeamId;
    //                    break;
    //                default:
    //                    break;
    //            }
    //        }
    //    }
    //});
    var missingTeamStart = "The following Teams are missing:";
    var missingTeams = missingTeamStart;
    if (provFTCTeam == null) missingTeams += "\n-Provider FTC Team for " + ProFacility.Name;
    if (!skipProvider) {
        if (provSCTeam == null) missingTeams += "\n-Provider Service Chief Team for " + ProFacility.Name + " " + serviceType[0].name;
        if (provCoSTeam == null) missingTeams += "\n-Provider Chief of Staff Team for " + ProFacility.Name;
    }
    if (!skipPatient) {
        if (patFTCTeam == null) missingTeams += "\n-Patient FTC Team for " + PatFacility.Name;
        if (patSCTeam == null) missingTeams += "\n-Patient Service Chief Team for " + PatFacility.Name + " " + serviceType[0].name;
        if (patCoSTeam == null) missingTeams += "\n-Patient Chief of Staff Team for " + PatFacility.Name;
    }

    if (missingTeams !== missingTeamStart) {
        alert(missingTeams + "\n\nPlease contact your Facility Telehealth Coordinator to get this team set up");
        return false;
    }

    //PatFTC
    if (!skipPatient) {

        process[0][counter] = 917290002;
        process[1][counter] = "Patient Site FTC";
        process[2][counter] = patFTCTeam;
        process[3][counter] = "195750DF-B5DF-4A5B-B3FF-A29C280BC02A";
        counter++;
    }

    //ProFTC
    process[0][counter] = 917290000;
    process[1][counter] = "Provider Site FTC";
    process[2][counter] = provFTCTeam;
    process[3][counter] = "AC75C046-5CE4-4981-BD20-FDD95EEEF641";
    counter++;

    if (!skipProvider) {
        //ProSC
        process[0][counter] = 917290001;
        process[1][counter] = "Provider Site Service Chief";
        process[2][counter] = provSCTeam;
        process[3][counter] = "EB62D141-FA4A-4461-A6CA-E5DA9BE17339";
        counter++;

        //Pro CoS
        process[0][counter] = 917290004;
        process[1][counter] = "Provider Site Chief of Staff";
        process[2][counter] = provCoSTeam;
        process[3][counter] = "BB6BF3C9-41DB-4184-B18F-6A78B8BD2CF9";
        counter++;
    }

    if (!skipPatient) {
        //PatSC
        process[0][counter] = 917290005;
        process[1][counter] = "Patient Site Service Chief";
        process[2][counter] = patSCTeam;
        process[3][counter] = "8423B567-1FAB-461D-ACB6-59CEDDA7012A";
        counter++;

        //Pat CoS
        process[0][counter] = 251920000;
        process[1][counter] = "Patient Site Chief of Staff";
        process[2][counter] = patCoSTeam;
        process[3][counter] = null;
        counter++;
    }
    else {
        process[0][counter - 1] = 251920000;
        process[3][counter - 1] = null;
    }
};

//recursively calls itself until either of 2 conditions are met: 1) the person approving is found on a prior team, which returns true and alerts user, 2) user is not found on any prior teams, so return false
MCS.TSA_Ribbon.checkPriorTeams = function (statuscode) {
    var userSettings = Xrm.Utility.getGlobalContext().userSettings;
    var userId = userSettings.userId;
    var approvalLevel = process[0].indexOf(statuscode);
    if (approvalLevel === 0) return false;

    var previousTeam = MCS.TSA_Ribbon.checkTeamMembership(process[2][approvalLevel], userId);
    if (previousTeam) {
        alert("The " + process[1][approvalLevel] + " Team (your team) has already approved this TSA.  Please see the notes to view the previous approvals.");
        return true;
    }
    else {
        MCS.TSA_Ribbon.checkPriorTeams(process[0][approvalLevel - 1]);
    }
};

//This method accepts parameter for status and it checks that the user who is hitting approve is authorized to do so (based on team membership of specified team, or if that is not populated, then if the user is specified as the correct person - the CoS, SC, FTC, or C&P)
MCS.TSA_Ribbon.checkApprover = function (status) {
    var userSettings = Xrm.Utility.getGlobalContext().userSettings;
    var userId = userSettings.userId;
    var IsApprover = false;
    var step = process[0].indexOf(status);
    IsApprover = MCS.TSA_Ribbon.checkTeamMembership(process[2][step + 1], userId);
    if (!IsApprover) {
        if (!MCS.TSA_Ribbon.checkPriorTeams(status)) {
            var approvalMessage = "Only members of the " + process[1][step + 1] + " Approval Group can perform this approval";
            alert(approvalMessage);
        }
    }
    return IsApprover;
};

//This method accepts parameter for status and it checks that the user who is hitting approve is authorized to do so (based on team membership of specified team, or if that is not populated, then if the user is specified as the correct person - the CoS, SC, FTC, or C&P)
MCS.TSA_Ribbon.checkDeny = function (status) {
    var userSettings = Xrm.Utility.getGlobalContext().userSettings;
    var userId = userSettings.userId;
    var CanDeny = false;
    var step = process[0].indexOf(status);
    CanDeny = MCS.TSA_Ribbon.checkTeamMembership(process[2][step + 1], userId);
    if (!CanDeny) {
        if (!MCS.TSA_Ribbon.checkPriorTeams(status)) {
            var denyMessage = "Only members of the " + process[1][step + 1] + " Approval Group can perform this denial";
            alert(denyMessage);
        }
    }
    return CanDeny;
};

//Populates the patient and provider facilities for use across a number of other functions
//TO-DO skip populating the patient facility or site for VA Video Connect
MCS.TSA_Ribbon.getFacilities = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var provSiteId = formContext.getAttribute("cvt_relatedprovidersiteid").getValue()[0].id;
    var provFacility = MCS.mcs_TSA_OnChange.QueryFacility(provSiteId);
    var group = formContext.getAttribute("cvt_groupappointment").getValue() === 1;

    //Set Global Variable as result of this function
    ProFacility = provFacility;

    //This is the check for if patient facility (or site) is null (depending on group or not), then dont run this function
    if (group && formContext.getAttribute("cvt_patientfacility").getValue() == null || !group && formContext.getAttribute("cvt_relatedpatientsiteid").getValue() == null) return;
    var patFacilityObj = group ? formContext.getAttribute("cvt_patientfacility").getValue()[0] : MCS.mcs_TSA_OnChange.QueryFacility(formContext.getAttribute("cvt_relatedpatientsiteid").getValue()[0].id);

    //Populate facility object whether it is via OData query (requiring Caps) or directly from form (all lowercase) and pass that object through as if it is OData
    var patFacility = {
        Id: patFacilityObj.Id == null ? patFacilityObj.id : patFacilityObj.Id,
        Name: patFacilityObj.Name == null ? patFacilityObj.name : patFacilityObj.Name
    };
    //Populate the patFacility global variable appropriately
    PatFacility = patFacility;
};

//This method Queries via OData to check if the user specified is a member of the team specified.  It returns true if so
MCS.TSA_Ribbon.checkTeamMembership = function (teamid, userId) {
    var teamFound = false;
    if (teamid == null) return false;
    var filter = "SystemUserId eq (Guid' " + userId + "') and TeamId eq (Guid' " + teamid + "')";
    //Query for any team membership records where the team ID equals the team listed and the userId of logged in user matches the TeamMemberShip UserId
    Xrm.WebApi.retrieveMultipleRecords("TeamMembership", "?$select=TeamId&$filter=" + filter).then(
    function success(result) {
        for (var i = 0; i < result.entities.length; i++) {
            teamFound = result.entities.length > 0;
        }
        //console.log("Next page link: " + result.nextLink);
        // perform additional operations on retrieved records
    },
    function (error) {
        //alert("ERROR: " + error);
    });
    //var query = CrmRestKit.ByQuery("TeamMembership", ['TeamId'], filter, false);
    //query.fail(function (err) {
    //    //alert("ERROR: " + err);
    //}).done(function (data) {
    //    if (data && data.d.results)
    //        teamFound = data.d.results.length > 0;
    //});
    return teamFound;
};

//This method is used to begin the TSA approval process (when you hit begin collecting signatures)
MCS.TSA_Ribbon.runPatApprovalWorkflow = function (executionContext) {
    var formContext = executionContext.getFormContext();
    var status = formContext.getAttribute("statuscode");
    if (status.getValue() !== 1) //If the TSA is not in draft, you can't run this "Begin Collecting Signatures"
    return;

    MCS.TSA_Ribbon.runApproveTSA();
};

//This function is called every time the "Approve" Button is hit: it checks for the current status, decides what the next status should be, and calls a check that the user approving has permission to do so
MCS.TSA_Ribbon.runApproveTSA = function (executionContext) {
    var formContext = executionContext.getFormContext();
    MCS.TSA_Ribbon.getFacilities();
    if (MCS.TSA_Ribbon.buildProcess() === false) return;
    var status = formContext.getAttribute("statuscode");

    //Status Listing: 917290002==Approved by Pat FTC, 917290000==Prov FTC, 917290001==Prov SC, 917290004==Prov CoS, 917290005==Pat SC, 917290006==Pending Privileging
    var step = process[0].indexOf(status.getValue());
    if (step === -1) return;

    var action = process[1][step + 1];
    var passedCheck = MCS.TSA_Ribbon.checkApprover(status.getValue());
    var confirmResult;
    if (!passedCheck) return;
    if (typeof process[1][step + 2] === "undefined") confirmResult = confirm("Click OK to Approve this TSA and put it into Production");
    else confirmResult = confirm("Click OK to Approve this TSA and automatically route it to the " + process[1][step + 2] + " Approval Group");
    if (confirmResult) {
        var tsa = new Object();
        //If they confirm they are approving, move the TSA to the next status in the process via OData, also set the field for user feedback
        MCS.TSA_Ribbon.runRibbonWorkflow(process[3][step + 1]);
        tsa.statuscode = {
            Value: process[0][step + 1]
        };
        status.setValue(process[0][step + 1]);
        MCS.TSA_Ribbon.CreateNote("Approved", null, "Approved by " + action);
        Xrm.WebApi.updateRecord("mcs_services", formContext.data.entity.getId(), tsa).then(
        function success() {
            formContext.ui.controls.get("statuscode").setDisabled(true);
        },
        function (error) {
            alert(MCS.cvt_Common.RestError(error));
        });
        //CrmRestKit.Update('mcs_services', Xrm.Page.data.entity.getId(), tsa, true).
        //    fail(function (err) {
        //        alert(MCS.cvt_Common.RestError(err));
        //    }).
        //    done();
        //formContext.ui.controls.get("statuscode").setDisabled(true);
    }
    else alert("This TSA will remain in your queue until you approve or deny it.");
};

MCS.TSA_Ribbon.CreateNote = function (executionContext, action, reason, newStatus) {
    var name = "";
    var formContext = executionContext.getFormContext();
    var userSettings = Xrm.Utility.getGlobalContext().userSettings;
    var userId = userSettings.userId;
    Xrm.WebApi.retrieveRecord("SystemUser", userId, "?$select=FullName").then(
    function success(result) {
        name = result.FullName;
    },
    function (error) {});
    //CrmRestKit.Retrieve("SystemUser", Xrm.Page.context.getUserId(), ['FullName'], false).fail().done(function (data) { name = data.d.FullName; });
    var refTSA = new Object();
    refTSA.LogicalName = "mcs_services";
    refTSA.Id = formContext.data.entity.getId();
    var noteText = "This TSA has been " + action;
    if (reason != null) noteText += " because: " + reason;
    noteText += ". New Status = " + newStatus;
    var note = {
        'Subject': action + " by " + name,
        'ObjectId': refTSA,
        'NoteText': noteText
    };
    Xrm.WebApi.createRecord("Annotation", note).then(
    function success(result) {},
    function (error) {
        alert(error.responseText);
    });
    //CrmRestKit.Create("Annotation", note, true).fail(function (err) { alert(err.responseText); }).done();
};

//TO-DO switch to a dialog instead of "prompt"
//This method is used to Deny the TSA and is called whenever the "Deny" button is hit regardless of current status of TSA
MCS.TSA_Ribbon.DenyTSA = function (executionContext) {
    var formContext = executionContext.getFormContext();
    MCS.TSA_Ribbon.getFacilities();
    var status = formContext.getAttribute("statuscode");
    //Status Listing: 917290002==Approved by Pat FTC, 917290000==Prov FTC, 917290001==Prov SC, 917290004==Prov CoS, 917290005==Pat SC
    if (MCS.TSA_Ribbon.buildProcess() == false) return;

    var CanDeny = MCS.TSA_Ribbon.checkDeny(status.getValue());
    if (CanDeny) {
        var confirmResult = prompt("Enter Denial Reason and Click OK to Deny this TSA");
        if (confirmResult != null) {
            //set status to Denied and create a note
            MCS.TSA_Ribbon.runRibbonWorkflow("cf2bc300-a19f-440d-9055-dc8a9a55e102");
            status.setValue(917290003);
            MCS.TSA_Ribbon.CreateNote("Denied", confirmResult, "Denied");
            formContext.ui.controls.get("statuscode").setDisabled(true);
        }
        else {
            alert("This TSA will remain in your queue until you approve or deny it.");
        }
    }
};

//To move to Common
MCS.TSA_Ribbon.runRibbonWorkflow = function (workflowId) {
    var userSettings = Xrm.Utility.getGlobalContext().userSettings;
    var userId = userSettings.userId;
    //To move to Common
    MCS.GlobalFunctions.runWorkflow(userId, workflowId, MCS.GlobalFunctions.runWorkflowResponse);
};
//If the SDK namespace object is not defined, create it.
if (typeof(MCS) === "undefined") {
    MCS = {};
}
// Create Namespace container for functions in this library;
MCS.mcs_Provider_Resource = {};

//Namespace Variables
MCS.mcs_Provider_Resource.relatedProviderSiteId;
MCS.mcs_Provider_Resource.relatedProviderSiteName;
MCS.mcs_Provider_Resource.EntityId;
MCS.mcs_Provider_Resource.EntityName;
MCS.mcs_Provider_Resource.TSAName;
MCS.mcs_Provider_Resource.MTSAName;

//Opens a window for a new Resource Group record using the Information form.
//Example: openNewmcs_resourcegroup("{undefined}","",true,true,"");
MCS.mcs_Provider_Resource.openNewmcs_resourcegroup = function (mcs_relatedsiteid, mcs_relatedsiteidname, mcs_createproviderrg, mcs_createpatientrg) { //, mcs_tsaguid, cvt_mastertsaguid) {
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {
        var p = {};
        p.mcs_relatedsiteid = mcs_relatedsiteid;
        p.mcs_relatedsiteidname = mcs_relatedsiteidname;
        p.mcs_createproviderrg = mcs_createproviderrg;
        p.mcs_createpatientrg = mcs_createpatientrg;
        // p.mcs_tsaguid = mcs_tsaguid;
        // p.cvt_mastertsaguid = cvt_mastertsaguid;
        Xrm.Navigation.openForm("mcs_resourcegroup", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["mcs_relatedsiteid=" + mcs_relatedsiteid, "mcs_relatedsiteidname=" + mcs_relatedsiteidname, "mcs_createproviderrg=" + mcs_createproviderrg, "mcs_createpatientrg=" + mcs_createpatientrg]
        //"mcs_tsaguid=" + mcs_tsaguid,
        //"cvt_mastertsaguid=" + cvt_mastertsaguid]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();
        window.open(url + "/main.aspx?etn=mcs_resourcegroup&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Opens a window for a new Resource record using the Information form.
//Example: openNewmcs_resource("{undefined}","","",true,true);
MCS.mcs_Provider_Resource.openNewmcs_resource = function (mcs_relatedsiteid, mcs_relatedsiteidname, mcs_tsaguid, cvt_mastertsaguid, mcs_createpatientr, mcs_createproviderr) {
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {
        var p = {};
        p.mcs_relatedsiteid = mcs_relatedsiteid;
        p.mcs_relatedsiteidname = mcs_relatedsiteidname;
        p.mcs_createpatientr = mcs_createpatientr;
        p.mcs_createproviderr = mcs_createproviderr;
        //p.mcs_tsaguid = mcs_tsaguid;
        //p.cvt_mastertsaguid = cvt_mastertsaguid;
        Xrm.Navigation.openForm("mcs_resource", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["mcs_relatedsiteid=" + mcs_relatedsiteid, "mcs_relatedsiteidname=" + mcs_relatedsiteidname, "mcs_createpatientr=" + mcs_createpatientr, "mcs_createproviderr=" + mcs_createproviderr]
        //"mcs_tsaguid=" + mcs_tsaguid,
        //"cvt_mastertsaguid=" + cvt_mastertsaguid]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();
        window.open(url + "/main.aspx?etn=mcs_resource&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Opens a window for a new Provider Resource record using the Information form.
//Example: openNewcvt_providerresourcegroup("{undefined}","","{undefined}","","{undefined}","",0);
MCS.mcs_Provider_Resource.openNewcvt_providerresourcegroup = function (cvt_relatedsiteid, cvt_relatedsiteidname, cvt_relatedmastertsaid, cvt_relatedmastertsaidname, cvt_relatedtsaid, cvt_relatedtsaidname, cvt_capacityrequired) {
    if (typeof(MCS.mcs_TSA_OnLoad) !== "undefined") EntityName = MCS.mcs_TSA_OnLoad.EntityName;
    else if (typeof(MCS.cvt_MTSA_OnLoad) !== "undefined") EntityName = MCS.cvt_MTSA_OnLoad.EntityName;
    else if (typeof(window.parent.MCS) !== "undefined") {
        if (typeof(window.parent.MCS.mcs_TSA_OnLoad) !== "undefined") EntityName = window.parent.MCS.mcs_TSA_OnLoad.EntityName;
        else if (typeof(window.parent.MCS.cvt_MTSA_OnLoad) !== "undefined") EntityName = window.parent.MCS.cvt_MTSA_OnLoad.EntityName;
    }
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {
        //Checking which entity this is running on to determine the parameters to pass through.
        var p = {};
        p.cvt_relatedsiteid = cvt_relatedsiteid;
        p.cvt_relatedsiteidname = cvt_relatedsiteidname;
        /*  Master TSA deprecated
		if (EntityName == "cvt_mastertsa") {
			p.cvt_relatedmastertsaid = cvt_relatedmastertsaid;
			p.cvt_relatedmastertsaidname = cvt_relatedmastertsaidname;
		}*/
        /* TSA Deprecated
		if (EntityName == "mcs_services") {
			p.cvt_relatedtsaid = cvt_relatedtsaid;
			p.cvt_relatedtsaidname = cvt_relatedtsaidname;
		}
		*/
        p.cvt_capacityrequired = cvt_capacityrequired;
        Xrm.Navigation.openForm("cvt_providerresourcegroup", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";

        var extraqs = [];
        /* MTSA & TSA Deprecated
		if (EntityName == "cvt_mastertsa") {
			extraqs = ["cvt_relatedsiteid=" + cvt_relatedsiteid,
			"cvt_relatedsiteidname=" + cvt_relatedsiteidname,
			"cvt_relatedmastertsaid=" + cvt_relatedmastertsaid,
			"cvt_relatedmastertsaidname=" + cvt_relatedmastertsaidname,
			"cvt_capacityrequired=" + cvt_capacityrequired];
		}
		if (EntityName == "mcs_services") {
			extraqs = ["cvt_relatedsiteid=" + cvt_relatedsiteid,
			"cvt_relatedsiteidname=" + cvt_relatedsiteidname,
			"cvt_relatedtsaid=" + cvt_relatedtsaid,
			"cvt_relatedtsaidname=" + cvt_relatedtsaidname,
			"cvt_capacityrequired=" + cvt_capacityrequired];
		}
		*/
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();
        window.open(url + "/main.aspx?etn=cvt_providerresourcegroup&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Same button, 2 places.  Depending on the place we want to pass the ID differently
MCS.mcs_Provider_Resource.QuickCreateProviderResourceGroup = function () {
    MCS.mcs_Provider_Resource.gatherParameters();
    //TSA
    if (MCS.mcs_Provider_Resource.EntityName === "mcs_services") MCS.mcs_Provider_Resource.openNewmcs_resourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, true, false, MCS.mcs_Provider_Resource.EntityId, null);

    //MTSA
    else MCS.mcs_Provider_Resource.openNewmcs_resourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, true, false, null, MCS.mcs_Provider_Resource.EntityId);
};

//Same button, 2 places.  Depending on the place we want to pass the ID differently
MCS.mcs_Provider_Resource.QuickCreateProviderResource = function () {
    MCS.mcs_Provider_Resource.gatherParameters();
    //TSA
    if (MCS.mcs_Provider_Resource.EntityName === "mcs_services") MCS.mcs_Provider_Resource.openNewmcs_resource(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, MCS.mcs_Provider_Resource.EntityId, null, false, true);
    //MTSA
    else MCS.mcs_Provider_Resource.openNewmcs_resource(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, null, MCS.mcs_Provider_Resource.EntityId, false, true);
};

//Same button, 2 places.  Depending on the place we want to pass the ID differently
MCS.mcs_Provider_Resource.AddProviderResource = function () {
    MCS.mcs_Provider_Resource.gatherParameters();
    //TSA
    if (MCS.mcs_Provider_Resource.EntityName === "mcs_services") MCS.mcs_Provider_Resource.openNewcvt_providerresourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, null, null, MCS.mcs_Provider_Resource.EntityId, MCS.mcs_Provider_Resource.TSAName, 1);

    else MCS.mcs_Provider_Resource.openNewcvt_providerresourcegroup(MCS.mcs_Provider_Resource.relatedProviderSiteId, MCS.mcs_Provider_Resource.relatedProviderSiteName, MCS.mcs_Provider_Resource.EntityId, MCS.mcs_Provider_Resource.MTSAName, null, null, 1);
};

MCS.mcs_Provider_Resource.gatherParameters = function () {
    //Set the right depth to get the variables
    if (typeof(MCS.cvt_Common) === "undefined") MCS = window.parent.MCS;
    //Determine if TSA/MTSA, variable names are different
    if (typeof(MCS.mcs_TSA_OnLoad) !== "undefined") {
        //TSA
        MCS.mcs_Provider_Resource.relatedProviderSiteId = MCS.mcs_TSA_OnLoad.relatedProviderSiteId;
        MCS.mcs_Provider_Resource.relatedProviderSiteName = MCS.mcs_TSA_OnLoad.relatedProviderSiteName;
        MCS.mcs_Provider_Resource.EntityId = MCS.mcs_TSA_OnLoad.EntityId;
        MCS.mcs_Provider_Resource.EntityName = MCS.mcs_TSA_OnLoad.EntityName;
        MCS.mcs_Provider_Resource.TSAName = MCS.mcs_TSA_OnLoad.TSAName;
    }
    else { //MTSA
        MCS.mcs_Provider_Resource.relatedProviderSiteId = MCS.cvt_MTSA_OnLoad.relatedProviderSiteId;
        MCS.mcs_Provider_Resource.relatedProviderSiteName = MCS.cvt_MTSA_OnLoad.relatedProviderSiteName;
        MCS.mcs_Provider_Resource.EntityId = MCS.cvt_MTSA_OnLoad.EntityId;
        MCS.mcs_Provider_Resource.EntityName = MCS.cvt_MTSA_OnLoad.EntityName;
        MCS.mcs_Provider_Resource.MTSAName = MCS.cvt_MTSA_OnLoad.MTSAName;
    }
};
//If the SDK namespace object is not defined, create it.
if (typeof(MCS) === "undefined") {
    MCS = {};
}
// Create Namespace container for functions in this library;
MCS.mcs_Patient_Resource = {};

//Namespace Variables
MCS.mcs_Patient_Resource.relatedPatientSiteId;
MCS.mcs_Patient_Resource.relatedPatientSiteName;
MCS.mcs_Patient_Resource.EntityId;
MCS.mcs_Patient_Resource.TSAName;
MCS.mcs_Patient_Resource.GroupAppt;

//Opens a window for a new Resource Group record using the Information form.
//Example: openNewmcs_resourcegroup("{undefined}","",true,true,"");
MCS.mcs_Patient_Resource.openNewmcs_resourcegroup = function (mcs_relatedsiteid, mcs_relatedsiteidname, mcs_createproviderrg, mcs_createpatientrg, mcs_tsaguid) {
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {
        var p = {};
        p.mcs_relatedsiteid = mcs_relatedsiteid;
        p.mcs_relatedsiteidname = mcs_relatedsiteidname;
        p.mcs_createproviderrg = mcs_createproviderrg;
        p.mcs_createpatientrg = mcs_createpatientrg;
        p.mcs_tsaguid = mcs_tsaguid;
        Xrm.Navigation.openForm("mcs_resourcegroup", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["mcs_relatedsiteid=" + mcs_relatedsiteid, "mcs_relatedsiteidname=" + mcs_relatedsiteidname, "mcs_createproviderrg=" + mcs_createproviderrg, "mcs_createpatientrg=" + mcs_createpatientrg, "mcs_tsaguid=" + mcs_tsaguid]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();
        window.open(url + "/main.aspx?etn=mcs_resourcegroup&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Opens a window for a new Resource record using the Information form.
//Example: openNewmcs_resource("{undefined}","","",true,true);
MCS.mcs_Patient_Resource.openNewmcs_resource = function (mcs_relatedsiteid, mcs_relatedsiteidname, mcs_tsaguid, mcs_createpatientr, mcs_createproviderr) {
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {
        var p = {};
        p.mcs_relatedsiteid = mcs_relatedsiteid;
        p.mcs_relatedsiteidname = mcs_relatedsiteidname;
        p.mcs_tsaguid = mcs_tsaguid;
        p.mcs_createpatientr = mcs_createpatientr;
        p.mcs_createproviderr = mcs_createproviderr;
        Xrm.Navigation.openForm("mcs_resource", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["mcs_relatedsiteid=" + mcs_relatedsiteid, "mcs_relatedsiteidname=" + mcs_relatedsiteidname, "mcs_tsaguid=" + mcs_tsaguid, "mcs_createpatientr=" + mcs_createpatientr, "mcs_createproviderr=" + mcs_createproviderr]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        // var url = Xrm.Page.context.getClientUrl();
        window.open(url + "/main.aspx?etn=mcs_resource&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Opens a window for a new Patient Resource record using the Information form.
MCS.mcs_Patient_Resource.openNewcvt_patientresourcegroupTSA = function (cvt_relatedsiteid, cvt_relatedsiteidname, cvt_capacityrequired, cvt_relatedtsaid, cvt_relatedtsaidname) {
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {
        var p = {};

        p.cvt_relatedsiteid = cvt_relatedsiteid;
        p.cvt_relatedsiteidname = cvt_relatedsiteidname;
        p.cvt_capacityrequired = cvt_capacityrequired;
        p.cvt_relatedtsaid = cvt_relatedtsaid;
        p.cvt_relatedtsaidname = cvt_relatedtsaidname;
        Xrm.Navigation.openForm("cvt_patientresourcegroup", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["cvt_relatedsiteid=" + cvt_relatedsiteid, "cvt_relatedsiteidname=" + cvt_relatedsiteidname, "cvt_capacityrequired=" + cvt_capacityrequired, "cvt_relatedtsaid=" + cvt_relatedtsaid, "cvt_relatedtsaidname=" + cvt_relatedtsaidname]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();
        window.open(url + "/main.aspx?etn=cvt_patientresourcegroup&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

//Opens a window for a new Patient Site Resource record using the Information form.
MCS.mcs_Patient_Resource.openNewcvt_patientresourcegroupGroupAppt = function (cvt_capacityrequired, cvt_relatedtsaid, cvt_relatedtsaidname) {
    if ((typeof Xrm !== "undefined") && (typeof Xrm.Utility !== "undefined")) {
        var p = {};
        p.formid = "fdb4a4ff-ba87-49d4-8f8e-1d457cd2e278"
        p.cvt_capacityrequired = cvt_capacityrequired;
        p.cvt_relatedtsaid = cvt_relatedtsaid;
        p.cvt_relatedtsaidname = cvt_relatedtsaidname;
        Xrm.Navigation.openForm("cvt_patientresourcegroup", null, p);
    }
    else {
        var features = "location=no,menubar=no,status=no,toolbar=no,resizable=yes";
        var extraqs = ["formid=fdb4a4ff-ba87-49d4-8f8e-1d457cd2e278", "cvt_capacityrequired=" + cvt_capacityrequired, "cvt_relatedtsaid=" + cvt_relatedtsaid, "cvt_relatedtsaidname=" + cvt_relatedtsaidname]
        var globalContext = Xrm.Utility.getGlobalContext();
        var url = globalContext.getClientUrl();
        //var url = Xrm.Page.context.getClientUrl();
        window.open(url + "/main.aspx?etn=cvt_patientresourcegroup&pagetype=entityrecord&extraqs=" + encodeURIComponent(extraqs.join("&")), "_blank", features, false);
    }
};

MCS.mcs_Patient_Resource.QuickCreatePatientResource = function () {
    MCS.mcs_Patient_Resource.gatherParameters();
    MCS.mcs_Patient_Resource.openNewmcs_resource(MCS.mcs_Patient_Resource.relatedPatientSiteId, MCS.mcs_Patient_Resource.relatedPatientSiteName, MCS.mcs_Patient_Resource.EntityId, true, false);
};

MCS.mcs_Patient_Resource.QuickCreatePatientResourceGroup = function () {
    MCS.mcs_Patient_Resource.gatherParameters();
    MCS.mcs_Patient_Resource.openNewmcs_resourcegroup(MCS.mcs_Patient_Resource.relatedPatientSiteId, MCS.mcs_Patient_Resource.relatedPatientSiteName, false, true, MCS.mcs_Patient_Resource.EntityId);
};

MCS.mcs_Patient_Resource.AddPatientResource = function () {
    MCS.mcs_Patient_Resource.gatherParameters();
    if (MCS.mcs_Patient_Resource.GroupAppt === 0) MCS.mcs_Patient_Resource.openNewcvt_patientresourcegroupTSA(MCS.mcs_Patient_Resource.relatedPatientSiteId, MCS.mcs_Patient_Resource.relatedPatientSiteName, 1, MCS.mcs_Patient_Resource.EntityId, MCS.mcs_Patient_Resource.TSAName);
    else MCS.mcs_Patient_Resource.openNewcvt_patientresourcegroupGroupAppt(1, MCS.mcs_Patient_Resource.EntityId, MCS.mcs_Patient_Resource.TSAName);
};

MCS.mcs_Patient_Resource.gatherParameters = function () {
    //Set the right depth to get the variables
    if (typeof(MCS.cvt_Common) === "undefined") MCS = window.parent.MCS;

    MCS.mcs_Patient_Resource.relatedPatientSiteId = MCS.mcs_TSA_OnLoad.relatedPatientSiteId;
    MCS.mcs_Patient_Resource.relatedPatientSiteName = MCS.mcs_TSA_OnLoad.relatedPatientSiteName;
    MCS.mcs_Patient_Resource.EntityId = MCS.mcs_TSA_OnLoad.EntityId;
    MCS.mcs_Patient_Resource.TSAName = MCS.mcs_TSA_OnLoad.TSAName;
    MCS.mcs_Patient_Resource.GroupAppt = MCS.mcs_TSA_OnLoad.GroupAppt;
};