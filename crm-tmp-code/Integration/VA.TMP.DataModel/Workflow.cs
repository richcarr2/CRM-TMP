//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using VA.TMP.OptionSets;

namespace VA.TMP.DataModel
{
    /// <summary>
    /// Set of logical rules that define the steps necessary to automate a specific business process, task, or set of actions to be performed.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute()]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflow")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.71")]
    public partial class Workflow : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        /// <summary>
        /// Default Constructor.
        /// </summary>
        public Workflow(): base(EntityLogicalName)
        {
        }

        public const string EntityLogicalName = "workflow";
        public const string EntityLogicalCollectionName = "workflows";
        public const string EntitySetName = "workflows";
        public const int EntityTypeCode = 4703;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }

        private void OnPropertyChanging(string propertyName)
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Unique identifier of the latest activation record for the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activeworkflowid")]
        public Microsoft.Xrm.Sdk.EntityReference ActiveWorkflowId
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("activeworkflowid");
            }
        }

        /// <summary>
        /// Indicates whether the asynchronous system job is automatically deleted on completion.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("asyncautodelete")]
        public System.Nullable<bool> AsyncAutoDelete
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("asyncautodelete");
            }

            set
            {
                this.OnPropertyChanging("AsyncAutoDelete");
                this.SetAttributeValue("asyncautodelete", value);
                this.OnPropertyChanged("AsyncAutoDelete");
            }
        }

        /// <summary>
        /// Business Process Type.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("businessprocesstype")]
        public System.Nullable<workflow_businessprocesstype> BusinessProcessType
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("businessprocesstype");
                if ((optionSet != null))
                {
                    return ((workflow_businessprocesstype)(System.Enum.ToObject(typeof(workflow_businessprocesstype), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("BusinessProcessType");
                if ((value == null))
                {
                    this.SetAttributeValue("businessprocesstype", null);
                }
                else
                {
                    this.SetAttributeValue("businessprocesstype", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("BusinessProcessType");
            }
        }

        /// <summary>
        /// Category of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("category")]
        public System.Nullable<workflow_category> Category
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("category");
                if ((optionSet != null))
                {
                    return ((workflow_category)(System.Enum.ToObject(typeof(workflow_category), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("Category");
                if ((value == null))
                {
                    this.SetAttributeValue("category", null);
                }
                else
                {
                    this.SetAttributeValue("category", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("Category");
            }
        }

        /// <summary>
        /// Business logic converted into client data
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("clientdata")]
        public string ClientData
        {
            get
            {
                return this.GetAttributeValue<string>("clientdata");
            }

            set
            {
                this.OnPropertyChanging("ClientData");
                this.SetAttributeValue("clientdata", value);
                this.OnPropertyChanged("ClientData");
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("componentstate")]
        public System.Nullable<componentstate> ComponentState
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("componentstate");
                if ((optionSet != null))
                {
                    return ((componentstate)(System.Enum.ToObject(typeof(componentstate), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }
        }

        /// <summary>
        /// Connection References related to this workflow.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("connectionreferences")]
        public string ConnectionReferences
        {
            get
            {
                return this.GetAttributeValue<string>("connectionreferences");
            }

            set
            {
                this.OnPropertyChanging("ConnectionReferences");
                this.SetAttributeValue("connectionreferences", value);
                this.OnPropertyChanged("ConnectionReferences");
            }
        }

        /// <summary>
        /// Unique identifier of the user who created the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
        public Microsoft.Xrm.Sdk.EntityReference CreatedBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
            }
        }

        /// <summary>
        /// Date and time when the process was created.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
        public System.Nullable<System.DateTime> CreatedOn
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
            }
        }

        /// <summary>
        /// Unique identifier of the delegate user who created the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
        public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// Stage of the process when triggered on Create.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createstage")]
        public System.Nullable<workflow_stage> CreateStage
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("createstage");
                if ((optionSet != null))
                {
                    return ((workflow_stage)(System.Enum.ToObject(typeof(workflow_stage), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("CreateStage");
                if ((value == null))
                {
                    this.SetAttributeValue("createstage", null);
                }
                else
                {
                    this.SetAttributeValue("createstage", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("CreateStage");
            }
        }

        /// <summary>
        /// Definition of the business logic of this workflow instance.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("definition")]
        public string Definition
        {
            get
            {
                return this.GetAttributeValue<string>("definition");
            }

            set
            {
                this.OnPropertyChanging("Definition");
                this.SetAttributeValue("definition", value);
                this.OnPropertyChanged("Definition");
            }
        }

        /// <summary>
        /// Stage of the process when triggered on Delete.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("deletestage")]
        public System.Nullable<workflow_stage> DeleteStage
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("deletestage");
                if ((optionSet != null))
                {
                    return ((workflow_stage)(System.Enum.ToObject(typeof(workflow_stage), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("DeleteStage");
                if ((value == null))
                {
                    this.SetAttributeValue("deletestage", null);
                }
                else
                {
                    this.SetAttributeValue("deletestage", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("DeleteStage");
            }
        }

        /// <summary>
        /// Soft dependencies of this workflow instance.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("dependencies")]
        public string Dependencies
        {
            get
            {
                return this.GetAttributeValue<string>("dependencies");
            }

            set
            {
                this.OnPropertyChanging("Dependencies");
                this.SetAttributeValue("dependencies", value);
                this.OnPropertyChanged("Dependencies");
            }
        }

        /// <summary>
        /// Description of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("description")]
        public string Description
        {
            get
            {
                return this.GetAttributeValue<string>("description");
            }

            set
            {
                this.OnPropertyChanging("Description");
                this.SetAttributeValue("description", value);
                this.OnPropertyChanged("Description");
            }
        }

        /// <summary>
        /// Shows the default image for the record.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage")]
        public byte[] EntityImage
        {
            get
            {
                return this.GetAttributeValue<byte[]>("entityimage");
            }

            set
            {
                this.OnPropertyChanging("EntityImage");
                this.SetAttributeValue("entityimage", value);
                this.OnPropertyChanged("EntityImage");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage_timestamp")]
        public System.Nullable<long> EntityImage_Timestamp
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>("entityimage_timestamp");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage_url")]
        public string EntityImage_URL
        {
            get
            {
                return this.GetAttributeValue<string>("entityimage_url");
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimageid")]
        public System.Nullable<System.Guid> EntityImageId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("entityimageid");
            }
        }

        /// <summary>
        /// Unique identifier of the associated form.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("formid")]
        public System.Nullable<System.Guid> FormId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("formid");
            }

            set
            {
                this.OnPropertyChanging("FormId");
                this.SetAttributeValue("formid", value);
                this.OnPropertyChanged("FormId");
            }
        }

        /// <summary>
        /// Input parameters to the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("inputparameters")]
        public string InputParameters
        {
            get
            {
                return this.GetAttributeValue<string>("inputparameters");
            }

            set
            {
                this.OnPropertyChanging("InputParameters");
                this.SetAttributeValue("inputparameters", value);
                this.OnPropertyChanged("InputParameters");
            }
        }

        /// <summary>
        /// Inputs definition for this workflow.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("inputs")]
        public string Inputs
        {
            get
            {
                return this.GetAttributeValue<string>("inputs");
            }

            set
            {
                this.OnPropertyChanging("Inputs");
                this.SetAttributeValue("inputs", value);
                this.OnPropertyChanged("Inputs");
            }
        }

        /// <summary>
        /// Version in which the form is introduced.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("introducedversion")]
        public string IntroducedVersion
        {
            get
            {
                return this.GetAttributeValue<string>("introducedversion");
            }

            set
            {
                this.OnPropertyChanging("IntroducedVersion");
                this.SetAttributeValue("introducedversion", value);
                this.OnPropertyChanged("IntroducedVersion");
            }
        }

        /// <summary>
        /// Indicates whether the process was created using the Microsoft Dynamics 365 Web application.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscrmuiworkflow")]
        public System.Nullable<bool> IsCrmUIWorkflow
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("iscrmuiworkflow");
            }
        }

        /// <summary>
        /// Information that specifies whether this component can be customized.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomizable")]
        public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomizable");
            }

            set
            {
                this.OnPropertyChanging("IsCustomizable");
                this.SetAttributeValue("iscustomizable", value);
                this.OnPropertyChanged("IsCustomizable");
            }
        }

        /// <summary>
        /// Defines whether other publishers can attach custom processing steps to this action
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("iscustomprocessingstepallowedforotherpublishers")]
        public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomProcessingStepAllowedForOtherPublishers
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>("iscustomprocessingstepallowedforotherpublishers");
            }

            set
            {
                this.OnPropertyChanging("IsCustomProcessingStepAllowedForOtherPublishers");
                this.SetAttributeValue("iscustomprocessingstepallowedforotherpublishers", value);
                this.OnPropertyChanged("IsCustomProcessingStepAllowedForOtherPublishers");
            }
        }

        /// <summary>
        /// Indicates whether the solution component is part of a managed solution.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ismanaged")]
        public System.Nullable<bool> IsManaged
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("ismanaged");
            }
        }

        /// <summary>
        /// Whether or not the steps in the process are executed in a single transaction.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("istransacted")]
        public System.Nullable<bool> IsTransacted
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("istransacted");
            }

            set
            {
                this.OnPropertyChanging("IsTransacted");
                this.SetAttributeValue("istransacted", value);
                this.OnPropertyChanged("IsTransacted");
            }
        }

        /// <summary>
        /// Language of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("languagecode")]
        public System.Nullable<int> LanguageCode
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("languagecode");
            }

            set
            {
                this.OnPropertyChanging("LanguageCode");
                this.SetAttributeValue("languagecode", value);
                this.OnPropertyChanged("LanguageCode");
            }
        }

        /// <summary>
        /// Additional metadata for this workflow.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("metadata")]
        public string Metadata
        {
            get
            {
                return this.GetAttributeValue<string>("metadata");
            }

            set
            {
                this.OnPropertyChanging("Metadata");
                this.SetAttributeValue("metadata", value);
                this.OnPropertyChanged("Metadata");
            }
        }

        /// <summary>
        /// Shows the mode of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("mode")]
        public System.Nullable<workflow_mode> Mode
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("mode");
                if ((optionSet != null))
                {
                    return ((workflow_mode)(System.Enum.ToObject(typeof(workflow_mode), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("Mode");
                if ((value == null))
                {
                    this.SetAttributeValue("mode", null);
                }
                else
                {
                    this.SetAttributeValue("mode", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("Mode");
            }
        }

        /// <summary>
        /// Unique identifier of the user who last modified the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// Date and time when the process was last modified.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
        public System.Nullable<System.DateTime> ModifiedOn
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
            }
        }

        /// <summary>
        /// Unique identifier of the delegate user who last modified the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// Name of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("name")]
        public string Name
        {
            get
            {
                return this.GetAttributeValue<string>("name");
            }

            set
            {
                this.OnPropertyChanging("Name");
                this.SetAttributeValue("name", value);
                this.OnPropertyChanged("Name");
            }
        }

        /// <summary>
        /// Indicates whether the process is able to run as an on-demand process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ondemand")]
        public System.Nullable<bool> OnDemand
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("ondemand");
            }

            set
            {
                this.OnPropertyChanging("OnDemand");
                this.SetAttributeValue("ondemand", value);
                this.OnPropertyChanged("OnDemand");
            }
        }

        /// <summary>
        /// Outputs definition for this workflow.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("outputs")]
        public string Outputs
        {
            get
            {
                return this.GetAttributeValue<string>("outputs");
            }

            set
            {
                this.OnPropertyChanging("Outputs");
                this.SetAttributeValue("outputs", value);
                this.OnPropertyChanged("Outputs");
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overwritetime")]
        public System.Nullable<System.DateTime> OverwriteTime
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>("overwritetime");
            }
        }

        /// <summary>
        /// Unique identifier of the user or team who owns the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("ownerid")]
        public Microsoft.Xrm.Sdk.EntityReference OwnerId
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("ownerid");
            }

            set
            {
                this.OnPropertyChanging("OwnerId");
                this.SetAttributeValue("ownerid", value);
                this.OnPropertyChanged("OwnerId");
            }
        }

        /// <summary>
        /// Unique identifier of the business unit that owns the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
        public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningbusinessunit");
            }
        }

        /// <summary>
        /// Unique identifier of the team who owns the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
        public Microsoft.Xrm.Sdk.EntityReference OwningTeam
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owningteam");
            }
        }

        /// <summary>
        /// Unique identifier of the user who owns the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
        public Microsoft.Xrm.Sdk.EntityReference OwningUser
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("owninguser");
            }
        }

        /// <summary>
        /// Unique identifier of the definition for process activation.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentworkflowid")]
        public Microsoft.Xrm.Sdk.EntityReference ParentWorkflowId
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("parentworkflowid");
            }
        }

        /// <summary>
        /// Unique identifier of the plug-in type.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("plugintypeid")]
        public Microsoft.Xrm.Sdk.EntityReference PluginTypeId
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("plugintypeid");
            }
        }

        /// <summary>
        /// Primary entity for the process. The process can be associated for one or more SDK operations defined on the primary entity.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("primaryentity")]
        public string PrimaryEntity
        {
            get
            {
                return this.GetAttributeValue<string>("primaryentity");
            }

            set
            {
                this.OnPropertyChanging("PrimaryEntity");
                this.SetAttributeValue("primaryentity", value);
                this.OnPropertyChanged("PrimaryEntity");
            }
        }

        /// <summary>
        /// Type the business process flow order.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processorder")]
        public System.Nullable<int> ProcessOrder
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("processorder");
            }

            set
            {
                this.OnPropertyChanging("ProcessOrder");
                this.SetAttributeValue("processorder", value);
                this.OnPropertyChanged("ProcessOrder");
            }
        }

        /// <summary>
        /// Contains the role assignment for the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processroleassignment")]
        public string ProcessRoleAssignment
        {
            get
            {
                return this.GetAttributeValue<string>("processroleassignment");
            }

            set
            {
                this.OnPropertyChanging("ProcessRoleAssignment");
                this.SetAttributeValue("processroleassignment", value);
                this.OnPropertyChanged("ProcessRoleAssignment");
            }
        }

        /// <summary>
        /// Unique identifier of the associated form for process trigger.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processtriggerformid")]
        public System.Nullable<System.Guid> ProcessTriggerFormId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("processtriggerformid");
            }

            set
            {
                this.OnPropertyChanging("ProcessTriggerFormId");
                this.SetAttributeValue("processtriggerformid", value);
                this.OnPropertyChanged("ProcessTriggerFormId");
            }
        }

        /// <summary>
        /// Scope of the process trigger.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("processtriggerscope")]
        public System.Nullable<processtrigger_scope> ProcessTriggerScope
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("processtriggerscope");
                if ((optionSet != null))
                {
                    return ((processtrigger_scope)(System.Enum.ToObject(typeof(processtrigger_scope), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("ProcessTriggerScope");
                if ((value == null))
                {
                    this.SetAttributeValue("processtriggerscope", null);
                }
                else
                {
                    this.SetAttributeValue("processtriggerscope", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("ProcessTriggerScope");
            }
        }

        /// <summary>
        /// Indicates the rank for order of execution for the synchronous workflow.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rank")]
        public System.Nullable<int> Rank
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>("rank");
            }

            set
            {
                this.OnPropertyChanging("Rank");
                this.SetAttributeValue("rank", value);
                this.OnPropertyChanged("Rank");
            }
        }

        /// <summary>
        /// The renderer type of Workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("rendererobjecttypecode")]
        public string RendererObjectTypeCode
        {
            get
            {
                return this.GetAttributeValue<string>("rendererobjecttypecode");
            }

            set
            {
                this.OnPropertyChanging("RendererObjectTypeCode");
                this.SetAttributeValue("rendererobjecttypecode", value);
                this.OnPropertyChanged("RendererObjectTypeCode");
            }
        }

        /// <summary>
        /// Specifies the system user account under which a workflow executes.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("runas")]
        public System.Nullable<workflow_runas> RunAs
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("runas");
                if ((optionSet != null))
                {
                    return ((workflow_runas)(System.Enum.ToObject(typeof(workflow_runas), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("RunAs");
                if ((value == null))
                {
                    this.SetAttributeValue("runas", null);
                }
                else
                {
                    this.SetAttributeValue("runas", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("RunAs");
            }
        }

        /// <summary>
        /// Schema version for this workflow.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("schemaversion")]
        public string SchemaVersion
        {
            get
            {
                return this.GetAttributeValue<string>("schemaversion");
            }

            set
            {
                this.OnPropertyChanging("SchemaVersion");
                this.SetAttributeValue("schemaversion", value);
                this.OnPropertyChanged("SchemaVersion");
            }
        }

        /// <summary>
        /// Scope of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("scope")]
        public System.Nullable<workflow_scope> Scope
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("scope");
                if ((optionSet != null))
                {
                    return ((workflow_scope)(System.Enum.ToObject(typeof(workflow_scope), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("Scope");
                if ((value == null))
                {
                    this.SetAttributeValue("scope", null);
                }
                else
                {
                    this.SetAttributeValue("scope", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("Scope");
            }
        }

        /// <summary>
        /// Unique identifier of the SDK Message associated with this workflow.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("sdkmessageid")]
        public Microsoft.Xrm.Sdk.EntityReference SdkMessageId
        {
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("sdkmessageid");
            }
        }

        /// <summary>
        /// Unique identifier of the associated solution.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("solutionid")]
        public System.Nullable<System.Guid> SolutionId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("solutionid");
            }
        }

        /// <summary>
        /// Status of the workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
        public System.Nullable<workflow_statecode> StateCode
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("statecode");
                if ((optionSet != null))
                {
                    return ((workflow_statecode)(System.Enum.ToObject(typeof(workflow_statecode), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("StateCode");
                if ((value == null))
                {
                    this.SetAttributeValue("statecode", null);
                }
                else
                {
                    this.SetAttributeValue("statecode", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("StateCode");
            }
        }

        /// <summary>
        /// Reason for the status of the workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
        public System.Nullable<workflow_statuscode> StatusCode
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("statuscode");
                if ((optionSet != null))
                {
                    return ((workflow_statuscode)(System.Enum.ToObject(typeof(workflow_statuscode), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("StatusCode");
                if ((value == null))
                {
                    this.SetAttributeValue("statuscode", null);
                }
                else
                {
                    this.SetAttributeValue("statuscode", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("StatusCode");
            }
        }

        /// <summary>
        /// Indicates whether the process can be included in other processes as a child process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("subprocess")]
        public System.Nullable<bool> Subprocess
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("subprocess");
            }

            set
            {
                this.OnPropertyChanging("Subprocess");
                this.SetAttributeValue("subprocess", value);
                this.OnPropertyChanged("Subprocess");
            }
        }

        /// <summary>
        /// Select whether synchronous workflow failures will be saved to log files.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("syncworkflowlogonfailure")]
        public System.Nullable<bool> SyncWorkflowLogOnFailure
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("syncworkflowlogonfailure");
            }

            set
            {
                this.OnPropertyChanging("SyncWorkflowLogOnFailure");
                this.SetAttributeValue("syncworkflowlogonfailure", value);
                this.OnPropertyChanged("SyncWorkflowLogOnFailure");
            }
        }

        /// <summary>
        /// Indicates whether the process will be triggered when the primary entity is created.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("triggeroncreate")]
        public System.Nullable<bool> TriggerOnCreate
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("triggeroncreate");
            }

            set
            {
                this.OnPropertyChanging("TriggerOnCreate");
                this.SetAttributeValue("triggeroncreate", value);
                this.OnPropertyChanged("TriggerOnCreate");
            }
        }

        /// <summary>
        /// Indicates whether the process will be triggered on deletion of the primary entity.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("triggerondelete")]
        public System.Nullable<bool> TriggerOnDelete
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("triggerondelete");
            }

            set
            {
                this.OnPropertyChanging("TriggerOnDelete");
                this.SetAttributeValue("triggerondelete", value);
                this.OnPropertyChanged("TriggerOnDelete");
            }
        }

        /// <summary>
        /// Attributes that trigger the process when updated.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("triggeronupdateattributelist")]
        public string TriggerOnUpdateAttributeList
        {
            get
            {
                return this.GetAttributeValue<string>("triggeronupdateattributelist");
            }

            set
            {
                this.OnPropertyChanging("TriggerOnUpdateAttributeList");
                this.SetAttributeValue("triggeronupdateattributelist", value);
                this.OnPropertyChanged("TriggerOnUpdateAttributeList");
            }
        }

        /// <summary>
        /// For Internal Use Only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("trustedaccess")]
        public System.Nullable<bool> TrustedAccess
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>("trustedaccess");
            }
        }

        /// <summary>
        /// Type of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("type")]
        public Microsoft.Xrm.Sdk.OptionSetValue Type
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("type");
                if ((optionSet != null))
                {
                    return optionSet;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("Type");
                if ((value == null))
                {
                    this.SetAttributeValue("type", null);
                }
                else
                {
                    this.SetAttributeValue("type", value);
                }

                this.OnPropertyChanged("Type");
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("uidata")]
        public string UIData
        {
            get
            {
                return this.GetAttributeValue<string>("uidata");
            }
        }

        /// <summary>
        /// Type of the Desktop Flow process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("uiflowtype")]
        public System.Nullable<workflow_uiflowtype> UIFlowType
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("uiflowtype");
                if ((optionSet != null))
                {
                    return ((workflow_uiflowtype)(System.Enum.ToObject(typeof(workflow_uiflowtype), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("UIFlowType");
                if ((value == null))
                {
                    this.SetAttributeValue("uiflowtype", null);
                }
                else
                {
                    this.SetAttributeValue("uiflowtype", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("UIFlowType");
            }
        }

        /// <summary>
        /// Unique name of the process
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("uniquename")]
        public string UniqueName
        {
            get
            {
                return this.GetAttributeValue<string>("uniquename");
            }

            set
            {
                this.OnPropertyChanging("UniqueName");
                this.SetAttributeValue("uniquename", value);
                this.OnPropertyChanged("UniqueName");
            }
        }

        /// <summary>
        /// Select the stage a process will be triggered on update.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("updatestage")]
        public System.Nullable<workflow_stage> UpdateStage
        {
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("updatestage");
                if ((optionSet != null))
                {
                    return ((workflow_stage)(System.Enum.ToObject(typeof(workflow_stage), optionSet.Value)));
                }
                else
                {
                    return null;
                }
            }

            set
            {
                this.OnPropertyChanging("UpdateStage");
                if ((value == null))
                {
                    this.SetAttributeValue("updatestage", null);
                }
                else
                {
                    this.SetAttributeValue("updatestage", new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }

                this.OnPropertyChanged("UpdateStage");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
        public System.Nullable<long> VersionNumber
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
            }
        }

        /// <summary>
        /// Unique identifier of the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("workflowid")]
        public System.Nullable<System.Guid> WorkflowId
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("workflowid");
            }

            set
            {
                this.OnPropertyChanging("WorkflowId");
                this.SetAttributeValue("workflowid", value);
                if (value.HasValue)
                {
                    base.Id = value.Value;
                }
                else
                {
                    base.Id = System.Guid.Empty;
                }

                this.OnPropertyChanged("WorkflowId");
            }
        }

        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("workflowid")]
        public override System.Guid Id
        {
            get
            {
                return base.Id;
            }

            set
            {
                this.WorkflowId = value;
            }
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("workflowidunique")]
        public System.Nullable<System.Guid> WorkflowIdUnique
        {
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>("workflowidunique");
            }
        }

        /// <summary>
        /// XAML that defines the process.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("xaml")]
        public string Xaml
        {
            get
            {
                return this.GetAttributeValue<string>("xaml");
            }

            set
            {
                this.OnPropertyChanging("Xaml");
                this.SetAttributeValue("xaml", value);
                this.OnPropertyChanged("Xaml");
            }
        }

        /// <summary>
        /// 1:N lk_asyncoperation_workflowactivationid
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_asyncoperation_workflowactivationid")]
        public System.Collections.Generic.IEnumerable<SystemJob> SystemJobs_WorkflowActivationId
        {
            get
            {
                return this.GetRelatedEntities<SystemJob>("lk_asyncoperation_workflowactivationid", null);
            }

            set
            {
                this.OnPropertyChanging("SystemJobs_WorkflowActivationId");
                this.SetRelatedEntities<SystemJob>("lk_asyncoperation_workflowactivationid", null, value);
                this.OnPropertyChanged("SystemJobs_WorkflowActivationId");
            }
        }

        /// <summary>
        /// 1:N lk_processsession_processid
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_processsession_processid")]
        public System.Collections.Generic.IEnumerable<ProcessSession> ProcessSessions_Process
        {
            get
            {
                return this.GetRelatedEntities<ProcessSession>("lk_processsession_processid", null);
            }

            set
            {
                this.OnPropertyChanging("ProcessSessions_Process");
                this.SetRelatedEntities<ProcessSession>("lk_processsession_processid", null, value);
                this.OnPropertyChanged("ProcessSessions_Process");
            }
        }

        /// <summary>
        /// 1:N slabase_workflowid
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("slabase_workflowid")]
        public System.Collections.Generic.IEnumerable<SLA> SLAs_WorkflowID
        {
            get
            {
                return this.GetRelatedEntities<SLA>("slabase_workflowid", null);
            }

            set
            {
                this.OnPropertyChanging("SLAs_WorkflowID");
                this.SetRelatedEntities<SLA>("slabase_workflowid", null, value);
                this.OnPropertyChanged("SLAs_WorkflowID");
            }
        }

        /// <summary>
        /// 1:N userentityinstancedata_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("userentityinstancedata_workflow")]
        public System.Collections.Generic.IEnumerable<UserEntityInstanceData> UserEntityInstanceData_ObjectId
        {
            get
            {
                return this.GetRelatedEntities<UserEntityInstanceData>("userentityinstancedata_workflow", null);
            }

            set
            {
                this.OnPropertyChanging("UserEntityInstanceData_ObjectId");
                this.SetRelatedEntities<UserEntityInstanceData>("userentityinstancedata_workflow", null, value);
                this.OnPropertyChanged("UserEntityInstanceData_ObjectId");
            }
        }

        /// <summary>
        /// 1:N workflow_active_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
        public System.Collections.Generic.IEnumerable<Workflow> workflow_active_workflow_Referenced
        {
            get
            {
                return this.GetRelatedEntities<Workflow>("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced);
            }

            set
            {
                this.OnPropertyChanging("workflow_active_workflow_Referenced");
                this.SetRelatedEntities<Workflow>("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
                this.OnPropertyChanged("workflow_active_workflow_Referenced");
            }
        }

        /// <summary>
        /// 1:N Workflow_Annotation
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("Workflow_Annotation")]
        public System.Collections.Generic.IEnumerable<Annotation> Notes_Regarding
        {
            get
            {
                return this.GetRelatedEntities<Annotation>("Workflow_Annotation", null);
            }

            set
            {
                this.OnPropertyChanging("Notes_Regarding");
                this.SetRelatedEntities<Annotation>("Workflow_Annotation", null, value);
                this.OnPropertyChanged("Notes_Regarding");
            }
        }

        /// <summary>
        /// 1:N workflow_parent_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
        public System.Collections.Generic.IEnumerable<Workflow> workflow_parent_workflow_Referenced
        {
            get
            {
                return this.GetRelatedEntities<Workflow>("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced);
            }

            set
            {
                this.OnPropertyChanging("workflow_parent_workflow_Referenced");
                this.SetRelatedEntities<Workflow>("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
                this.OnPropertyChanged("workflow_parent_workflow_Referenced");
            }
        }

        /// <summary>
        /// 1:N Workflow_SyncErrors
        /// </summary>
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("Workflow_SyncErrors")]
        public System.Collections.Generic.IEnumerable<SyncError> SyncErrors_Record
        {
            get
            {
                return this.GetRelatedEntities<SyncError>("Workflow_SyncErrors", null);
            }

            set
            {
                this.OnPropertyChanging("SyncErrors_Record");
                this.SetRelatedEntities<SyncError>("Workflow_SyncErrors", null, value);
                this.OnPropertyChanged("SyncErrors_Record");
            }
        }

        /// <summary>
        /// N:1 business_unit_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningbusinessunit")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("business_unit_workflow")]
        public BusinessUnit Processes_OwningBusinessUnit
        {
            get
            {
                return this.GetRelatedEntity<BusinessUnit>("business_unit_workflow", null);
            }
        }

        /// <summary>
        /// N:1 system_user_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owninguser")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("system_user_workflow")]
        public SystemUser Processes_OwningUser
        {
            get
            {
                return this.GetRelatedEntity<SystemUser>("system_user_workflow", null);
            }
        }

        /// <summary>
        /// N:1 team_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("owningteam")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("team_workflow")]
        public Team Processes_OwningTeam
        {
            get
            {
                return this.GetRelatedEntity<Team>("team_workflow", null);
            }
        }

        /// <summary>
        /// N:1 workflow_active_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("activeworkflowid")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
        public Workflow workflow_active_workflow_Referencing
        {
            get
            {
                return this.GetRelatedEntity<Workflow>("workflow_active_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing);
            }
        }

        /// <summary>
        /// N:1 workflow_createdby
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_createdby")]
        public SystemUser Processes_CreatedBy
        {
            get
            {
                return this.GetRelatedEntity<SystemUser>("workflow_createdby", null);
            }
        }

        /// <summary>
        /// N:1 workflow_createdonbehalfby
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_createdonbehalfby")]
        public SystemUser Processes_CreatedBy_Delegate
        {
            get
            {
                return this.GetRelatedEntity<SystemUser>("workflow_createdonbehalfby", null);
            }
        }

        /// <summary>
        /// N:1 workflow_modifiedby
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_modifiedby")]
        public SystemUser Processes_ModifiedBy
        {
            get
            {
                return this.GetRelatedEntity<SystemUser>("workflow_modifiedby", null);
            }
        }

        /// <summary>
        /// N:1 workflow_modifiedonbehalfby
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_modifiedonbehalfby")]
        public SystemUser Processes_ModifiedBy_Delegate
        {
            get
            {
                return this.GetRelatedEntity<SystemUser>("workflow_modifiedonbehalfby", null);
            }
        }

        /// <summary>
        /// N:1 workflow_parent_workflow
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("parentworkflowid")]
        [Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing)]
        public Workflow workflow_parent_workflow_Referencing
        {
            get
            {
                return this.GetRelatedEntity<Workflow>("workflow_parent_workflow", Microsoft.Xrm.Sdk.EntityRole.Referencing);
            }
        }
    }
}